{
  "asyncapi": "2.6.0",
  "info": {
    "title": "Cortex-OS A2A (Agent-to-Agent) Protocol",
    "version": "1.0.0",
    "description": "AsyncAPI specification for the Cortex-OS Agent-to-Agent communication protocol.\nThis defines the event-driven messaging channels used for inter-agent communication\nwithin the ASBR (Agent-Service-Bus-Runtime) architecture.\n",
    "contact": {
      "name": "Cortex-OS Team",
      "url": "https://github.com/jamiescottcraik/Cortex-OS-clean"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": {
    "development": {
      "url": "localhost:8080",
      "protocol": "ws",
      "description": "Development WebSocket server"
    },
    "production": {
      "url": "wss://api.cortex-os.com/a2a",
      "protocol": "wss",
      "description": "Production WebSocket server"
    }
  },
  "channels": {
    "agent/commands": {
      "description": "Channel for sending commands to agents",
      "subscribe": {
        "message": {
          "$ref": "#/components/messages/CommandMessage"
        }
      },
      "publish": {
        "message": {
          "$ref": "#/components/messages/CommandResponse"
        }
      }
    },
    "agent/events": {
      "description": "Channel for agent lifecycle and status events",
      "publish": {
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/AgentStarted"
            },
            {
              "$ref": "#/components/messages/AgentStopped"
            },
            {
              "$ref": "#/components/messages/AgentError"
            },
            {
              "$ref": "#/components/messages/AgentHeartbeat"
            }
          ]
        }
      }
    },
    "task/lifecycle": {
      "description": "Channel for task creation, updates, and completion events",
      "parameters": {
        "taskId": {
          "description": "Unique identifier for the task",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "subscribe": {
        "message": {
          "$ref": "#/components/messages/TaskUpdate"
        }
      },
      "publish": {
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/TaskCreated"
            },
            {
              "$ref": "#/components/messages/TaskCompleted"
            },
            {
              "$ref": "#/components/messages/TaskFailed"
            }
          ]
        }
      }
    },
    "mcp/tool/calls": {
      "description": "Channel for MCP (Model Context Protocol) tool invocations",
      "parameters": {
        "toolName": {
          "description": "Name of the MCP tool being called",
          "schema": {
            "type": "string"
          }
        }
      },
      "subscribe": {
        "message": {
          "$ref": "#/components/messages/ToolCall"
        }
      },
      "publish": {
        "message": {
          "$ref": "#/components/messages/ToolResult"
        }
      }
    },
    "system/health": {
      "description": "Channel for system health monitoring and diagnostics",
      "publish": {
        "message": {
          "$ref": "#/components/messages/HealthStatus"
        }
      }
    },
    "error/dlq": {
      "description": "Dead Letter Queue channel for messages that failed processing",
      "publish": {
        "message": {
          "$ref": "#/components/messages/DeadLetterMessage"
        }
      }
    },
    "outbox/messages": {
      "description": "Transactional outbox channel for reliable message publishing",
      "parameters": {
        "aggregateType": {
          "description": "Type of aggregate that produced the message",
          "schema": {
            "type": "string"
          }
        },
        "aggregateId": {
          "description": "ID of the aggregate that produced the message",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "subscribe": {
        "message": {
          "$ref": "#/components/messages/OutboxMessage"
        }
      },
      "publish": {
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/OutboxMessagePublished"
            },
            {
              "$ref": "#/components/messages/OutboxMessageFailed"
            }
          ]
        }
      }
    },
    "schema/registry": {
      "description": "Schema registry channel for schema management and validation",
      "parameters": {
        "schemaType": {
          "description": "Type of schema being managed",
          "schema": {
            "type": "string",
            "enum": ["event", "command", "response"]
          }
        },
        "schemaVersion": {
          "description": "Version of the schema",
          "schema": {
            "type": "string",
            "pattern": "^\\d+\\.\\d+\\.\\d+$"
          }
        }
      },
      "subscribe": {
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/SchemaRegistered"
            },
            {
              "$ref": "#/components/messages/SchemaValidationRequest"
            }
          ]
        }
      },
      "publish": {
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/SchemaRegistered"
            },
            {
              "$ref": "#/components/messages/SchemaValidationResult"
            },
            {
              "$ref": "#/components/messages/SchemaCompatibilityCheck"
            }
          ]
        }
      }
    },
    "saga/orchestration": {
      "description": "Saga orchestration channel for distributed transaction coordination",
      "parameters": {
        "sagaId": {
          "description": "Unique identifier for the saga",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "subscribe": {
        "message": {
          "$ref": "#/components/messages/SagaCommand"
        }
      },
      "publish": {
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/SagaStarted"
            },
            {
              "$ref": "#/components/messages/SagaStepCompleted"
            },
            {
              "$ref": "#/components/messages/SagaCompensating"
            },
            {
              "$ref": "#/components/messages/SagaCompleted"
            },
            {
              "$ref": "#/components/messages/SagaFailed"
            }
          ]
        }
      }
    }
  },
  "components": {
    "messages": {
      "CommandMessage": {
        "name": "CommandMessage",
        "title": "Agent Command",
        "summary": "A command sent to an agent for execution",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "enum": ["agent.command.execute", "agent.command.cancel"]
            },
            "data": {
              "$ref": "#/components/schemas/Command"
            }
          }
        }
      },
      "CommandResponse": {
        "name": "CommandResponse",
        "title": "Command Response",
        "summary": "Response to an agent command",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "enum": ["agent.command.completed", "agent.command.failed"]
            },
            "data": {
              "$ref": "#/components/schemas/CommandResult"
            }
          }
        }
      },
      "AgentStarted": {
        "name": "AgentStarted",
        "title": "Agent Started Event",
        "summary": "Fired when an agent starts successfully",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "agent.started"
            },
            "data": {
              "$ref": "#/components/schemas/AgentInfo"
            }
          }
        }
      },
      "AgentStopped": {
        "name": "AgentStopped",
        "title": "Agent Stopped Event",
        "summary": "Fired when an agent stops",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "agent.stopped"
            },
            "data": {
              "$ref": "#/components/schemas/AgentInfo"
            }
          }
        }
      },
      "AgentError": {
        "name": "AgentError",
        "title": "Agent Error Event",
        "summary": "Fired when an agent encounters an error",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "agent.error"
            },
            "data": {
              "$ref": "#/components/schemas/AgentError"
            }
          }
        }
      },
      "AgentHeartbeat": {
        "name": "AgentHeartbeat",
        "title": "Agent Heartbeat",
        "summary": "Periodic heartbeat from an agent",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "agent.heartbeat"
            },
            "data": {
              "$ref": "#/components/schemas/Heartbeat"
            }
          }
        }
      },
      "TaskCreated": {
        "name": "TaskCreated",
        "title": "Task Created Event",
        "summary": "Fired when a new task is created",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "task.created"
            },
            "data": {
              "$ref": "#/components/schemas/Task"
            }
          }
        }
      },
      "TaskUpdate": {
        "name": "TaskUpdate",
        "title": "Task Update Event",
        "summary": "Fired when a task status changes",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "task.updated"
            },
            "data": {
              "$ref": "#/components/schemas/TaskUpdate"
            }
          }
        }
      },
      "TaskCompleted": {
        "name": "TaskCompleted",
        "title": "Task Completed Event",
        "summary": "Fired when a task completes successfully",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "task.completed"
            },
            "data": {
              "$ref": "#/components/schemas/TaskResult"
            }
          }
        }
      },
      "TaskFailed": {
        "name": "TaskFailed",
        "title": "Task Failed Event",
        "summary": "Fired when a task fails",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "task.failed"
            },
            "data": {
              "$ref": "#/components/schemas/TaskError"
            }
          }
        }
      },
      "ToolCall": {
        "name": "ToolCall",
        "title": "MCP Tool Call",
        "summary": "Invocation of an MCP tool",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "mcp.tool.call"
            },
            "data": {
              "$ref": "#/components/schemas/ToolCall"
            }
          }
        }
      },
      "ToolResult": {
        "name": "ToolResult",
        "title": "MCP Tool Result",
        "summary": "Result from an MCP tool invocation",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "mcp.tool.result"
            },
            "data": {
              "$ref": "#/components/schemas/ToolResult"
            }
          }
        }
      },
      "HealthStatus": {
        "name": "HealthStatus",
        "title": "System Health Status",
        "summary": "Current health status of system components",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "system.health"
            },
            "data": {
              "$ref": "#/components/schemas/HealthStatus"
            }
          }
        }
      },
      "DeadLetterMessage": {
        "name": "DeadLetterMessage",
        "title": "Dead Letter Message",
        "summary": "Message that failed processing and was moved to DLQ",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/DeadLetterEnvelope"
        }
      },
      "OutboxMessage": {
        "name": "OutboxMessage",
        "title": "Outbox Message",
        "summary": "Message pending publication from transactional outbox",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "outbox.message.pending"
            },
            "data": {
              "$ref": "#/components/schemas/OutboxMessageData"
            }
          }
        }
      },
      "OutboxMessagePublished": {
        "name": "OutboxMessagePublished",
        "title": "Outbox Message Published",
        "summary": "Confirmation that an outbox message was successfully published",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "outbox.message.published"
            },
            "data": {
              "$ref": "#/components/schemas/OutboxPublishResult"
            }
          }
        }
      },
      "OutboxMessageFailed": {
        "name": "OutboxMessageFailed",
        "title": "Outbox Message Failed",
        "summary": "Notification that an outbox message failed to publish",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "outbox.message.failed"
            },
            "data": {
              "$ref": "#/components/schemas/OutboxPublishError"
            }
          }
        }
      },
      "SchemaRegistered": {
        "name": "SchemaRegistered",
        "title": "Schema Registered",
        "summary": "Notification that a new schema was registered",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "schema.registered"
            },
            "data": {
              "$ref": "#/components/schemas/SchemaMetadata"
            }
          }
        }
      },
      "SchemaValidationRequest": {
        "name": "SchemaValidationRequest",
        "title": "Schema Validation Request",
        "summary": "Request to validate a message against a schema",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "schema.validation.request"
            },
            "data": {
              "$ref": "#/components/schemas/SchemaValidationRequestData"
            }
          }
        }
      },
      "SchemaValidationResult": {
        "name": "SchemaValidationResult",
        "title": "Schema Validation Result",
        "summary": "Result of schema validation",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "schema.validation.result"
            },
            "data": {
              "$ref": "#/components/schemas/SchemaValidationResultData"
            }
          }
        }
      },
      "SchemaCompatibilityCheck": {
        "name": "SchemaCompatibilityCheck",
        "title": "Schema Compatibility Check",
        "summary": "Result of schema compatibility analysis",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "schema.compatibility.check"
            },
            "data": {
              "$ref": "#/components/schemas/SchemaCompatibilityResult"
            }
          }
        }
      },
      "SagaCommand": {
        "name": "SagaCommand",
        "title": "Saga Command",
        "summary": "Command to control saga execution",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "enum": ["saga.start", "saga.resume", "saga.compensate", "saga.abort"]
            },
            "data": {
              "$ref": "#/components/schemas/SagaCommandData"
            }
          }
        }
      },
      "SagaStarted": {
        "name": "SagaStarted",
        "title": "Saga Started",
        "summary": "Notification that a saga has started",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "saga.started"
            },
            "data": {
              "$ref": "#/components/schemas/SagaContextData"
            }
          }
        }
      },
      "SagaStepCompleted": {
        "name": "SagaStepCompleted",
        "title": "Saga Step Completed",
        "summary": "Notification that a saga step completed",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "saga.step.completed"
            },
            "data": {
              "$ref": "#/components/schemas/SagaStepResult"
            }
          }
        }
      },
      "SagaCompensating": {
        "name": "SagaCompensating",
        "title": "Saga Compensating",
        "summary": "Notification that saga is entering compensation phase",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "saga.compensating"
            },
            "data": {
              "$ref": "#/components/schemas/SagaContextData"
            }
          }
        }
      },
      "SagaCompleted": {
        "name": "SagaCompleted",
        "title": "Saga Completed",
        "summary": "Notification that saga completed successfully",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "saga.completed"
            },
            "data": {
              "$ref": "#/components/schemas/SagaResultData"
            }
          }
        }
      },
      "SagaFailed": {
        "name": "SagaFailed",
        "title": "Saga Failed",
        "summary": "Notification that saga failed",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "saga.failed"
            },
            "data": {
              "$ref": "#/components/schemas/SagaResultData"
            }
          }
        }
      }
    },
    "schemas": {
      "Envelope": {
        "type": "object",
        "required": ["id", "type", "source", "specversion"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for this event"
          },
          "type": {
            "type": "string",
            "description": "Event type identifier"
          },
          "source": {
            "type": "string",
            "format": "uri",
            "description": "Source URI of the event producer"
          },
          "specversion": {
            "type": "string",
            "enum": ["1.0"],
            "description": "CloudEvents specification version"
          },
          "datacontenttype": {
            "type": "string",
            "description": "Content type of the data payload"
          },
          "dataschema": {
            "type": "string",
            "format": "uri",
            "description": "Schema URI for the data payload"
          },
          "subject": {
            "type": "string",
            "description": "Subject of the event"
          },
          "time": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the event occurred"
          },
          "schemaVersion": {
            "type": "integer",
            "minimum": 1,
            "default": 1,
            "description": "ASBR schema version"
          },
          "causationId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the event that caused this event"
          },
          "correlationId": {
            "type": "string",
            "format": "uuid",
            "description": "Correlation ID for related events"
          },
          "occurredAt": {
            "type": "string",
            "format": "date-time",
            "description": "When this event occurred (ASBR format)"
          },
          "ttlMs": {
            "type": "integer",
            "minimum": 1,
            "default": 60000,
            "description": "Time-to-live in milliseconds"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional headers/metadata"
          },
          "data": {
            "description": "Event payload data"
          }
        }
      },
      "Command": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the command to execute"
          },
          "args": {
            "type": "object",
            "description": "Command arguments"
          },
          "timeout": {
            "type": "integer",
            "description": "Command timeout in milliseconds"
          }
        }
      },
      "CommandResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the command succeeded"
          },
          "result": {
            "description": "Command result data"
          },
          "error": {
            "type": "string",
            "description": "Error message if command failed"
          },
          "executionTime": {
            "type": "integer",
            "description": "Execution time in milliseconds"
          }
        }
      },
      "AgentInfo": {
        "type": "object",
        "required": ["id", "name"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique agent identifier"
          },
          "name": {
            "type": "string",
            "description": "Human-readable agent name"
          },
          "version": {
            "type": "string",
            "description": "Agent version"
          },
          "capabilities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Agent capabilities"
          },
          "endpoint": {
            "type": "string",
            "format": "uri",
            "description": "Agent endpoint URL"
          }
        }
      },
      "AgentError": {
        "type": "object",
        "required": ["agentId", "error"],
        "properties": {
          "agentId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the agent that encountered the error"
          },
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "stack": {
            "type": "string",
            "description": "Error stack trace"
          }
        }
      },
      "Heartbeat": {
        "type": "object",
        "required": ["agentId", "timestamp"],
        "properties": {
          "agentId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the reporting agent"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Heartbeat timestamp"
          },
          "status": {
            "type": "string",
            "enum": ["healthy", "degraded", "unhealthy"],
            "description": "Agent health status"
          },
          "metrics": {
            "type": "object",
            "description": "Agent performance metrics"
          }
        }
      },
      "Task": {
        "type": "object",
        "required": ["id", "type", "status"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique task identifier"
          },
          "type": {
            "type": "string",
            "description": "Task type"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "running", "completed", "failed", "cancelled"],
            "description": "Current task status"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Task creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Task last update timestamp"
          },
          "input": {
            "description": "Task input data"
          },
          "metadata": {
            "type": "object",
            "description": "Additional task metadata"
          }
        }
      },
      "TaskUpdate": {
        "type": "object",
        "required": ["taskId", "status"],
        "properties": {
          "taskId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the updated task"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "running", "completed", "failed", "cancelled"],
            "description": "New task status"
          },
          "progress": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "description": "Task progress percentage"
          },
          "message": {
            "type": "string",
            "description": "Status message"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Update timestamp"
          }
        }
      },
      "TaskResult": {
        "type": "object",
        "required": ["taskId"],
        "properties": {
          "taskId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the completed task"
          },
          "result": {
            "description": "Task result data"
          },
          "executionTime": {
            "type": "integer",
            "description": "Total execution time in milliseconds"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Completion timestamp"
          }
        }
      },
      "TaskError": {
        "type": "object",
        "required": ["taskId", "error"],
        "properties": {
          "taskId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the failed task"
          },
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "retryable": {
            "type": "boolean",
            "description": "Whether the task can be retried"
          },
          "failedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Failure timestamp"
          }
        }
      },
      "ToolCall": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool to call"
          },
          "args": {
            "type": "object",
            "description": "Tool arguments"
          },
          "timeout": {
            "type": "integer",
            "description": "Tool call timeout in milliseconds"
          }
        }
      },
      "ToolResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the tool call succeeded"
          },
          "result": {
            "description": "Tool result data"
          },
          "error": {
            "type": "string",
            "description": "Error message if tool call failed"
          },
          "executionTime": {
            "type": "integer",
            "description": "Execution time in milliseconds"
          }
        }
      },
      "HealthStatus": {
        "type": "object",
        "required": ["component", "status", "timestamp"],
        "properties": {
          "component": {
            "type": "string",
            "description": "Name of the component"
          },
          "status": {
            "type": "string",
            "enum": ["healthy", "degraded", "unhealthy"],
            "description": "Health status"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Health check timestamp"
          },
          "metrics": {
            "type": "object",
            "description": "Health metrics"
          },
          "message": {
            "type": "string",
            "description": "Health status message"
          }
        }
      },
      "DeadLetterEnvelope": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Envelope"
          },
          {
            "type": "object",
            "required": [
              "error",
              "retryCount",
              "firstFailureAt",
              "lastFailureAt",
              "failureReasons"
            ],
            "properties": {
              "error": {
                "type": "object",
                "required": ["message"],
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Error message"
                  },
                  "stack": {
                    "type": "string",
                    "description": "Error stack trace"
                  },
                  "code": {
                    "type": "string",
                    "description": "Error code"
                  }
                }
              },
              "retryCount": {
                "type": "integer",
                "minimum": 0,
                "description": "Number of retry attempts"
              },
              "firstFailureAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of first failure"
              },
              "lastFailureAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of last failure"
              },
              "failureReasons": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of failure reasons"
              }
            }
          }
        ]
      },
      "OutboxMessageData": {
        "type": "object",
        "required": ["id", "aggregateType", "aggregateId", "messageType", "payload", "createdAt"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique outbox message identifier"
          },
          "aggregateType": {
            "type": "string",
            "description": "Type of aggregate that produced the message"
          },
          "aggregateId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the aggregate that produced the message"
          },
          "messageType": {
            "type": "string",
            "description": "Type of the message to be published"
          },
          "payload": {
            "description": "Message payload data"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the message was added to outbox"
          },
          "publishAttempts": {
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "description": "Number of publish attempts"
          },
          "lastAttemptAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last publish attempt"
          },
          "nextAttemptAt": {
            "type": "string",
            "format": "date-time",
            "description": "When to attempt publishing next"
          }
        }
      },
      "OutboxPublishResult": {
        "type": "object",
        "required": ["messageId", "publishedAt"],
        "properties": {
          "messageId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the published message"
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the message was published"
          },
          "deliveryStatus": {
            "type": "string",
            "enum": ["delivered", "acknowledged", "confirmed"],
            "description": "Delivery confirmation status"
          }
        }
      },
      "OutboxPublishError": {
        "type": "object",
        "required": ["messageId", "error", "attemptCount"],
        "properties": {
          "messageId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the failed message"
          },
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "attemptCount": {
            "type": "integer",
            "minimum": 1,
            "description": "Number of attempts made"
          },
          "nextRetryAt": {
            "type": "string",
            "format": "date-time",
            "description": "When to retry next"
          }
        }
      },
      "SchemaMetadata": {
        "type": "object",
        "required": ["id", "type", "name", "version", "schema", "registeredAt"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique schema identifier"
          },
          "type": {
            "type": "string",
            "enum": ["event", "command", "response"],
            "description": "Type of schema"
          },
          "name": {
            "type": "string",
            "description": "Schema name"
          },
          "version": {
            "type": "string",
            "pattern": "^\\d+\\.\\d+\\.\\d+$",
            "description": "Schema version"
          },
          "schema": {
            "description": "JSON schema definition"
          },
          "registeredAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the schema was registered"
          },
          "compatibility": {
            "type": "string",
            "enum": ["BACKWARD", "FORWARD", "FULL", "NONE"],
            "default": "BACKWARD",
            "description": "Compatibility mode"
          },
          "deprecated": {
            "type": "boolean",
            "default": false,
            "description": "Whether this schema is deprecated"
          }
        }
      },
      "SchemaValidationRequestData": {
        "type": "object",
        "required": ["messageType", "messageVersion", "payload"],
        "properties": {
          "messageType": {
            "type": "string",
            "description": "Type of message to validate"
          },
          "messageVersion": {
            "type": "string",
            "pattern": "^\\d+\\.\\d+\\.\\d+$",
            "description": "Version of the message schema"
          },
          "payload": {
            "description": "Message payload to validate"
          },
          "strict": {
            "type": "boolean",
            "default": true,
            "description": "Whether to use strict validation"
          }
        }
      },
      "SchemaValidationResultData": {
        "type": "object",
        "required": ["messageType", "messageVersion", "valid"],
        "properties": {
          "messageType": {
            "type": "string",
            "description": "Type of validated message"
          },
          "messageVersion": {
            "type": "string",
            "pattern": "^\\d+\\.\\d+\\.\\d+$",
            "description": "Version of the message schema"
          },
          "valid": {
            "type": "boolean",
            "description": "Whether the message is valid"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "JSON path to the error"
                },
                "message": {
                  "type": "string",
                  "description": "Validation error message"
                }
              }
            },
            "description": "Validation errors if any"
          }
        }
      },
      "SchemaCompatibilityResult": {
        "type": "object",
        "required": ["schemaType", "fromVersion", "toVersion", "compatible"],
        "properties": {
          "schemaType": {
            "type": "string",
            "description": "Type of schema being checked"
          },
          "fromVersion": {
            "type": "string",
            "pattern": "^\\d+\\.\\d+\\.\\d+$",
            "description": "Original schema version"
          },
          "toVersion": {
            "type": "string",
            "pattern": "^\\d+\\.\\d+\\.\\d+$",
            "description": "New schema version"
          },
          "compatible": {
            "type": "boolean",
            "description": "Whether schemas are compatible"
          },
          "compatibility": {
            "type": "string",
            "enum": ["BACKWARD", "FORWARD", "FULL", "NONE"],
            "description": "Type of compatibility"
          },
          "breakingChanges": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of breaking changes"
          }
        }
      },
      "SagaCommandData": {
        "type": "object",
        "required": ["sagaType", "operation"],
        "properties": {
          "sagaType": {
            "type": "string",
            "description": "Type of saga to execute"
          },
          "operation": {
            "type": "string",
            "enum": ["start", "resume", "compensate", "abort"],
            "description": "Saga operation to perform"
          },
          "initialContext": {
            "description": "Initial context for saga execution"
          },
          "sagaId": {
            "type": "string",
            "format": "uuid",
            "description": "Specific saga ID for resume operations"
          }
        }
      },
      "SagaContextData": {
        "type": "object",
        "required": [
          "sagaId",
          "correlationId",
          "state",
          "currentStep",
          "executedSteps",
          "startTime"
        ],
        "properties": {
          "sagaId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique saga identifier"
          },
          "correlationId": {
            "type": "string",
            "format": "uuid",
            "description": "Correlation ID for related operations"
          },
          "state": {
            "type": "string",
            "enum": ["PENDING", "RUNNING", "COMPLETED", "COMPENSATING", "COMPENSATED", "FAILED"],
            "description": "Current saga state"
          },
          "currentStep": {
            "type": "integer",
            "minimum": 0,
            "description": "Current step index"
          },
          "executedSteps": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of executed steps"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "description": "When the saga started"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "When the saga ended"
          },
          "error": {
            "type": "object",
            "properties": {
              "step": {
                "type": "string",
                "description": "Step that failed"
              },
              "message": {
                "type": "string",
                "description": "Error message"
              },
              "stack": {
                "type": "string",
                "description": "Error stack trace"
              }
            },
            "description": "Error details if saga failed"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "description": "Additional saga metadata"
          }
        }
      },
      "SagaStepResult": {
        "type": "object",
        "required": ["sagaId", "stepId", "stepName", "success"],
        "properties": {
          "sagaId": {
            "type": "string",
            "format": "uuid",
            "description": "Saga identifier"
          },
          "stepId": {
            "type": "string",
            "description": "Step identifier"
          },
          "stepName": {
            "type": "string",
            "description": "Human-readable step name"
          },
          "success": {
            "type": "boolean",
            "description": "Whether the step succeeded"
          },
          "context": {
            "description": "Updated context after step execution"
          },
          "executionTime": {
            "type": "integer",
            "description": "Step execution time in milliseconds"
          },
          "error": {
            "type": "string",
            "description": "Error message if step failed"
          }
        }
      },
      "SagaResultData": {
        "type": "object",
        "required": ["success", "context", "sagaContext", "compensationPerformed"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the saga succeeded"
          },
          "context": {
            "description": "Final saga context"
          },
          "sagaContext": {
            "$ref": "#/components/schemas/SagaContextData"
          },
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Error message"
              },
              "stack": {
                "type": "string",
                "description": "Error stack trace"
              }
            },
            "description": "Error details if saga failed"
          },
          "compensationPerformed": {
            "type": "boolean",
            "description": "Whether compensation was performed"
          }
        }
      },
          "$ref": "#/components/schemas/OutboxMessageData"
        }
      },
      "OutboxMessagePublished": {
        "name": "OutboxMessagePublished",
        "title": "Outbox Message Published",
        "summary": "Confirmation that an outbox message was successfully published",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "outbox.message.published"
            },
            "data": {
              "$ref": "#/components/schemas/OutboxPublishResult"
            }
          }
        }
      },
      "OutboxMessageFailed": {
        "name": "OutboxMessageFailed",
        "title": "Outbox Message Failed",
        "summary": "Notification that an outbox message failed to publish",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "outbox.message.failed"
            },
            "data": {
              "$ref": "#/components/schemas/OutboxPublishError"
            }
          }
        }
      },
      "SchemaRegistered": {
        "name": "SchemaRegistered",
        "title": "Schema Registered",
        "summary": "Notification that a new schema was registered",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "schema.registered"
            },
            "data": {
              "$ref": "#/components/schemas/SchemaMetadata"
            }
          }
        }
      },
      "SchemaValidationRequest": {
        "name": "SchemaValidationRequest",
        "title": "Schema Validation Request",
        "summary": "Request to validate a message against a schema",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "schema.validation.request"
            },
            "data": {
              "$ref": "#/components/schemas/SchemaValidationRequestData"
            }
          }
        }
      },
      "SchemaValidationResult": {
        "name": "SchemaValidationResult",
        "title": "Schema Validation Result",
        "summary": "Result of schema validation",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "schema.validation.result"
            },
            "data": {
              "$ref": "#/components/schemas/SchemaValidationResultData"
            }
          }
        }
      },
      "SchemaCompatibilityCheck": {
        "name": "SchemaCompatibilityCheck",
        "title": "Schema Compatibility Check",
        "summary": "Result of schema compatibility analysis",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "schema.compatibility.check"
            },
            "data": {
              "$ref": "#/components/schemas/SchemaCompatibilityResult"
            }
          }
        }
      },
      "SagaCommand": {
        "name": "SagaCommand",
        "title": "Saga Command",
        "summary": "Command to control saga execution",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "enum": ["saga.start", "saga.resume", "saga.compensate", "saga.abort"]
            },
            "data": {
              "$ref": "#/components/schemas/SagaCommandData"
            }
          }
        }
      },
      "SagaStarted": {
        "name": "SagaStarted",
        "title": "Saga Started",
        "summary": "Notification that a saga has started",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "saga.started"
            },
            "data": {
              "$ref": "#/components/schemas/SagaContextData"
            }
          }
        }
      },
      "SagaStepCompleted": {
        "name": "SagaStepCompleted",
        "title": "Saga Step Completed",
        "summary": "Notification that a saga step completed",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "saga.step.completed"
            },
            "data": {
              "$ref": "#/components/schemas/SagaStepResult"
            }
          }
        }
      },
      "SagaCompensating": {
        "name": "SagaCompensating",
        "title": "Saga Compensating",
        "summary": "Notification that saga is entering compensation phase",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "saga.compensating"
            },
            "data": {
              "$ref": "#/components/schemas/SagaContextData"
            }
          }
        }
      },
      "SagaCompleted": {
        "name": "SagaCompleted",
        "title": "Saga Completed",
        "summary": "Notification that saga completed successfully",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "saga.completed"
            },
            "data": {
              "$ref": "#/components/schemas/SagaResultData"
            }
          }
        }
      },
      "SagaFailed": {
        "name": "SagaFailed",
        "title": "Saga Failed",
        "summary": "Notification that saga failed",
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/Envelope",
          "properties": {
            "type": {
              "const": "saga.failed"
            },
            "data": {
              "$ref": "#/components/schemas/SagaResultData"
            }
          }
        }
      }
    }
  }
