# Multi-stage Docker build for optimized production deployment
# This Dockerfile provides development, testing, and production stages

# Base stage with common dependencies
FROM node:20.11.1-alpine AS base
WORKDIR /app

# Install system dependencies for native modules
RUN apk add --no-cache \
    curl \
    g++ \
    git \
    libc6-compat \
    make \
    python3

# Enable corepack for package manager consistency
RUN corepack enable

# Copy package files first to leverage Docker layer caching
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Copy .npmrc if it exists, otherwise create a minimal one
COPY .npmr[c] ./
RUN [ -f .npmrc ] || echo "registry=https://registry.npmjs.org/" > .npmrc

# Development stage
FROM base AS development
ENV NODE_ENV=development

# Install all dependencies including devDependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Expose development port
EXPOSE 3000
EXPOSE 5173
EXPOSE 8080

# Development command
CMD ["pnpm", "dev"]

# Testing stage
FROM development AS testing
ENV NODE_ENV=test

# Run tests
RUN pnpm test:ci
RUN pnpm test:integration

# Build stage
FROM base AS builder
ENV NODE_ENV=production

# Install production dependencies only
RUN pnpm install --frozen-lockfile --prod=false

# Copy source code
COPY . .

# Build the application
RUN pnpm build

# Prune development dependencies
RUN pnpm prune --prod

# Production stage
FROM node:20-alpine AS production

# Create non-root user and install runtime dependencies
RUN addgroup -g 1001 -S cortex && \
    adduser -S cortex -u 1001 -G cortex && \
    apk add --no-cache \
    ca-certificates \
    curl \
    dumb-init \
    tzdata

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=cortex:cortex /app/dist ./dist
COPY --from=builder --chown=cortex:cortex /app/node_modules ./node_modules
COPY --from=builder --chown=cortex:cortex /app/package.json ./package.json

# Set environment variables for optimization
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=2048 --optimize-for-size --gc-global"
ENV UV_THREADPOOL_SIZE=8
ENV PORT=3000

# Switch to non-root user
USER cortex

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/index.js"]

# Metadata labels
LABEL maintainer="Cortex-OS Team"
LABEL version="1.0.0"
LABEL description="Cortex-OS Production Container"
