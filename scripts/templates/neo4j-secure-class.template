/*
 * Neo4j Secure Class Template
 *
 * This is a template file used by various scripts to inject Neo4j class implementations.
 * It's designed to be used as a string replacement in existing files.
 *
 * Dependencies expected in target file:
 * - INeo4j interface
 * - Driver type from neo4j-driver
 * - SecureNeo4j class
 * - KGNode, KGRel, Subgraph types
 * - neo4j module
 */
export class Neo4j implements INeo4j {
  private secureNeo4j: SecureNeo4j;

  constructor(uri: string, user: string, pass: string) {
    this.secureNeo4j = new SecureNeo4j(uri, user, pass);
  }

  async close() {
    await this.secureNeo4j.close();
  }

  async upsertNode(node: KGNode) {
    try {
      await this.secureNeo4j.upsertNode({ id: node.id, label: node.label, props: node.props });
    } catch (error) {
      console.error('Error upserting node:', error);
      throw error;
    }
  }

  async upsertRel(rel: KGRel) {
    try {
      await this.secureNeo4j.upsertRel({ from: rel.from, to: rel.to, type: rel.type, props: rel.props });
    } catch (error) {
      console.error('Error upserting relationship:', error);
      throw error;
    }
  }

  async neighborhood(nodeId: string, depth = 2): Promise<Subgraph> {
    try {
      return await this.secureNeo4j.neighborhood(nodeId, depth);
    } catch (error) {
      console.error('Error getting neighborhood:', error);
      throw error;
    }
  }
}
