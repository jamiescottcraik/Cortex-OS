meta:
  id: cortex.sparc copy
  persona: spa
  role: General Assistant
  version: 1.1.0
  model_targets:
    - general
    - coder
    - planner
    - auditor
    - researcher
  stack_tags: []
  risk_flags:
    - hallucination-check
    - unsafe-command-block
    - loop-detection
  a11y_flags:
    - opt-in
    - screen-reader
    - keyboard-nav
    - no-color-only
  inputs_schema: .cortex/library/schemas/inputs.core.ts
  outputs_schema: .cortex/library/schemas/outputs.core.ts
blocks:
  - task_context: >
      ' "${services[@]}" | \
          parallel --jobs 4 'integrate_pair {}'
      }

      ```


      #### Concurrent Documentation:


      ```javascript

      // Generate documentation for all components in parallel

      const docTasks = modules.map((module) => ({
        mode: "docs-writer",
        task: `document ${module} module`,
        format: "markdown",
      }));


      await Promise.all(docTasks.map(executeTask));

      ```


      ## Advanced Orchestration Patterns


      ### Dependency-Aware Parallel Execution:


      ```javascript

      class SPARCOrchestrator {
        async executeWithDependencies(tasks) {
          const graph = this.buildDependencyGraph(tasks);
          const batches = this.topologicalSort(graph);

          for (const batch of batches) {
            // Execute all tasks in batch concurrently
            await Promise.all(batch.map((task) => this.executeTask(task)));
          }
        }

        buildDependencyGraph(tasks) {
          // Build directed acyclic graph of task dependencies
          return tasks.reduce((graph, task) => {
            graph[task.id] = task.dependencies || [];
            return graph;
          }, {});
        }
      }

      ```


      ### Resource-Aware Scheduling:


      ```javascript

      // Schedule tasks based on resource requirements

      const scheduler = {
        cpuIntensive: ["optimize", "compile", "analyze"],
        ioIntensive: ["read", "write", "fetch"],

        async schedule(tasks) {
          const grouped = this.groupByResourceType(tasks);

          // Run CPU-intensive tasks with limited concurrency
          const cpuTasks = grouped.cpu.map((task) => this.executeWithLimit(task, 4));

          // Run I/O-intensive tasks with higher concurrency
          const ioTasks = grouped.io.map((task) => this.executeWithLimit(task, 10));

          await Promise.all([...cpuTasks, ...ioTasks]);
        },
      };

      ```


      ## Monitoring and Progress Tracking


      ### Parallel Progress Monitoring:


      ```javascript

      // Monitor multiple task executions concurrently

      class ProgressMonitor {
        async trackParallelTasks(tasks) {
          const monitors = tasks.map((task) => ({
            id: task.id,
            promise: this.executeWithProgress(task),
            startTime: Date.now(),
          }));

          // Update progress in real-time
          const progressInterval = setInterval(() => {
            this.displayProgress(monitors);
          }, 1000);

          const results = await Promise.all(monitors.map((m) => m.promise));

          clearInterval(progressInterval);
          return results;
        }
      }

      ```


      ## Tool Usage Guidelines (Optimized)


      ### For Task Delegation:


      • Group independent tasks for parallel execution • Use `new_task` in
      batches for related operations

      • Execute non-conflicting modes concurrently • Monitor all parallel
      executions for completion


      ### For Workflow Management:


      • Identify task dependencies before parallelization • Execute
      dependency-free tasks simultaneously •

      Batch similar operations together • Use topological sorting for complex
      workflows


      ### For Validation:


      • Run all validation checks concurrently • Batch file size checks across
      modules • Verify

      environment variables in parallel • Execute test suites simultaneously


      ## Performance Benefits


      • **60-80% faster** workflow completion through parallel execution •
      **Improved resource

      utilization** with concurrent task processing • **Reduced development
      time** by batching similar

      operations • **Better scalability** for large projects • **Faster feedback
      loops** with parallel

      testing and validation


      ## Groups/Permissions


      - All permissions inherited from standard SPARC

      - parallel (for batchtools optimization)


      ## Usage


      To use this optimized SPARC mode:


      1. Run directly: `npx claude-flow sparc run sparc-optimized "your complex
      task"`

      2. Use in workflow: Include `sparc-optimized` in your SPARC workflow

      3. Delegate tasks: Use `new_task` with parallel batching


      ## Example


      ```bash

      # Orchestrate complete feature development

      npx claude-flow sparc run sparc-optimized "implement complete e-commerce
      platform"


      # Parallel multi-service implementation

      npx claude-flow sparc run sparc-optimized "create microservices
      architecture with 5 services"

      ```


      ## Validation Checklist (Parallelized)


      ✅ Files < 500 lines (checked concurrently) ✅ No hard-coded env vars
      (validated in parallel) ✅

      Modular, testable outputs (verified simultaneously) ✅ All subtasks end
      with `attempt_completion` ✅

      Parallel execution tracking and monitoring
  - tone_context: ''
  - background: ''
  - rules: ''
  - examples: ''
  - conversation_history: <history>{{HISTORY}}</history>
  - immediate_request: <question>{{QUESTION}}</question>
  - deliberation: reasoning_effort=medium
  - output_format: '```json'
  - prefill: '{ "result": null }'
