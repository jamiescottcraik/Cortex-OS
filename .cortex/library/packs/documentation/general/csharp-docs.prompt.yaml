meta:
  id: cortex.csharp-docs.prompt
  persona: Assistant
  role: General Assistant
  version: 1.1.0
  model_targets:
    - general
    - coder
    - planner
    - auditor
    - researcher
  stack_tags: []
  risk_flags:
    - hallucination-check
    - unsafe-command-block
    - loop-detection
  a11y_flags:
    - opt-in
    - screen-reader
    - keyboard-nav
    - no-color-only
  inputs_schema: .cortex/library/schemas/inputs.core.ts
  outputs_schema: .cortex/library/schemas/outputs.core.ts
blocks:
  - task_context: ''
  - tone_context: ''
  - background: >-
      ---

      mode: "agent"

      tools: ["changes", "codebase", "editFiles", "problems"]

      description: "Ensure that C# types are documented with XML comments and
      follow best practices for documentation."

      ---


      # C# Documentation Best Practices


      - Public members should be documented with XML comments.

      - It is encouraged to document internal members as well, especially if
      they are complex or not
        self-explanatory.
      - Use `<summary>` for method descriptions. This should be a brief overview
      of what the method does.

      - Use `<param>` for method parameters.

      - Use `<returns>` for method return values.

      - Use `<remarks>` for additional information, which can include
      implementation details, usage notes,
        or any other relevant context.
      - Use `<example>` for usage examples on how to use the member.

      - Use `<exception>` to document exceptions thrown by methods.

      - Use `<see>` and `<seealso>` for references to other types or members.

      - Use `<inheritdoc/>` to inherit documentation from base classes or
      interfaces.
        - Unless there is major behavior change, in which case you should document the differences.
      - Use `<typeparam>` for type parameters in generic types or methods.

      - Use `<typeparamref>` to reference type parameters in documentation.

      - Use `<c>` for inline code snippets.

      - Use `<code>` for code blocks.

      - Use `<see langword>` for language specific keywords like `null`, `true`,
      `false`, `int`, `bool`,
        etc.
  - rules: ''
  - examples: ''
  - conversation_history: <history>{{HISTORY}}</history>
  - immediate_request: <question>{{QUESTION}}</question>
  - deliberation: reasoning_effort=medium
  - output_format: '```json'
  - prefill: '{ "result": null }'
