meta:
  id: cortex.refinement-optimization-mode
  persona: spa
  role: General Assistant
  version: 1.1.0
  model_targets:
    - general
    - coder
    - planner
    - auditor
    - researcher
  stack_tags: []
  risk_flags:
    - hallucination-check
    - unsafe-command-block
    - loop-detection
  a11y_flags:
    - opt-in
    - screen-reader
    - keyboard-nav
    - no-color-only
  inputs_schema: .cortex/library/schemas/inputs.core.ts
  outputs_schema: .cortex/library/schemas/outputs.core.ts
blocks:
  - task_context: >
      ' "${modules[@]}" | \
          parallel --jobs 5 'npm test -- --testPathPattern={}'
      }


      # Verify no regressions

      verify_refactoring() {
        run_unit_tests &
        run_integration_tests &
        run_e2e_tests &
        run_performance_tests &
        wait
      }

      ```


      ## Tool Usage Guidelines (Optimized)


      ### For Analysis:


      • Use parallel file reading for large codebases • Batch similar analysis
      operations together • Run

      independent metrics calculations concurrently • Generate reports from
      multiple sources

      simultaneously


      ### For Refactoring:


      • Extract modules from multiple files in parallel • Apply similar
      transformations in batches •

      Update imports across files concurrently • Test refactored code in
      parallel


      ### For Optimization:


      • Analyze multiple performance metrics simultaneously • Apply
      optimizations to independent modules

      concurrently • Batch configuration updates together • Run verification
      tests in parallel


      ## Performance Benefits


      • **70-85% faster** codebase analysis through parallel processing •
      **Reduced refactoring time** by

      batching similar operations • **Improved optimization speed** with
      concurrent transformations •

      **Faster verification** through parallel testing • **Better resource
      utilization** during

      large-scale refactoring


      ## Groups/Permissions


      - read

      - edit

      - browser

      - mcp

      - command

      - parallel (for batchtools optimization)


      ## Usage


      To use this optimized SPARC mode:


      1. Run directly: `npx claude-flow sparc run
      refinement-optimization-mode-optimized "your task"`

      2. Use in workflow: Include `refinement-optimization-mode-optimized` in
      your SPARC workflow

      3. Delegate tasks: Use `new_task` to assign work to this mode


      ## Example


      ```bash

      # Optimize entire codebase

      npx claude-flow sparc run refinement-optimization-mode-optimized "optimize
      all modules"


      # Batch refactor large files

      npx claude-flow sparc run refinement-optimization-mode-optimized "break
      down all files over 500 lines"

      ```
  - tone_context: ''
  - background: ''
  - rules: ''
  - examples: ''
  - conversation_history: <history>{{HISTORY}}</history>
  - immediate_request: <question>{{QUESTION}}</question>
  - deliberation: reasoning_effort=medium
  - output_format: '```json'
  - prefill: '{ "result": null }'
