# Multi-stage Rust build optimized for OrbStack
FROM --platform=$BUILDPLATFORM rust:1.80-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    musl-dev \
    pkgconfig \
    openssl-dev \
    openssl-libs-static

# Set working directory
WORKDIR /app

# Copy workspace configuration first
COPY Cargo.toml Cargo.lock ./

# Copy all workspace crate manifests - FIX: Create directories first
RUN find . -maxdepth 2 -name "Cargo.toml" -not -path "./Cargo.toml" -exec dirname {} \; | sort -u | xargs mkdir -p
COPY */Cargo.toml ./*/

# Create minimal dummy source files for dependency caching
RUN find . -name "Cargo.toml" -not -path "./Cargo.toml" | while IFS= read -r manifest; do \
    dir=$(dirname "$manifest"); \
    mkdir -p "$dir/src"; \
    [ ! -f "$dir/src/main.rs" ] && echo "fn main() {}" > "$dir/src/main.rs"; \
    [ ! -f "$dir/src/lib.rs" ] && echo "" > "$dir/src/lib.rs"; \
done

# Build dependencies only (this will cache dependencies layer)
RUN cargo build --release --workspace

# Remove dummy files and copy real source
RUN find . -name "src" -type d -exec rm -rf {} + 2>/dev/null || true
COPY . .

# Build the actual workspace
RUN cargo build --release --workspace

# Runtime stage - minimal Alpine image
FROM alpine:3.19 AS runtime

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    tini

# Create non-root user
RUN addgroup -g 1000 cortex && \
    adduser -D -s /bin/sh -u 1000 -G cortex cortex

# FIX: Only copy specific known binaries instead of everything
# First check what binaries actually exist in the workspace
COPY --from=builder /app/target/release/codex /usr/local/bin/codex

# Set ownership only for our binaries (not system ones)
RUN chown cortex:cortex /usr/local/bin/codex && \
    chmod +x /usr/local/bin/codex

# Switch to non-root user
USER cortex

# Use tini as PID 1
ENTRYPOINT ["/sbin/tini", "--"]

# Default to main CLI binary
CMD ["codex", "--help"]

# Health check using the actual binary
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD codex --version || exit 1

# Labels for OrbStack optimization
LABEL \
    org.opencontainers.image.title="Cortex Code" \
    org.opencontainers.image.description="Rust-based code analysis and generation tools" \
    org.opencontainers.image.vendor="Cortex-OS" \
    org.opencontainers.image.source="https://github.com/your-org/cortex-os" \
    orbstack.optimize="true" \
    orbstack.rosetta="false" \
    orbstack.service="cortex-code"
