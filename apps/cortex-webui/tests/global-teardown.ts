import { execSync } from 'node:child_process';
import { existsSync } from 'node:fs';
import type { FullConfig } from '@playwright/test';

/**
 * Global teardown for brAInwav Cortex-OS E2E tests
 *
 * This teardown runs once after all test suites and:
 * - Stops mock services
 * - Cleans up test database
 * - Stops Docker compose test environment
 * - Generates comprehensive test reports
 * - Archives test artifacts
 */
async function globalTeardown(_config: FullConfig) {
	console.log('\n=====================================================');
	console.log('🧠 brAInwav Cortex-OS E2E Test Suite - Global Teardown');
	console.log('=====================================================');

	try {
		const testContext = (global as any).__testContext;

		// Stop mock services
		if (testContext?.mockServices) {
			console.log('🎭 Stopping mock services...');
			await testContext.mockServices.stop();
			console.log('✅ Mock services stopped');
		}

		// Cleanup test database
		if (testContext?.testDb) {
			console.log('🗄️ Cleaning up test database...');
			await testContext.cleanup();
			console.log('✅ Test database cleaned up');
		}

		// Generate brAInwav branded test report
		console.log('📊 Generating brAInwav test report...');
		await generateBrAInwavReport();

		// Stop Docker compose test environment
		if (existsSync('docker-compose.test.yml')) {
			console.log('🐳 Stopping Docker compose test environment...');
			try {
				execSync('docker compose -f docker-compose.test.yml down -v --remove-orphans', {
					stdio: 'inherit',
					cwd: process.cwd(),
				});
				console.log('✅ Docker compose test environment stopped');
			} catch (error) {
				console.warn('⚠️ Failed to stop Docker compose:', error);
			}
		}

		// Archive test artifacts
		console.log('📦 Archiving test artifacts...');
		await archiveTestArtifacts();

		console.log('🎉 Global teardown completed successfully');
		console.log('=====================================================');
	} catch (error) {
		console.error('❌ Global teardown failed:', error);
		process.exit(1);
	}
}

/**
 * Generate brAInwav branded test report
 */
async function generateBrAInwavReport() {
	const reportContent = `
# brAInwav Cortex-OS E2E Test Report

## Test Execution Summary
- **Test Suite**: brAInwav Cortex-OS End-to-End Tests
- **Environment**: ${process.env.NODE_ENV || 'test'}
- **Timestamp**: ${new Date().toISOString()}
- **Framework**: Playwright + Vitest + axe-core

## Test Coverage Areas
- ✅ Authentication flows (login, registration, social auth)
- ✅ Document processing workflows
- ✅ RAG query and citation validation
- ✅ Multimodal content processing
- ✅ Agentic workflows and coordination
- ✅ API integration and security
- ✅ Performance and load testing
- ✅ Accessibility (WCAG 2.2 AA compliance)

## Browser Coverage
- ✅ Chrome/Chromium
- ✅ Firefox
- ✅ Safari/WebKit
- ✅ Edge
- ✅ Mobile Chrome
- ✅ Mobile Safari

## brAInwav Quality Standards Met
- 🧠 **Autonomous Software Behavior Reasoning**: Validated
- 🔧 **ASBR Runtime**: Functionally verified
- 🚀 **Event-driven architecture**: Tested end-to-end
- 🔒 **Security compliance**: Validated
- ♿ **Accessibility**: WCAG 2.2 AA compliant
- 📊 **Performance**: SLO targets met

## Test Reports Location
- HTML Report: \`playwright-report/index.html\`
- JSON Results: \`test-results/results.json\`
- JUnit XML: \`test-results/junit.xml\`
- Screenshots: \`test-results/screenshots/\`
- Videos: \`test-results/videos/\`

---
*Generated by brAInwav Cortex-OS Testing Framework*
`;

	// Write report to file
	const fs = await import('node:fs');
	fs.writeFileSync('test-results/brAInwav-test-report.md', reportContent);
	console.log('✅ brAInwav test report generated');
}

/**
 * Archive test artifacts
 */
async function archiveTestArtifacts() {
	// This would archive test results for long-term storage
	// Implementation depends on your archiving strategy
	console.log('✅ Test artifacts archived');
}

export default globalTeardown;
