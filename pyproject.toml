[project]
name = "cortex-os"
version = "1.0.0"
requires-python = ">=3.13"
description = "ASBR Cortex-OS Platform"
license = { text = "MIT" }
dependencies = [
  "chromadb>=1.0.20",
  "faiss-cpu>=1.12.0",
  "fastapi>=0.116.1",
  "gguf>=0.1.0",
  "graphiti-core>=0.3.0",
  "httpx>=0.28.1",
  "hypothesis",
  "instructor>=1.11.2",
  "openai>=1.52.0",
  "llama-cpp-python>=0.2.90",
  "mlx>=0.30.0; sys_platform == \"darwin\"",
  "mlx-lm>=0.28.0; sys_platform == \"darwin\"",
  "mlx-vlm>=0.4.0; sys_platform == \"darwin\"",
  "networkx>=3.0",
  "numpy>=1.26.4",
  "pandas>=2.1.4",
  "prometheus-client>=0.22.1",
  "protobuf>=4.21.0,<5.0.0",
  "pytest>=8.4.1",
  "pytest-asyncio>=1.1.0",
  "pytest-cov>=6.2.1",
  "qdrant-client>=1.12.1",
  "sentence-transformers>=3.3.0",
  "sentencepiece>=0.2.0",
  "torch>=2.8.0",
  "transformers>=4.55.4",
  "uvicorn>=0.35.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = []
include = ["README.md"]

[tool.uv]
package = false

[tool.uv.workspace]
members = [
  "services/ml-inference",
  "services/data-pipeline",
  "libs/python/cortex_core",
  "libs/python/cortex_ml",
]

[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py313"
src = ["services", "libs/python", "packages", "apps/cortex-py", "servers/src"]
exclude = [
  ".venv",
  "venv",
  "env",
  "node_modules",
  "**/__pycache__/**",
  "llama.cpp/**",
  "**/site-packages/**",
]

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "B", "SIM", "S", "UP", "RUF"]
ignore = ["E501"]

[tool.ruff.lint.per-file-ignores]
# Test files can use assert statements
"**/tests/**/*.py" = ["S101", "SLF001", "S106"]
"**/test/**/*.py" = ["S101", "SLF001", "S106"]
"**/*_test.py" = ["S101", "SLF001", "S106"]
"**/test_*.py" = ["S101", "SLF001", "S106"]
"tests/*" = ["S101", "SLF001", "S106"]

# Development and infrastructure files
"docker/**/*.py" = [
  "S104",
  "S603",
  "S607",
  "S110",
] # Allow subprocess and binding in docker utilities
"tools/**/*.py" = ["S603", "S607"] # Allow subprocess in tool scripts
"packages/mcp-bridge/src/tools/**/*.py" = [
  "S603",
  "S607",
] # Allow subprocess in MCP bridge tools

# Specific module exceptions

"**/thermal_guard.py" = [
  "S311",
  "S603",
  "S607",
  "S110",
] # Allow random, subprocess, and exception handling
"**/resource_monitor.py" = [
  "S108",
  "S110",
] # Allow temp files and exception handling
"**/kv_cache_manager.py" = [
  "S301",
  "S108",
  "N801",
] # Allow pickle/temp files and mock class name
"**/tiered_model_manager.py" = ["N801"] # Allow mock class name 'mx'
"**/mcp_server.py" = [
  "S603",
  "S104",
] # Allow subprocess and binding for MCP servers
"**/model_manager.py" = ["S110"] # Allow exception handling patterns
"**/bridge/mlx_bridge.py" = ["S301", "S108"] # Allow pickle in test bridge
"**/convert-to-mlx.py" = ["S603", "S607"] # Allow subprocess in conversion tools

# Targeted file exceptions
"packages/mcp-bridge/src/python/src/executor.py" = ["S603"]
"packages/mcp-bridge/src/python/src/server.py" = ["S104"]
"docker/mlx-server.py" = ["RUF006"]                         # Background task intentionally not awaited
"docker/gpl-tools/gpl_service.py" = ["B008"]                # FastAPI File/Form default pattern

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
namespace_packages = true

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests", "services/*/tests", "libs/python/*/tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = [
  "--cov=services",
  "--cov=libs/python",
  "--cov-report=term-missing",
  "--cov-report=xml",
  "--cov-report=html",
  "--cov-fail-under=80",
  "--strict-markers",
  "-vv",
]

[tool.bandit]
exclude_dirs = ["tests", "*/tests/*"]
skips = ["B101"]

[tool.coverage.run]
branch = true
parallel = true
omit = ["*/tests/*", "*/__pycache__/*", "*/site-packages/*"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  " @(abc\\.)?abstractmethod",
]
