{
	"graph": {
		"nodes": {
			"@cortex-os/a2a-outbox": {
				"name": "@cortex-os/a2a-outbox",
				"type": "lib",
				"data": {
					"root": "packages/orchestration/src/lib/outbox/outbox",
					"targets": {
						"lint": {
							"cache": true,
							"options": {
								"cwd": "packages/orchestration/src/lib/outbox/outbox",
								"command": "eslint ."
							},
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"options": {
								"cwd": "packages/orchestration/src/lib/outbox/outbox",
								"command": "vitest"
							},
							"cache": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"outputs": ["{projectRoot}/coverage"],
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "packages/orchestration/src/lib/outbox/outbox",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/a2a-outbox --includeDependentProjects -- npx nx build-deps @cortex-os/a2a-outbox"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {},
					"name": "@cortex-os/a2a-outbox",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/evidence-validator": {
				"name": "@cortex-os/evidence-validator",
				"type": "lib",
				"data": {
					"root": "apps/cortex-os/packages/evidence/validator",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "apps/cortex-os/packages/evidence/validator",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"options": {
								"cwd": "apps/cortex-os/packages/evidence/validator",
								"command": "vitest"
							},
							"cache": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"outputs": ["{projectRoot}/coverage"],
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "apps/cortex-os/packages/evidence/validator",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/evidence-validator --includeDependentProjects -- npx nx build-deps @cortex-os/evidence-validator"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {},
					"name": "@cortex-os/evidence-validator",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/orchestration-analytics": {
				"name": "@cortex-os/orchestration-analytics",
				"type": "lib",
				"data": {
					"root": "apps/cortex-os/packages/evidence/analytics",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "apps/cortex-os/packages/evidence/analytics",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@cortex-os/orchestration-analytics",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/a2a-schema-registry": {
				"name": "@cortex-os/a2a-schema-registry",
				"type": "lib",
				"data": {
					"root": "packages/a2a-services/schema-registry",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "packages/a2a-services/schema-registry",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"executor": "@nx/vite:test",
							"options": {
								"configFile": "packages/a2a-services/schema-registry/vitest.config.ts",
								"passWithNoTests": true
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "packages/a2a-services/schema-registry",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/a2a-schema-registry --includeDependentProjects -- npx nx build-deps @cortex-os/a2a-schema-registry"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {},
						"js": {
							"packageName": "@cortex-os/a2a-schema-registry",
							"packageMain": "src/index.ts",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/a2a-schema-registry",
					"tags": ["npm:private"],
					"$schema": "../../../node_modules/nx/schemas/project-schema.json",
					"sourceRoot": "packages/a2a-services/schema-registry/src",
					"projectType": "library",
					"implicitDependencies": []
				}
			},
			"@cortex-os/core": {
				"name": "@cortex-os/core",
				"type": "lib",
				"data": {
					"root": "apps/cortex-os/packages/planner/core",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "apps/cortex-os/packages/planner/core",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"options": {
								"cwd": "apps/cortex-os/packages/planner/core",
								"command": "vitest"
							},
							"cache": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"outputs": ["{projectRoot}/coverage"],
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "apps/cortex-os/packages/planner/core",
								"command": "tsc --noEmit -p tsconfig.typecheck.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.typecheck.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/core --includeDependentProjects -- npx nx build-deps @cortex-os/core"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {},
					"name": "@cortex-os/core",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/mcp-transport-bridge": {
				"name": "@cortex-os/mcp-transport-bridge",
				"type": "lib",
				"data": {
					"root": "packages/mcp/mcp-transport-bridge",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint src/",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "@nx/vite:test",
							"outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
							"options": {
								"configFile": "packages/mcp/mcp-transport-bridge/vitest.config.ts",
								"watch": false,
								"passWithNoTests": true
							},
							"configurations": {
								"ci": {
									"coverage": true
								}
							},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "packages/mcp/mcp-transport-bridge",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/mcp-transport-bridge --includeDependentProjects -- npx nx build-deps @cortex-os/mcp-transport-bridge"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"format": {
							"executor": "nx:run-script",
							"options": {
								"script": "format"
							},
							"metadata": {
								"scriptContent": "prettier --write src/",
								"runCommand": "npm run format"
							},
							"configurations": {},
							"parallelism": true
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsx src/cli.ts",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["build", "lint", "format", "dev"]
						},
						"description": "Bridge between stdio and Streamable HTTP transports for MCP servers",
						"js": {
							"packageName": "@cortex-os/mcp-transport-bridge",
							"packageExports": {
								".": "./dist/index.js",
								"./stdio": "./dist/stdio/index.js",
								"./http": "./dist/http/index.js"
							},
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/mcp-transport-bridge",
					"tags": ["npm:public", "scope:mcp", "type:lib"],
					"$schema": "https://raw.githubusercontent.com/nrwl/nx/master/packages/nx/schemas/project-schema.json",
					"projectType": "library",
					"sourceRoot": "packages/mcp/mcp-transport-bridge/src",
					"implicitDependencies": []
				}
			},
			"@cortex-os/echo-js": {
				"name": "@cortex-os/echo-js",
				"type": "lib",
				"data": {
					"root": "packages/mcp/mcp-servers/echo-js",
					"targets": {
						"lint": {
							"cache": true,
							"options": {
								"cwd": "packages/mcp/mcp-servers/echo-js",
								"command": "eslint ."
							},
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"options": {
								"cwd": "packages/mcp/mcp-servers/echo-js",
								"command": "vitest"
							},
							"cache": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"outputs": ["{projectRoot}/coverage"],
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "packages/mcp/mcp-servers/echo-js",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/echo-js --includeDependentProjects -- npx nx build-deps @cortex-os/echo-js"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {},
					"name": "@cortex-os/echo-js",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/planner": {
				"name": "@cortex-os/planner",
				"type": "lib",
				"data": {
					"root": "apps/cortex-os/packages/planner",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "apps/cortex-os/packages/planner",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@cortex-os/planner",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/a2a-observability": {
				"name": "@cortex-os/a2a-observability",
				"type": "lib",
				"data": {
					"root": "packages/a2a/a2a-observability",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "packages/a2a/a2a-observability",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"executor": "@nx/vite:test",
							"options": {
								"cwd": "packages/a2a/a2a-observability",
								"reportsDirectory": "../../../../.vitest/a2a-observability"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								},
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/a2a-observability --includeDependentProjects -- npx nx build-deps @cortex-os/a2a-observability"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsup src/**/*.ts --dts --format esm",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["build", "typecheck"]
						},
						"js": {
							"packageName": "@cortex-os/a2a-observability",
							"packageExports": {
								".": {
									"import": "./dist/index.js",
									"types": "./dist/index.d.ts"
								}
							},
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/a2a-observability",
					"tags": ["npm:private"],
					"$schema": "https://raw.githubusercontent.com/nrwl/nx/main/packages/nx/schemas/project-schema.json",
					"projectType": "library",
					"sourceRoot": "packages/a2a/a2a-observability/src",
					"implicitDependencies": []
				}
			},
			"@cortex-os/ingest": {
				"name": "@cortex-os/ingest",
				"type": "lib",
				"data": {
					"root": "apps/cortex-os/packages/ingest",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "apps/cortex-os/packages/ingest",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@cortex-os/ingest",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@modelcontextprotocol/server-sequential-thinking": {
				"name": "@modelcontextprotocol/server-sequential-thinking",
				"type": "lib",
				"data": {
					"root": "servers/src/sequentialthinking",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "npx eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "servers/src/sequentialthinking",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@modelcontextprotocol/server-sequential-thinking",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/a11y-utils": {
				"name": "@cortex-os/a11y-utils",
				"type": "lib",
				"data": {
					"root": "libs/typescript/accessibility",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "libs/typescript/accessibility",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"start": {
							"executor": "nx:run-script",
							"options": {
								"script": "start"
							},
							"metadata": {
								"scriptContent": "node dist/index.js",
								"runCommand": "npm run start"
							},
							"configurations": {},
							"parallelism": true
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "ts-node src/index.ts",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@cortex-os/a11y-utils",
					"tags": ["npm:public"],
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["build", "start", "dev"]
						},
						"description": "Cortex-OS Accessibility Utilities for WCAG 2.2 AA Compliance",
						"js": {
							"packageName": "@cortex-os/a11y-utils",
							"packageMain": "src/index.ts",
							"isInPackageManagerWorkspaces": true
						}
					},
					"implicitDependencies": []
				}
			},
			"@cortex-os/a2a-common": {
				"name": "@cortex-os/a2a-common",
				"type": "lib",
				"data": {
					"root": "packages/a2a-services/common",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "packages/a2a-services/common",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								},
								"scriptContent": "vitest",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "packages/a2a-services/common",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/a2a-common --includeDependentProjects -- npx nx build-deps @cortex-os/a2a-common"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["test"]
						},
						"js": {
							"packageName": "@cortex-os/a2a-common",
							"packageMain": "src/index.ts",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/a2a-common",
					"tags": ["npm:private"],
					"implicitDependencies": []
				}
			},
			"@cortex-os/mcp-marketplace": {
				"name": "@cortex-os/mcp-marketplace",
				"type": "lib",
				"data": {
					"root": "apps/cortex-marketplace-api",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "apps/cortex-marketplace-api",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"options": {
								"cwd": "apps/cortex-marketplace-api",
								"command": "vitest"
							},
							"cache": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"outputs": ["{projectRoot}/coverage"],
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "apps/cortex-marketplace-api",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/mcp-marketplace --includeDependentProjects -- npx nx build-deps @cortex-os/mcp-marketplace"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {},
					"name": "@cortex-os/mcp-marketplace",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/a2a-contracts": {
				"name": "@cortex-os/a2a-contracts",
				"type": "lib",
				"data": {
					"root": "packages/a2a/a2a-contracts",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "packages/a2a/a2a-contracts",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsup src/**/*.ts --dts --format esm",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"scriptContent": "vitest run",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						}
					},
					"name": "@cortex-os/a2a-contracts",
					"tags": ["npm:private"],
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["build", "test", "typecheck"]
						},
						"js": {
							"packageName": "@cortex-os/a2a-contracts",
							"packageExports": {
								".": {
									"import": "./dist/index.js",
									"types": "./dist/index.d.ts"
								},
								"./envelope": {
									"import": "./dist/envelope.js",
									"types": "./dist/envelope.d.ts"
								},
								"./events": {
									"import": "./dist/events.js",
									"types": "./dist/events.d.ts"
								},
								"./commands": {
									"import": "./dist/commands.js",
									"types": "./dist/commands.d.ts"
								},
								"./trace-context": {
									"import": "./dist/trace-context.js",
									"types": "./dist/trace-context.d.ts"
								}
							},
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"implicitDependencies": []
				}
			},
			"@cortex-os/a2a-transport": {
				"name": "@cortex-os/a2a-transport",
				"type": "lib",
				"data": {
					"root": "packages/a2a/a2a-transport",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "packages/a2a/a2a-transport",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsup src/**/*.ts --dts --format esm",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"scriptContent": "vitest run",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						}
					},
					"name": "@cortex-os/a2a-transport",
					"tags": ["npm:private"],
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["build", "test", "typecheck"]
						},
						"js": {
							"packageName": "@cortex-os/a2a-transport",
							"packageExports": {
								".": {
									"import": "./dist/index.js",
									"types": "./dist/index.d.ts"
								},
								"./inproc": {
									"import": "./dist/inproc.js",
									"types": "./dist/inproc.d.ts"
								},
								"./fsq": {
									"import": "./dist/fsq.js",
									"types": "./dist/fsq.d.ts"
								},
								"./stdio": {
									"import": "./dist/stdio.js",
									"types": "./dist/stdio.d.ts"
								}
							},
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"implicitDependencies": []
				}
			},
			"@cortex-os/a2a-handlers": {
				"name": "@cortex-os/a2a-handlers",
				"type": "lib",
				"data": {
					"root": "packages/a2a/a2a-handlers",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "packages/a2a/a2a-handlers",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"executor": "@nx/vite:test",
							"options": {
								"configFile": "packages/a2a/a2a-handlers/vitest.config.ts",
								"passWithNoTests": true
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								},
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/a2a-handlers --includeDependentProjects -- npx nx build-deps @cortex-os/a2a-handlers"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsup src/**/*.ts --dts --format esm",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["build", "typecheck"]
						},
						"js": {
							"packageName": "@cortex-os/a2a-handlers",
							"packageExports": {
								".": {
									"import": "./dist/index.js",
									"types": "./dist/index.d.ts"
								},
								"./health.handler": {
									"import": "./dist/health.handler.js",
									"types": "./dist/health.handler.d.ts"
								}
							},
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/a2a-handlers",
					"tags": ["npm:private"],
					"$schema": "../../../node_modules/nx/schemas/project-schema.json",
					"sourceRoot": "packages/a2a/a2a-handlers/src",
					"projectType": "library",
					"implicitDependencies": []
				}
			},
			"@cortex-os/contracts": {
				"name": "@cortex-os/contracts",
				"type": "lib",
				"data": {
					"root": "libs/typescript/contracts",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint .",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								},
								"scriptContent": "vitest run",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								},
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/contracts --includeDependentProjects -- npx nx build-deps @cortex-os/contracts"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc -p tsconfig.json",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["build", "lint", "typecheck", "test"]
						},
						"js": {
							"packageName": "@cortex-os/contracts",
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/contracts",
					"tags": ["npm:private"],
					"$schema": "../../../node_modules/nx/schemas/project-schema.json",
					"sourceRoot": "libs/typescript/contracts/src",
					"projectType": "library",
					"implicitDependencies": []
				}
			},
			"@cortex-os/cortex-ai-github": {
				"name": "@cortex-os/cortex-ai-github",
				"type": "lib",
				"data": {
					"root": "packages/cortex-ai-github",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint src --ext .ts",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsx watch src/server/webhook-server.ts",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"start": {
							"executor": "nx:run-script",
							"options": {
								"script": "start"
							},
							"metadata": {
								"scriptContent": "node dist/server/webhook-server.js",
								"runCommand": "npm run start"
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"scriptContent": "vitest",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"format": {
							"executor": "nx:run-script",
							"options": {
								"script": "format"
							},
							"metadata": {
								"scriptContent": "prettier --write src",
								"runCommand": "npm run format"
							},
							"configurations": {},
							"parallelism": true
						},
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@cortex-os/cortex-ai-github",
					"tags": [
						"npm:public",
						"npm:ai",
						"npm:github",
						"npm:automation",
						"npm:cortex",
						"npm:code-review"
					],
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["build", "dev", "start", "test", "lint", "format"]
						},
						"description": "AI-powered GitHub automation engine for Cortex-OS",
						"js": {
							"packageName": "@cortex-os/cortex-ai-github",
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"implicitDependencies": []
				}
			},
			"@cortex-os/telemetry": {
				"name": "@cortex-os/telemetry",
				"type": "lib",
				"data": {
					"root": "libs/typescript/telemetry",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint .",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								},
								"scriptContent": "vitest run",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								},
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/telemetry --includeDependentProjects -- npx nx build-deps @cortex-os/telemetry"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc -p tsconfig.json",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"prepublishOnly": {
							"executor": "nx:run-script",
							"options": {
								"script": "prepublishOnly"
							},
							"metadata": {
								"scriptContent": "pnpm build",
								"runCommand": "npm run prepublishOnly"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": [
								"build",
								"prepublishOnly",
								"lint",
								"typecheck",
								"test"
							]
						},
						"js": {
							"packageName": "@cortex-os/telemetry",
							"packageExports": {
								".": {
									"import": "./dist/index.js",
									"types": "./dist/index.d.ts"
								}
							},
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/telemetry",
					"tags": ["npm:private"],
					"$schema": "../../../node_modules/nx/schemas/project-schema.json",
					"sourceRoot": "libs/typescript/telemetry/src",
					"projectType": "library",
					"implicitDependencies": []
				}
			},
			"@cortex-os/agent-a": {
				"name": "@cortex-os/agent-a",
				"type": "lib",
				"data": {
					"root": "examples/agents/agent-a",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "examples/agents/agent-a",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@cortex-os/agent-a",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/agent-b": {
				"name": "@cortex-os/agent-b",
				"type": "lib",
				"data": {
					"root": "examples/agents/agent-b",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "examples/agents/agent-b",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@cortex-os/agent-b",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/marketplace-api": {
				"name": "@cortex-os/marketplace-api",
				"type": "lib",
				"data": {
					"root": "apps/cortex-marketplace",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "apps/cortex-marketplace",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"options": {
								"cwd": "apps/cortex-marketplace",
								"command": "vitest"
							},
							"cache": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"outputs": ["{projectRoot}/coverage"],
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "apps/cortex-marketplace",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/marketplace-api --includeDependentProjects -- npx nx build-deps @cortex-os/marketplace-api"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {},
					"name": "@cortex-os/marketplace-api",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/mcp-github": {
				"name": "@cortex-os/mcp-github",
				"type": "lib",
				"data": {
					"root": "packages/mcp/mcp-github",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint src/ --ext .ts",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsx watch src/server.ts",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"start": {
							"executor": "nx:run-script",
							"options": {
								"script": "start"
							},
							"metadata": {
								"scriptContent": "node dist/server.js",
								"runCommand": "npm run start"
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"scriptContent": "vitest",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"test:watch": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:watch"
							},
							"metadata": {
								"scriptContent": "vitest --watch",
								"runCommand": "npm run test:watch"
							},
							"configurations": {},
							"parallelism": true
						},
						"type-check": {
							"executor": "nx:run-script",
							"options": {
								"script": "type-check"
							},
							"metadata": {
								"scriptContent": "tsc --noEmit",
								"runCommand": "npm run type-check"
							},
							"configurations": {},
							"parallelism": true
						},
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@cortex-os/mcp-github",
					"tags": [
						"npm:public",
						"npm:mcp",
						"npm:github",
						"npm:cortex-os",
						"npm:ai-agent",
						"npm:model-context-protocol"
					],
					"metadata": {
						"targetGroups": {
							"NPM Scripts": [
								"build",
								"dev",
								"start",
								"test",
								"test:watch",
								"lint",
								"type-check"
							]
						},
						"description": "GitHub MCP Server for Cortex-OS - Exposes GitHub operations as MCP tools",
						"js": {
							"packageName": "@cortex-os/mcp-github",
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"implicitDependencies": []
				}
			},
			"@cortex-os/mvp-server": {
				"name": "@cortex-os/mvp-server",
				"type": "lib",
				"data": {
					"root": "packages/mvp/mvp-server",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "npx eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint .",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								},
								"scriptContent": "vitest run",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "packages/mvp/mvp-server",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/mvp-server --includeDependentProjects -- npx nx build-deps @cortex-os/mvp-server"
							},
							"configurations": {},
							"parallelism": true
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsx watch src/index.ts",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc -p tsconfig.json",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"start": {
							"executor": "nx:run-script",
							"options": {
								"script": "start"
							},
							"metadata": {
								"scriptContent": "node --enable-source-maps ./dist/index.js",
								"runCommand": "npm run start"
							},
							"configurations": {},
							"parallelism": true
						},
						"check:node": {
							"executor": "nx:run-script",
							"options": {
								"script": "check:node"
							},
							"metadata": {
								"scriptContent": "node -e \"const v=process.versions.node.split('.')[0]; if(+v>22||+v<18) process.exit(1)\" && echo OK",
								"runCommand": "npm run check:node"
							},
							"configurations": {},
							"parallelism": true
						},
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": [
								"dev",
								"build",
								"lint",
								"test",
								"start",
								"check:node"
							]
						},
						"js": {
							"packageName": "@cortex-os/mvp-server",
							"packageMain": "./dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/mvp-server",
					"tags": ["npm:public"],
					"implicitDependencies": []
				}
			},
			"a2a-events": {
				"name": "a2a-events",
				"type": "lib",
				"data": {
					"root": "packages/a2a/a2a-events",
					"targets": {
						"lint": {
							"executor": "@nx/linter:eslint",
							"outputs": ["{options.outputPath}"],
							"options": {
								"lintFilePatterns": ["packages/a2a/a2a-events/**/*.ts"]
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "@nx/js:tsc",
							"outputs": ["{options.outputPath}"],
							"options": {
								"outputPath": "dist/packages/a2a/a2a-events",
								"main": "packages/a2a/a2a-events/src/index.ts",
								"tsConfig": "packages/a2a/a2a-events/tsconfig.lib.json"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true
						},
						"test": {
							"executor": "@nx/jest:jest",
							"outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
							"options": {
								"jestConfig": "packages/a2a/a2a-events/jest.config.ts"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true
						}
					},
					"name": "a2a-events",
					"tags": [
						"npm:public",
						"npm:a2a",
						"npm:events",
						"npm:schema",
						"npm:cortex-os",
						"npm:event-driven",
						"scope:a2a",
						"type:lib"
					],
					"metadata": {
						"targetGroups": {},
						"description": "A2A event schemas and definitions for Cortex-OS",
						"js": {
							"packageName": "@cortex-os/a2a-events",
							"packageMain": "./src/index.ts",
							"isInPackageManagerWorkspaces": true
						}
					},
					"$schema": "../../../node_modules/nx/schemas/project-schema.json",
					"sourceRoot": "packages/a2a/a2a-events/src",
					"projectType": "library",
					"implicitDependencies": []
				}
			},
			"@cortex-os/model-gateway": {
				"name": "@cortex-os/model-gateway",
				"type": "lib",
				"data": {
					"root": "packages/model-gateway",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "packages/model-gateway",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								},
								"scriptContent": "vitest run -c vitest.config.ts",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								},
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/model-gateway --includeDependentProjects -- npx nx build-deps @cortex-os/model-gateway"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc -p tsconfig.json",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsx src/server.ts",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"start": {
							"executor": "nx:run-script",
							"options": {
								"script": "start"
							},
							"metadata": {
								"scriptContent": "node dist/server.js",
								"runCommand": "npm run start"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["build", "dev", "start", "typecheck", "test"]
						},
						"js": {
							"packageName": "@cortex-os/model-gateway",
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/model-gateway",
					"tags": ["npm:private"],
					"implicitDependencies": []
				}
			},
			"@cortex-os/observability": {
				"name": "@cortex-os/observability",
				"type": "lib",
				"data": {
					"root": "packages/observability",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint .",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsc --watch",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"scriptContent": "vitest",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"scriptContent": "tsc --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@cortex-os/observability",
					"tags": ["npm:public"],
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["build", "dev", "test", "lint", "typecheck"]
						},
						"description": "OTEL spans, metrics, logs with ULID propagation for Cortex-OS",
						"js": {
							"packageName": "@cortex-os/observability",
							"packageExports": {
								".": {
									"types": "./dist/index.d.ts",
									"import": "./dist/index.js"
								},
								"./tracing": {
									"types": "./dist/tracing/index.d.ts",
									"import": "./dist/tracing/index.js"
								},
								"./metrics": {
									"types": "./dist/metrics/index.d.ts",
									"import": "./dist/metrics/index.js"
								},
								"./logging": {
									"types": "./dist/logging/index.d.ts",
									"import": "./dist/logging/index.js"
								}
							},
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"implicitDependencies": []
				}
			},
			"@cortex-os/orchestration": {
				"name": "@cortex-os/orchestration",
				"type": "lib",
				"data": {
					"root": "packages/orchestration",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint src --ext .ts --no-ignore",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								},
								"scriptContent": "vitest",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								},
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/orchestration --includeDependentProjects -- npx nx build-deps @cortex-os/orchestration"
							},
							"configurations": {},
							"parallelism": true
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsc --watch",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "echo \"No build step required for this package\"",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"test:coverage": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:coverage"
							},
							"metadata": {
								"scriptContent": "vitest --coverage",
								"runCommand": "npm run test:coverage"
							},
							"configurations": {},
							"parallelism": true
						},
						"replay": {
							"executor": "nx:run-script",
							"options": {
								"script": "replay"
							},
							"metadata": {
								"scriptContent": "tsx src/cli/replay.ts",
								"runCommand": "npm run replay"
							},
							"configurations": {},
							"parallelism": true
						},
						"approve": {
							"executor": "nx:run-script",
							"options": {
								"script": "approve"
							},
							"metadata": {
								"scriptContent": "tsx src/cli/approve.ts",
								"runCommand": "npm run approve"
							},
							"configurations": {},
							"parallelism": true
						},
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": [
								"dev",
								"build",
								"lint",
								"test",
								"typecheck",
								"test:coverage",
								"replay",
								"approve"
							]
						},
						"js": {
							"packageName": "@cortex-os/orchestration",
							"packageExports": {
								".": {
									"types": "./dist/index.d.ts",
									"import": "./dist/index.js"
								}
							},
							"packageMain": "./dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/orchestration",
					"tags": ["npm:public"],
					"$schema": "../../node_modules/nx/schemas/project-schema.json",
					"sourceRoot": "packages/orchestration/src",
					"projectType": "library",
					"implicitDependencies": []
				}
			},
			"@modelcontextprotocol/server-everything": {
				"name": "@modelcontextprotocol/server-everything",
				"type": "lib",
				"data": {
					"root": "servers/src/everything",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "npx eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "servers/src/everything",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@modelcontextprotocol/server-everything",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@modelcontextprotocol/server-filesystem": {
				"name": "@modelcontextprotocol/server-filesystem",
				"type": "lib",
				"data": {
					"root": "servers/src/filesystem",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "servers/src/filesystem",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"options": {
								"cwd": "servers/src/filesystem",
								"command": "vitest"
							},
							"cache": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"outputs": ["{projectRoot}/coverage"],
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "servers/src/filesystem",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @modelcontextprotocol/server-filesystem --includeDependentProjects -- npx nx build-deps @modelcontextprotocol/server-filesystem"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {},
					"name": "@modelcontextprotocol/server-filesystem",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/a2a-core": {
				"name": "@cortex-os/a2a-core",
				"type": "lib",
				"data": {
					"root": "packages/a2a/a2a-core",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "packages/a2a/a2a-core",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsup src/**/*.ts --dts --format esm",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"scriptContent": "vitest run",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						}
					},
					"name": "@cortex-os/a2a-core",
					"tags": ["npm:private"],
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["build", "test", "typecheck"]
						},
						"js": {
							"packageName": "@cortex-os/a2a-core",
							"packageExports": {
								".": {
									"import": "./dist/index.js",
									"types": "./dist/index.d.ts"
								},
								"./bus": {
									"import": "./dist/bus.js",
									"types": "./dist/bus.d.ts"
								}
							},
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"implicitDependencies": []
				}
			},
			"@cortex-os/mcp-core": {
				"name": "@cortex-os/mcp-core",
				"type": "lib",
				"data": {
					"root": "packages/mcp/mcp-core",
					"targets": {
						"lint": {
							"cache": true,
							"options": {
								"cwd": "packages/mcp/mcp-core",
								"command": "eslint ."
							},
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsup src/index.ts src/contracts.ts src/client.ts --dts --format esm --external @modelcontextprotocol/sdk",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"scriptContent": "vitest run",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"prepublishOnly": {
							"executor": "nx:run-script",
							"options": {
								"script": "prepublishOnly"
							},
							"metadata": {
								"scriptContent": "pnpm run build",
								"runCommand": "npm run prepublishOnly"
							},
							"configurations": {},
							"parallelism": true
						},
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@cortex-os/mcp-core",
					"tags": ["npm:public"],
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["build", "test", "typecheck", "prepublishOnly"]
						},
						"js": {
							"packageName": "@cortex-os/mcp-core",
							"packageExports": {
								".": {
									"import": "./dist/index.js",
									"types": "./dist/index.d.ts"
								},
								"./contracts": {
									"import": "./dist/contracts.js",
									"types": "./dist/contracts.d.ts"
								},
								"./client": {
									"import": "./dist/client.js",
									"types": "./dist/client.d.ts"
								}
							},
							"packageMain": "./dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"implicitDependencies": []
				}
			},
			"@cortex-os/mcp-registry": {
				"name": "@cortex-os/mcp-registry",
				"type": "lib",
				"data": {
					"root": "packages/mcp-registry",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint src/",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "@nx/vite:test",
							"outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
							"options": {
								"configFile": "packages/mcp-registry/vitest.config.ts",
								"watch": false,
								"passWithNoTests": true
							},
							"configurations": {
								"ci": {
									"coverage": true
								}
							},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "packages/mcp-registry",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/mcp-registry --includeDependentProjects -- npx nx build-deps @cortex-os/mcp-registry"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"prepare": {
							"executor": "nx:run-script",
							"options": {
								"script": "prepare"
							},
							"metadata": {
								"scriptContent": "node -e \"process.exit(0)\"",
								"runCommand": "npm run prepare"
							},
							"configurations": {},
							"parallelism": true
						},
						"format": {
							"executor": "nx:run-script",
							"options": {
								"script": "format"
							},
							"metadata": {
								"scriptContent": "prettier --write src/",
								"runCommand": "npm run format"
							},
							"configurations": {},
							"parallelism": true
						},
						"validate": {
							"executor": "nx:run-script",
							"options": {
								"script": "validate"
							},
							"metadata": {
								"scriptContent": "node dist/cli.js",
								"runCommand": "npm run validate"
							},
							"configurations": {},
							"parallelism": true
						},
						"prepublishOnly": {
							"executor": "nx:run-script",
							"options": {
								"script": "prepublishOnly"
							},
							"metadata": {
								"scriptContent": "pnpm run build",
								"runCommand": "npm run prepublishOnly"
							},
							"configurations": {},
							"parallelism": true
						},
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": [
								"build",
								"prepare",
								"lint",
								"format",
								"validate",
								"prepublishOnly"
							]
						},
						"description": "MCP Server Registry with schema validation and signing",
						"js": {
							"packageName": "@cortex-os/mcp-registry",
							"packageExports": {
								".": "./dist/index.js",
								"./schemas": "./schemas/index.js",
								"./cli": "./dist/cli.js",
								"./fs-store": "./dist/fs-store.js"
							},
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/mcp-registry",
					"tags": ["npm:public", "scope:mcp", "type:lib"],
					"$schema": "https://raw.githubusercontent.com/nrwl/nx/master/packages/nx/schemas/project-schema.json",
					"projectType": "library",
					"sourceRoot": "packages/mcp-registry/src",
					"implicitDependencies": []
				}
			},
			"@cortex-os/mvp-core": {
				"name": "@cortex-os/mvp-core",
				"type": "lib",
				"data": {
					"root": "packages/mvp/mvp-core",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "npx eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint .",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								},
								"scriptContent": "vitest run",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "packages/mvp/mvp-core",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/mvp-core --includeDependentProjects -- npx nx build-deps @cortex-os/mvp-core"
							},
							"configurations": {},
							"parallelism": true
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsx watch src/index.ts",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsup src/index.ts --dts --format esm --clean",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["dev", "build", "lint", "test"]
						},
						"js": {
							"packageName": "@cortex-os/mvp-core",
							"packageExports": {
								".": {
									"types": "./dist/index.d.ts",
									"import": "./dist/index.js"
								}
							},
							"packageMain": "./dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/mvp-core",
					"tags": ["npm:public"],
					"implicitDependencies": []
				}
			},
			"@cortex-os/structure-guard": {
				"name": "@cortex-os/structure-guard",
				"type": "lib",
				"data": {
					"root": "tools/structure-guard",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "tools/structure-guard",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@cortex-os/structure-guard",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/types": {
				"name": "@cortex-os/types",
				"type": "lib",
				"data": {
					"root": "libs/typescript/types",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint .",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								},
								"scriptContent": "vitest run",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								},
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/types --includeDependentProjects -- npx nx build-deps @cortex-os/types"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc -p tsconfig.json",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["build", "lint", "typecheck", "test"]
						},
						"js": {
							"packageName": "@cortex-os/types",
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/types",
					"tags": ["npm:private"],
					"$schema": "../../../node_modules/nx/schemas/project-schema.json",
					"sourceRoot": "libs/typescript/types/src",
					"projectType": "library",
					"implicitDependencies": []
				}
			},
			"@cortex-os/utils": {
				"name": "@cortex-os/utils",
				"type": "lib",
				"data": {
					"root": "libs/typescript/utils",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint .",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								},
								"scriptContent": "vitest run",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								},
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/utils --includeDependentProjects -- npx nx build-deps @cortex-os/utils"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc -p tsconfig.json",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["build", "lint", "typecheck", "test"]
						},
						"js": {
							"packageName": "@cortex-os/utils",
							"packageExports": {
								".": {
									"types": "./dist/index.d.ts",
									"import": "./dist/index.js",
									"require": "./dist/index.js"
								}
							},
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/utils",
					"tags": ["npm:private"],
					"$schema": "../../../node_modules/nx/schemas/project-schema.json",
					"sourceRoot": "libs/typescript/utils/src",
					"projectType": "library",
					"implicitDependencies": []
				}
			},
			"@cortex-os/eslint-config": {
				"name": "@cortex-os/eslint-config",
				"type": "lib",
				"data": {
					"root": "tools/eslint-config",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "tools/eslint-config",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@cortex-os/eslint-config",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/lockfile-sync": {
				"name": "@cortex-os/lockfile-sync",
				"type": "lib",
				"data": {
					"root": "tools/lockfile-sync",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "tools/lockfile-sync",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@cortex-os/lockfile-sync",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/mcp-bridge": {
				"name": "@cortex-os/mcp-bridge",
				"type": "lib",
				"data": {
					"root": "packages/mcp-bridge",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "packages/mcp-bridge",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"executor": "@nx/vite:test",
							"outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
							"options": {
								"configFile": "packages/mcp-bridge/vitest.config.ts",
								"watch": false,
								"passWithNoTests": true
							},
							"configurations": {
								"ci": {
									"coverage": true
								}
							},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "packages/mcp-bridge",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/mcp-bridge --includeDependentProjects -- npx nx build-deps @cortex-os/mcp-bridge"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"postbuild": {
							"executor": "nx:run-script",
							"options": {
								"script": "postbuild"
							},
							"metadata": {
								"scriptContent": "node -e \"require('fs').cpSync('src/python','dist/python',{recursive:true})\"",
								"runCommand": "npm run postbuild"
							},
							"configurations": {},
							"parallelism": true
						},
						"demo": {
							"executor": "nx:run-script",
							"options": {
								"script": "demo"
							},
							"metadata": {
								"scriptContent": "tsx src/mcp-demo-server.ts",
								"runCommand": "npm run demo"
							},
							"configurations": {},
							"parallelism": true
						},
						"demo:build": {
							"executor": "nx:run-script",
							"options": {
								"script": "demo:build"
							},
							"metadata": {
								"scriptContent": "tsc && node dist/mcp-demo-server.js",
								"runCommand": "npm run demo:build"
							},
							"configurations": {},
							"parallelism": true
						},
						"mlx:embed": {
							"executor": "nx:run-script",
							"options": {
								"script": "mlx:embed"
							},
							"metadata": {
								"scriptContent": "tsx src/scripts/embed-mlx-neuron.mjs",
								"runCommand": "npm run mlx:embed"
							},
							"configurations": {},
							"parallelism": true
						},
						"mlx:start": {
							"executor": "nx:run-script",
							"options": {
								"script": "mlx:start"
							},
							"metadata": {
								"scriptContent": "tsx src/scripts/embed-mlx-neuron.mjs",
								"runCommand": "npm run mlx:start"
							},
							"configurations": {},
							"parallelism": true
						},
						"mlx:config": {
							"executor": "nx:run-script",
							"options": {
								"script": "mlx:config"
							},
							"metadata": {
								"scriptContent": "node src/scripts/setup-mlx-config.mjs --profile recommended --out ./mlx.json",
								"runCommand": "npm run mlx:config"
							},
							"configurations": {},
							"parallelism": true
						},
						"start:complete": {
							"executor": "nx:run-script",
							"options": {
								"script": "start:complete"
							},
							"metadata": {
								"scriptContent": "npm run mlx:embed",
								"runCommand": "npm run start:complete"
							},
							"configurations": {},
							"parallelism": true
						},
						"prepublishOnly": {
							"executor": "nx:run-script",
							"options": {
								"script": "prepublishOnly"
							},
							"metadata": {
								"scriptContent": "pnpm run build",
								"runCommand": "npm run prepublishOnly"
							},
							"configurations": {},
							"parallelism": true
						},
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": [
								"build",
								"postbuild",
								"demo",
								"demo:build",
								"mlx:embed",
								"mlx:start",
								"mlx:config",
								"start:complete",
								"prepublishOnly"
							]
						},
						"description": "MCP plugin management and marketplace system",
						"js": {
							"packageName": "@cortex-os/mcp-bridge",
							"packageExports": {
								".": {
									"types": "./src/index.ts",
									"default": "./src/index.ts"
								},
								"./client": {
									"types": "./client/index.ts",
									"default": "./client/index.ts"
								},
								"./auth": {
									"types": "./auth/index.ts",
									"default": "./auth/index.ts"
								}
							},
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/mcp-bridge",
					"tags": ["npm:public", "scope:mcp", "type:lib"],
					"$schema": "https://raw.githubusercontent.com/nrwl/nx/master/packages/nx/schemas/project-schema.json",
					"projectType": "library",
					"sourceRoot": "packages/mcp-bridge/src",
					"implicitDependencies": []
				}
			},
			"@cortex-os/mcp-server": {
				"name": "@cortex-os/mcp-server",
				"type": "app",
				"data": {
					"root": "packages/mcp-server",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint --ext .ts src",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"options": {
								"cwd": "packages/mcp-server",
								"command": "vitest"
							},
							"cache": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"outputs": ["{projectRoot}/coverage"],
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "packages/mcp-server",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/mcp-server --includeDependentProjects -- npx nx build-deps @cortex-os/mcp-server"
							},
							"configurations": {},
							"parallelism": true
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "node --watch --enable-source-maps --trace-warnings ./dist/server.js",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc -p tsconfig.json",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"start": {
							"executor": "nx:run-script",
							"options": {
								"script": "start"
							},
							"metadata": {
								"scriptContent": "node --enable-source-maps ./dist/server.js",
								"runCommand": "npm run start"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["dev", "build", "start", "lint"]
						},
						"js": {
							"packageName": "@cortex-os/mcp-server",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/mcp-server",
					"tags": ["npm:private"],
					"implicitDependencies": []
				}
			},
			"@cortex-os/prp-runner": {
				"name": "@cortex-os/prp-runner",
				"type": "lib",
				"data": {
					"root": "packages/prp-runner",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint src/**/*.ts",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								},
								"scriptContent": "vitest",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "packages/prp-runner",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/prp-runner --includeDependentProjects -- npx nx build-deps @cortex-os/prp-runner"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsc --watch",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:watch": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:watch"
							},
							"metadata": {
								"scriptContent": "vitest --watch",
								"runCommand": "npm run test:watch"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:coverage": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:coverage"
							},
							"metadata": {
								"scriptContent": "vitest --coverage",
								"runCommand": "npm run test:coverage"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:ci": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:ci"
							},
							"metadata": {
								"scriptContent": "vitest run --coverage --reporter=verbose",
								"runCommand": "npm run test:ci"
							},
							"configurations": {},
							"parallelism": true
						},
						"tdd:red": {
							"executor": "nx:run-script",
							"options": {
								"script": "tdd:red"
							},
							"metadata": {
								"scriptContent": "echo 'TDD Phase 1: Write failing test' && vitest --watch",
								"runCommand": "npm run tdd:red"
							},
							"configurations": {},
							"parallelism": true
						},
						"tdd:green": {
							"executor": "nx:run-script",
							"options": {
								"script": "tdd:green"
							},
							"metadata": {
								"scriptContent": "echo 'TDD Phase 2: Make test pass' && vitest run",
								"runCommand": "npm run tdd:green"
							},
							"configurations": {},
							"parallelism": true
						},
						"tdd:refactor": {
							"executor": "nx:run-script",
							"options": {
								"script": "tdd:refactor"
							},
							"metadata": {
								"scriptContent": "echo 'TDD Phase 3: Refactor while keeping tests green' && vitest run --watch",
								"runCommand": "npm run tdd:refactor"
							},
							"configurations": {},
							"parallelism": true
						},
						"gates:tdd": {
							"executor": "nx:run-script",
							"options": {
								"script": "gates:tdd"
							},
							"metadata": {
								"scriptContent": "vitest run --coverage --reporter=dot && echo 'TDD gates passed: All tests pass with 85%+ coverage'",
								"runCommand": "npm run gates:tdd"
							},
							"configurations": {},
							"parallelism": true
						},
						"clean": {
							"executor": "nx:run-script",
							"options": {
								"script": "clean"
							},
							"metadata": {
								"scriptContent": "rm -rf dist",
								"runCommand": "npm run clean"
							},
							"configurations": {},
							"parallelism": true
						},
						"precommit": {
							"executor": "nx:run-script",
							"options": {
								"script": "precommit"
							},
							"metadata": {
								"scriptContent": "pnpm gates:tdd && pnpm lint",
								"runCommand": "npm run precommit"
							},
							"configurations": {},
							"parallelism": true
						},
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": [
								"build",
								"dev",
								"test",
								"test:watch",
								"test:coverage",
								"test:ci",
								"tdd:red",
								"tdd:green",
								"tdd:refactor",
								"gates:tdd",
								"lint",
								"clean",
								"precommit"
							]
						},
						"description": "Production-grade PRP Neural Orchestration Engine",
						"js": {
							"packageName": "@cortex-os/prp-runner",
							"packageExports": {
								".": "./dist/index.js",
								"./orchestrator": "./dist/orchestrator.js",
								"./neurons": "./dist/neurons/index.js",
								"./tools": "./dist/tools/index.js",
								"./validation": "./dist/validation/index.js"
							},
							"packageMain": "./dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/prp-runner",
					"tags": [
						"npm:public",
						"npm:ai",
						"npm:orchestration",
						"npm:neural",
						"npm:prp",
						"npm:cortex",
						"npm:production"
					],
					"implicitDependencies": []
				}
			},
			"cortex-sec": {
				"name": "cortex-sec",
				"type": "app",
				"data": {
					"root": "packages/cortex-sec",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "npx eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "packages/cortex-sec",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"security": {
							"executor": "nx:run-commands",
							"options": {
								"command": "npx cortex-sec scan --sarif reports/security.sarif --json reports/security.json"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "cortex-sec",
					"tags": ["npm:private"],
					"metadata": {
						"targetGroups": {},
						"js": {
							"packageName": "@cortex-os/cortex-sec",
							"isInPackageManagerWorkspaces": true
						}
					},
					"implicitDependencies": []
				}
			},
			"@cortex-os/contracts-v2": {
				"name": "@cortex-os/contracts-v2",
				"type": "lib",
				"data": {
					"root": "packages/contracts",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint .",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								},
								"scriptContent": "vitest run",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								},
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/contracts-v2 --includeDependentProjects -- npx nx build-deps @cortex-os/contracts-v2"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc -p tsconfig.json",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["build", "typecheck", "lint", "test"]
						},
						"js": {
							"packageName": "@cortex-os/contracts-v2",
							"packageMain": "src/index.ts",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/contracts-v2",
					"tags": ["npm:private"],
					"implicitDependencies": []
				}
			},
			"@modelcontextprotocol/server-memory": {
				"name": "@modelcontextprotocol/server-memory",
				"type": "lib",
				"data": {
					"root": "servers/src/memory",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "npx eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "servers/src/memory",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@modelcontextprotocol/server-memory",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/memories": {
				"name": "@cortex-os/memories",
				"type": "lib",
				"data": {
					"root": "packages/memories",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint . --ext .ts",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								},
								"scriptContent": "vitest",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								},
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/memories --includeDependentProjects -- npx nx build-deps @cortex-os/memories"
							},
							"configurations": {},
							"parallelism": true
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsc --watch",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"prisma:gen": {
							"executor": "nx:run-script",
							"options": {
								"script": "prisma:gen"
							},
							"metadata": {
								"scriptContent": "prisma generate --schema=./prisma/schema.prisma",
								"runCommand": "npm run prisma:gen"
							},
							"configurations": {},
							"parallelism": true
						},
						"db:migrate": {
							"executor": "nx:run-script",
							"options": {
								"script": "db:migrate"
							},
							"metadata": {
								"scriptContent": "prisma migrate deploy --schema=./prisma/schema.prisma",
								"runCommand": "npm run db:migrate"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:coverage": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:coverage"
							},
							"metadata": {
								"scriptContent": "vitest --coverage",
								"runCommand": "npm run test:coverage"
							},
							"configurations": {},
							"parallelism": true
						},
						"jsonl:import": {
							"executor": "nx:run-script",
							"options": {
								"script": "jsonl:import"
							},
							"metadata": {
								"scriptContent": "tsx src/tools/jsonl-to-memory.ts",
								"runCommand": "npm run jsonl:import"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": [
								"dev",
								"build",
								"lint",
								"test",
								"typecheck",
								"prisma:gen",
								"db:migrate",
								"test:coverage",
								"jsonl:import"
							]
						},
						"js": {
							"packageName": "@cortex-os/memories",
							"packageExports": {
								".": {
									"types": "./dist/index.d.ts",
									"import": "./dist/index.js"
								}
							},
							"packageMain": "./dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/memories",
					"tags": ["npm:private"],
					"$schema": "../../node_modules/nx/schemas/project-schema.json",
					"sourceRoot": "packages/memories/src",
					"projectType": "library",
					"implicitDependencies": []
				}
			},
			"@cortex-os/registry": {
				"name": "@cortex-os/registry",
				"type": "lib",
				"data": {
					"root": "packages/registry",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint src/**/*.ts",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								},
								"scriptContent": "vitest run",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "packages/registry",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/registry --includeDependentProjects -- npx nx build-deps @cortex-os/registry"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"start": {
							"executor": "nx:run-script",
							"options": {
								"script": "start"
							},
							"metadata": {
								"scriptContent": "node dist/index.js",
								"runCommand": "npm run start"
							},
							"configurations": {},
							"parallelism": true
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsx src/index.ts",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:coverage": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:coverage"
							},
							"metadata": {
								"scriptContent": "vitest run --coverage --coverage.threshold.lines 95",
								"runCommand": "npm run test:coverage"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:watch": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:watch"
							},
							"metadata": {
								"scriptContent": "vitest",
								"runCommand": "npm run test:watch"
							},
							"configurations": {},
							"parallelism": true
						},
						"format": {
							"executor": "nx:run-script",
							"options": {
								"script": "format"
							},
							"metadata": {
								"scriptContent": "prettier --write src/**/*.ts",
								"runCommand": "npm run format"
							},
							"configurations": {},
							"parallelism": true
						},
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": [
								"build",
								"start",
								"dev",
								"test",
								"test:coverage",
								"test:watch",
								"lint",
								"format"
							]
						},
						"description": "Schema registry service for Cortex-OS contracts",
						"js": {
							"packageName": "@cortex-os/registry",
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/registry",
					"tags": ["npm:public"],
					"implicitDependencies": []
				}
			},
			"security": {
				"name": "security",
				"type": "lib",
				"data": {
					"root": "packages/security",
					"targets": {
						"lint": {
							"executor": "@nx/eslint:lint",
							"options": {
								"lintFilePatterns": ["packages/security/**/*.ts"]
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "@nx/vite:test",
							"outputs": ["{projectRoot}/coverage"],
							"options": {
								"configFile": "packages/security/vitest.config.mjs"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "packages/security",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects security --includeDependentProjects -- npx nx build-deps security"
							},
							"configurations": {},
							"parallelism": true
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsup src/**/*.ts --dts --format esm --clean --watch",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:watch": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:watch"
							},
							"metadata": {
								"scriptContent": "vitest",
								"runCommand": "npm run test:watch"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:coverage": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:coverage"
							},
							"metadata": {
								"scriptContent": "vitest run --coverage",
								"runCommand": "npm run test:coverage"
							},
							"configurations": {},
							"parallelism": true
						},
						"semgrep": {
							"executor": "nx:run-script",
							"options": {
								"script": "semgrep"
							},
							"metadata": {
								"scriptContent": "semgrep scan --config=semgrep.yml --severity=WARNING --sarif -o semgrep.sarif .",
								"runCommand": "npm run semgrep"
							},
							"configurations": {},
							"parallelism": true
						},
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "@nx/rollup:rollup",
							"outputs": ["{projectRoot}/dist"],
							"options": {
								"main": "packages/security/src/index.ts",
								"tsConfig": "packages/security/tsconfig.json",
								"assets": [],
								"external": [
									"@cortex-os/a2a-contracts",
									"@cortex-os/utils",
									"@cortex-os/telemetry"
								]
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["dev", "test:watch", "test:coverage", "semgrep"]
						},
						"description": "SPIFFE/SPIRE security implementation for Cortex-OS with mTLS and workload identity management",
						"js": {
							"packageName": "@cortex-os/security",
							"packageExports": {
								".": {
									"types": "./dist/index.d.ts",
									"import": "./dist/index.js"
								},
								"./spiffe": {
									"types": "./dist/spiffe/index.d.ts",
									"import": "./dist/spiffe/index.js"
								},
								"./mtls": {
									"types": "./dist/mtls/index.d.ts",
									"import": "./dist/mtls/index.js"
								},
								"./workload-identity": {
									"types": "./dist/workload-identity/index.d.ts",
									"import": "./dist/workload-identity/index.js"
								}
							},
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "security",
					"tags": [
						"npm:public",
						"npm:security",
						"npm:spiffe",
						"npm:spire",
						"npm:mtls",
						"npm:workload-identity",
						"npm:zero-trust",
						"scope:security",
						"type:shared"
					],
					"$schema": "https://raw.githubusercontent.com/nrwl/nx/master/packages/nx/schemas/project-schema.json",
					"sourceRoot": "packages/security/src",
					"projectType": "library",
					"implicitDependencies": []
				}
			},
			"@cortex-os/gateway": {
				"name": "@cortex-os/gateway",
				"type": "lib",
				"data": {
					"root": "packages/gateway",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint .",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsx src/server.ts",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc -p tsconfig.json && node ./scripts/build-openapi.cjs",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"scriptContent": "node ./scripts/build-openapi.cjs && vitest run",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"test:coverage": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:coverage"
							},
							"metadata": {
								"scriptContent": "node ./scripts/build-openapi.cjs && vitest run --coverage",
								"runCommand": "npm run test:coverage"
							},
							"configurations": {},
							"parallelism": true
						},
						"start": {
							"executor": "nx:run-script",
							"options": {
								"script": "start"
							},
							"metadata": {
								"scriptContent": "node dist/server.js",
								"runCommand": "npm run start"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@cortex-os/gateway",
					"tags": ["npm:private"],
					"metadata": {
						"targetGroups": {
							"NPM Scripts": [
								"dev",
								"build",
								"typecheck",
								"lint",
								"test",
								"test:coverage",
								"start"
							]
						},
						"js": {
							"packageName": "@cortex-os/gateway",
							"packageMain": "src/server.ts",
							"isInPackageManagerWorkspaces": true
						}
					},
					"implicitDependencies": []
				}
			},
			"mvp": {
				"name": "mvp",
				"type": "lib",
				"data": {
					"root": "packages/mvp/mvp",
					"targets": {
						"lint": {
							"executor": "@nx/eslint:lint",
							"options": {
								"lintFilePatterns": ["packages/mvp/**/*.ts"]
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "@nx/vite:test",
							"outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
							"options": {
								"configFile": "packages/mvp/vitest.config.ts",
								"passWithNoTests": true
							},
							"configurations": {
								"ci": {
									"coverage": true
								}
							},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "packages/mvp/mvp",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects mvp --includeDependentProjects -- npx nx build-deps mvp"
							},
							"configurations": {},
							"parallelism": true
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsc --watch",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:watch": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:watch"
							},
							"metadata": {
								"scriptContent": "vitest --watch",
								"runCommand": "npm run test:watch"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:coverage": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:coverage"
							},
							"metadata": {
								"scriptContent": "vitest --coverage",
								"runCommand": "npm run test:coverage"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:ci": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:ci"
							},
							"metadata": {
								"scriptContent": "vitest run --coverage --reporter=verbose",
								"runCommand": "npm run test:ci"
							},
							"configurations": {},
							"parallelism": true
						},
						"gates:determinism": {
							"executor": "nx:run-script",
							"options": {
								"script": "gates:determinism"
							},
							"metadata": {
								"scriptContent": "vitest run tests/determinism.test.ts --reporter=dot",
								"runCommand": "npm run gates:determinism"
							},
							"configurations": {},
							"parallelism": true
						},
						"clean": {
							"executor": "nx:run-script",
							"options": {
								"script": "clean"
							},
							"metadata": {
								"scriptContent": "rm -rf dist",
								"runCommand": "npm run clean"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "@nx/rollup:rollup",
							"outputs": ["{options.outputPath}"],
							"options": {
								"outputPath": "dist/packages/mvp",
								"tsConfig": "packages/mvp/tsconfig.lib.json",
								"project": "packages/mvp/package.json",
								"entryFile": "packages/mvp/src/index.ts",
								"external": ["rxjs/operators", "rxjs/websocket", "rxjs/ajax"]
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": [
								"dev",
								"test:watch",
								"test:coverage",
								"test:ci",
								"gates:determinism",
								"clean"
							]
						},
						"js": {
							"packageName": "@cortex-os/mvp",
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "mvp",
					"tags": ["npm:private", "scope:mvp", "type:feature"],
					"$schema": "https://raw.githubusercontent.com/nrwl/nx/master/packages/nx/schemas/project-schema.json",
					"projectType": "library",
					"sourceRoot": "packages/mvp/src",
					"implicitDependencies": ["@cortex-os/mvp-core"],
					"namedInputs": {
						"default": ["{projectRoot}/**/*", "sharedGlobals"],
						"production": [
							"default",
							"!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)",
							"!{projectRoot}/tsconfig.spec.json",
							"!{projectRoot}/src/test-setup.[jt]s",
							"!{projectRoot}/test-setup.[jt]s"
						]
					}
				}
			},
			"@cortex-os/agents": {
				"name": "@cortex-os/agents",
				"type": "lib",
				"data": {
					"root": "packages/agents",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint src tests",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								},
								"scriptContent": "vitest run",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								},
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/agents --includeDependentProjects -- npx nx build-deps @cortex-os/agents"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsup src/index.ts --dts --format esm --clean",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsup src/index.ts --dts --format esm --watch",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:unit": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:unit"
							},
							"metadata": {
								"scriptContent": "vitest run tests/unit",
								"runCommand": "npm run test:unit"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:integration": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:integration"
							},
							"metadata": {
								"scriptContent": "vitest run tests/integration",
								"runCommand": "npm run test:integration"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:e2e": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:e2e"
							},
							"metadata": {
								"scriptContent": "vitest run tests/e2e",
								"runCommand": "npm run test:e2e"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:coverage": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:coverage"
							},
							"metadata": {
								"scriptContent": "vitest run --coverage",
								"runCommand": "npm run test:coverage"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:coverage:threshold": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:coverage:threshold"
							},
							"metadata": {
								"scriptContent": "vitest run --coverage --reporter=verbose",
								"runCommand": "npm run test:coverage:threshold"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:watch": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:watch"
							},
							"metadata": {
								"scriptContent": "vitest",
								"runCommand": "npm run test:watch"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:ui": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:ui"
							},
							"metadata": {
								"scriptContent": "vitest --ui",
								"runCommand": "npm run test:ui"
							},
							"configurations": {},
							"parallelism": true
						},
						"format": {
							"executor": "nx:run-script",
							"options": {
								"script": "format"
							},
							"metadata": {
								"scriptContent": "prettier --write src tests",
								"runCommand": "npm run format"
							},
							"configurations": {},
							"parallelism": true
						},
						"security:run": {
							"executor": "nx:run-script",
							"options": {
								"script": "security:run"
							},
							"metadata": {
								"scriptContent": "tsx ./examples/security-llamaguard-mlx.ts",
								"runCommand": "npm run security:run"
							},
							"configurations": {},
							"parallelism": true
						},
						"security:audit": {
							"executor": "nx:run-script",
							"options": {
								"script": "security:audit"
							},
							"metadata": {
								"scriptContent": "tsx ./examples/audit-security-workflow.ts",
								"runCommand": "npm run security:audit"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": [
								"build",
								"dev",
								"test",
								"test:unit",
								"test:integration",
								"test:e2e",
								"test:coverage",
								"test:coverage:threshold",
								"test:watch",
								"test:ui",
								"typecheck",
								"lint",
								"format",
								"security:run",
								"security:audit"
							]
						},
						"js": {
							"packageName": "@cortex-os/agents",
							"packageExports": {
								".": {
									"types": "./dist/index.d.ts",
									"import": "./dist/index.js"
								}
							},
							"packageMain": "./dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/agents",
					"tags": ["npm:private"],
					"$schema": "../../node_modules/nx/schemas/project-schema.json",
					"sourceRoot": "packages/agents/src",
					"projectType": "library",
					"implicitDependencies": []
				}
			},
			"@cortex-os/cli": {
				"name": "@cortex-os/cli",
				"type": "lib",
				"data": {
					"root": "apps/cortex-cli",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "apps/cortex-cli",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"options": {
								"cwd": "apps/cortex-cli",
								"command": "vitest"
							},
							"cache": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"outputs": ["{projectRoot}/coverage"],
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "apps/cortex-cli",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/cli --includeDependentProjects -- npx nx build-deps @cortex-os/cli"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {},
					"name": "@cortex-os/cli",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/kernel": {
				"name": "@cortex-os/kernel",
				"type": "lib",
				"data": {
					"root": "packages/kernel",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint src/**/*.ts",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								},
								"scriptContent": "vitest",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "packages/kernel",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/kernel --includeDependentProjects -- npx nx build-deps @cortex-os/kernel"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsc --watch",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:watch": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:watch"
							},
							"metadata": {
								"scriptContent": "vitest --watch",
								"runCommand": "npm run test:watch"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:coverage": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:coverage"
							},
							"metadata": {
								"scriptContent": "vitest --coverage",
								"runCommand": "npm run test:coverage"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:ci": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:ci"
							},
							"metadata": {
								"scriptContent": "vitest run --coverage --reporter=verbose",
								"runCommand": "npm run test:ci"
							},
							"configurations": {},
							"parallelism": true
						},
						"gates:determinism": {
							"executor": "nx:run-script",
							"options": {
								"script": "gates:determinism"
							},
							"metadata": {
								"scriptContent": "vitest run tests/determinism.test.ts --reporter=dot",
								"runCommand": "npm run gates:determinism"
							},
							"configurations": {},
							"parallelism": true
						},
						"clean": {
							"executor": "nx:run-script",
							"options": {
								"script": "clean"
							},
							"metadata": {
								"scriptContent": "rm -rf dist",
								"runCommand": "npm run clean"
							},
							"configurations": {},
							"parallelism": true
						},
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": [
								"build",
								"dev",
								"test",
								"test:watch",
								"test:coverage",
								"test:ci",
								"gates:determinism",
								"lint",
								"clean"
							]
						},
						"description": "Deterministic kernel for Cortex-OS with LangGraph state management",
						"js": {
							"packageName": "@cortex-os/kernel",
							"packageExports": {
								".": {
									"types": "./dist/index.d.ts",
									"import": "./dist/index.js",
									"require": "./dist/index.js"
								},
								"./graph": {
									"types": "./dist/graph-simple.d.ts",
									"import": "./dist/graph-simple.js",
									"require": "./dist/graph-simple.js"
								},
								"./state": {
									"types": "./dist/state.d.ts",
									"import": "./dist/state.js",
									"require": "./dist/state.js"
								},
								"./nodes": {
									"types": "./dist/nodes/index.d.ts",
									"import": "./dist/nodes/index.js",
									"require": "./dist/nodes/index.js"
								},
								"./mcp": {
									"types": "./dist/mcp/adapter.d.ts",
									"import": "./dist/mcp/adapter.js",
									"require": "./dist/mcp/adapter.js"
								}
							},
							"packageMain": "./dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/kernel",
					"tags": [
						"npm:public",
						"npm:cortex-os",
						"npm:kernel",
						"npm:langgraph",
						"npm:deterministic",
						"npm:mcp",
						"npm:prp"
					],
					"implicitDependencies": []
				}
			},
			"@cortex-os/simlab": {
				"name": "@cortex-os/simlab",
				"type": "lib",
				"data": {
					"root": "packages/simlab",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "packages/simlab",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"options": {
								"cwd": "packages/simlab",
								"command": "vitest"
							},
							"cache": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"outputs": ["{projectRoot}/coverage"],
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "packages/simlab",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/simlab --includeDependentProjects -- npx nx build-deps @cortex-os/simlab"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc -p tsconfig.json",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsx watch src/index.ts",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"simlab:smoke": {
							"executor": "nx:run-script",
							"options": {
								"script": "simlab:smoke"
							},
							"metadata": {
								"scriptContent": "tsx src/scripts/run-smoke.ts",
								"runCommand": "npm run simlab:smoke"
							},
							"configurations": {},
							"parallelism": true
						},
						"simlab:critical": {
							"executor": "nx:run-script",
							"options": {
								"script": "simlab:critical"
							},
							"metadata": {
								"scriptContent": "tsx src/scripts/run-critical.ts",
								"runCommand": "npm run simlab:critical"
							},
							"configurations": {},
							"parallelism": true
						},
						"simlab:full": {
							"executor": "nx:run-script",
							"options": {
								"script": "simlab:full"
							},
							"metadata": {
								"scriptContent": "tsx src/scripts/run-full.ts",
								"runCommand": "npm run simlab:full"
							},
							"configurations": {},
							"parallelism": true
						},
						"simlab:report": {
							"executor": "nx:run-script",
							"options": {
								"script": "simlab:report"
							},
							"metadata": {
								"scriptContent": "tsx src/scripts/generate-report.ts",
								"runCommand": "npm run simlab:report"
							},
							"configurations": {},
							"parallelism": true
						},
						"simlab:gates": {
							"executor": "nx:run-script",
							"options": {
								"script": "simlab:gates"
							},
							"metadata": {
								"scriptContent": "tsx src/scripts/check-gates.ts",
								"runCommand": "npm run simlab:gates"
							},
							"configurations": {},
							"parallelism": true
						},
						"sim:status": {
							"executor": "nx:run-script",
							"options": {
								"script": "sim:status"
							},
							"metadata": {
								"scriptContent": "node -e \"console.log('SimLab status coming soon')\"",
								"runCommand": "npm run sim:status"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": [
								"build",
								"dev",
								"simlab:smoke",
								"simlab:critical",
								"simlab:full",
								"simlab:report",
								"simlab:gates",
								"sim:status"
							]
						},
						"js": {
							"packageName": "@cortex-os/simlab",
							"packageExports": {
								".": "./dist/index.js",
								"./runner": "./dist/runner.js",
								"./agent-adapter": "./dist/agent-adapter.js",
								"./judge": "./dist/judge.js",
								"./report": "./dist/report.js",
								"./types": "./dist/types.js",
								"./user-sim": "./dist/user-sim.js"
							},
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/simlab",
					"tags": ["npm:private"],
					"implicitDependencies": []
				}
			},
			"github": {
				"name": "github",
				"type": "lib",
				"data": {
					"root": "packages/github",
					"name": "github",
					"tags": [
						"npm:public",
						"npm:github",
						"npm:api",
						"npm:cortex-os",
						"npm:git",
						"npm:actions",
						"npm:pull-requests",
						"scope:github",
						"type:lib"
					],
					"metadata": {
						"targetGroups": {},
						"description": "GitHub API client and operations for Cortex-OS",
						"js": {
							"packageName": "@cortex-os/github",
							"packageMain": "./src/index.ts",
							"isInPackageManagerWorkspaces": true
						}
					},
					"targets": {
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "@nx/js:tsc",
							"outputs": ["{options.outputPath}"],
							"options": {
								"outputPath": "dist/packages/github",
								"main": "packages/github/src/index.ts",
								"tsConfig": "packages/github/tsconfig.lib.json"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true
						},
						"lint": {
							"executor": "@nx/linter:eslint",
							"outputs": ["{options.outputPath}"],
							"options": {
								"lintFilePatterns": ["packages/github/**/*.ts"]
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "@nx/jest:jest",
							"outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
							"options": {
								"jestConfig": "packages/github/jest.config.ts"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true
						}
					},
					"$schema": "../../node_modules/nx/schemas/project-schema.json",
					"sourceRoot": "packages/github/src",
					"projectType": "library",
					"implicitDependencies": []
				}
			},
			"@cortex-os/evals": {
				"name": "@cortex-os/evals",
				"type": "lib",
				"data": {
					"root": "packages/evals",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "packages/evals",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								},
								"scriptContent": "vitest -c vitest.config.ts",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": "packages/evals",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/evals --includeDependentProjects -- npx nx build-deps @cortex-os/evals"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc -p tsconfig.json",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["build", "test"]
						},
						"js": {
							"packageName": "@cortex-os/evals",
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/evals",
					"tags": ["npm:private"],
					"implicitDependencies": []
				}
			},
			"infra-security": {
				"name": "infra-security",
				"type": "app",
				"data": {
					"root": "infra/security",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": "infra/security",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"options": {
								"cwd": "infra/security",
								"command": "vitest"
							},
							"cache": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"outputs": ["{projectRoot}/coverage"],
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects infra-security --includeDependentProjects -- npx nx build-deps infra-security"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {},
					"name": "infra-security",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"@cortex-os/governance-gates": {
				"name": "@cortex-os/governance-gates",
				"type": "app",
				"data": {
					"root": ".cortex/gates",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": ".cortex/gates",
								"command": "eslint ."
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"name": "@cortex-os/governance-gates",
					"implicitDependencies": [],
					"tags": []
				}
			},
			"asbr": {
				"name": "asbr",
				"type": "lib",
				"data": {
					"root": "packages/asbr",
					"targets": {
						"lint": {
							"executor": "@nx/eslint:lint",
							"options": {
								"lintFilePatterns": ["packages/asbr/**/*.ts"]
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "@nx/vite:test",
							"outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
							"options": {
								"configFile": "packages/asbr/vitest.config.ts",
								"passWithNoTests": true
							},
							"configurations": {
								"ci": {
									"coverage": true
								}
							},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								},
								"scriptContent": "tsc --noEmit --incremental",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects asbr --includeDependentProjects -- npx nx build-deps asbr"
							},
							"configurations": {},
							"parallelism": true
						},
						"dev": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev"
							},
							"metadata": {
								"scriptContent": "tsx src/index.ts",
								"runCommand": "npm run dev"
							},
							"configurations": {},
							"parallelism": true
						},
						"start": {
							"executor": "nx:run-script",
							"options": {
								"script": "start"
							},
							"metadata": {
								"scriptContent": "node dist/index.js",
								"runCommand": "npm run start"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:watch": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:watch"
							},
							"metadata": {
								"scriptContent": "vitest",
								"runCommand": "npm run test:watch"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:coverage": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:coverage"
							},
							"metadata": {
								"scriptContent": "vitest run --coverage",
								"runCommand": "npm run test:coverage"
							},
							"configurations": {},
							"parallelism": true
						},
						"test:a11y": {
							"executor": "nx:run-script",
							"options": {
								"script": "test:a11y"
							},
							"metadata": {
								"scriptContent": "vitest run --config vitest.a11y.config.ts",
								"runCommand": "npm run test:a11y"
							},
							"configurations": {},
							"parallelism": true
						},
						"lint:fix": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint:fix"
							},
							"metadata": {
								"scriptContent": "eslint src --ext .ts --fix",
								"runCommand": "npm run lint:fix"
							},
							"configurations": {},
							"parallelism": true
						},
						"clean": {
							"executor": "nx:run-script",
							"options": {
								"script": "clean"
							},
							"metadata": {
								"scriptContent": "rm -rf dist tsconfig.tsbuildinfo",
								"runCommand": "npm run clean"
							},
							"configurations": {},
							"parallelism": true
						},
						"build:fast": {
							"executor": "nx:run-script",
							"options": {
								"script": "build:fast"
							},
							"metadata": {
								"scriptContent": "tsc --build --incremental --assumeChangesOnlyAffectDirectDependencies",
								"runCommand": "npm run build:fast"
							},
							"configurations": {},
							"parallelism": true
						},
						"build:prod": {
							"executor": "nx:run-script",
							"options": {
								"script": "build:prod"
							},
							"metadata": {
								"scriptContent": "NODE_ENV=production tsc --build --incremental",
								"runCommand": "npm run build:prod"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "@nx/rollup:rollup",
							"outputs": ["{options.outputPath}"],
							"options": {
								"outputPath": "dist/packages/asbr",
								"tsConfig": "packages/asbr/tsconfig.lib.json",
								"project": "packages/asbr/package.json",
								"entryFile": "packages/asbr/src/index.ts",
								"external": ["rxjs/operators", "rxjs/websocket", "rxjs/ajax"]
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": [
								"dev",
								"start",
								"test:watch",
								"test:coverage",
								"test:a11y",
								"lint:fix",
								"clean",
								"typecheck",
								"build:fast",
								"build:prod"
							]
						},
						"description": "Agentic Second-Brain Runtime (ASBR) - Brain-only orchestration and knowledge runtime",
						"js": {
							"packageName": "@cortex-os/asbr",
							"packageExports": {
								".": {
									"types": "./dist/index.d.ts",
									"default": "./dist/index.js"
								},
								"./sdk": "./dist/sdk.js",
								"./api": "./dist/api.js",
								"./types": "./dist/types.d.ts"
							},
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "asbr",
					"tags": [
						"npm:private",
						"npm:asbr",
						"npm:cortex-os",
						"npm:brain-only",
						"npm:orchestration",
						"npm:second-brain",
						"npm:local-first",
						"npm:a11y",
						"npm:wcag",
						"npm:mcp",
						"scope:asbr",
						"type:core"
					],
					"$schema": "https://raw.githubusercontent.com/nrwl/nx/master/packages/nx/schemas/project-schema.json",
					"projectType": "library",
					"sourceRoot": "packages/asbr/src",
					"implicitDependencies": [],
					"namedInputs": {
						"default": ["{projectRoot}/**/*", "sharedGlobals"],
						"production": [
							"default",
							"!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)",
							"!{projectRoot}/tsconfig.spec.json",
							"!{projectRoot}/src/test-setup.[jt]s",
							"!{projectRoot}/test-setup.[jt]s"
						]
					}
				}
			},
			"@cortex-os/rag": {
				"name": "@cortex-os/rag",
				"type": "lib",
				"data": {
					"root": "packages/rag",
					"targets": {
						"lint": {
							"executor": "nx:run-script",
							"options": {
								"script": "lint"
							},
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "pnpm exec eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								},
								"scriptContent": "eslint .",
								"runCommand": "npm run lint"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "nx:run-script",
							"options": {
								"script": "test"
							},
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								},
								"scriptContent": "vitest run",
								"runCommand": "npm run test"
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true,
							"outputs": ["{projectRoot}/coverage"]
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								},
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects @cortex-os/rag --includeDependentProjects -- npx nx build-deps @cortex-os/rag"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "nx:run-script",
							"options": {
								"script": "build"
							},
							"metadata": {
								"scriptContent": "tsc -p tsconfig.json",
								"runCommand": "npm run build"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true,
							"outputs": ["{projectRoot}/dist", "{projectRoot}/build"]
						},
						"docs:verify": {
							"executor": "nx:run-script",
							"options": {
								"script": "docs:verify"
							},
							"metadata": {
								"scriptContent": "./scripts/verify-docs.sh",
								"runCommand": "npm run docs:verify"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": [
								"build",
								"typecheck",
								"lint",
								"test",
								"docs:verify"
							]
						},
						"js": {
							"packageName": "@cortex-os/rag",
							"packageMain": "src/index.ts",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "@cortex-os/rag",
					"tags": ["npm:private"],
					"implicitDependencies": []
				}
			},
			"a2a": {
				"name": "a2a",
				"type": "lib",
				"data": {
					"root": "packages/a2a",
					"targets": {
						"lint": {
							"executor": "@nx/eslint:lint",
							"options": {
								"lintFilePatterns": ["packages/a2a/**/*.ts"]
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "@nx/vite:test",
							"outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
							"options": {
								"configFile": "packages/a2a/vitest.config.ts",
								"passWithNoTests": true
							},
							"configurations": {
								"ci": {
									"coverage": true
								}
							},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								},
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects a2a --includeDependentProjects -- npx nx build-deps a2a"
							},
							"configurations": {},
							"parallelism": true
						},
						"dev:server": {
							"executor": "nx:run-script",
							"options": {
								"script": "dev:server"
							},
							"metadata": {
								"scriptContent": "node -e \"console.log('Dev server would start here - use main build for container')\"",
								"runCommand": "npm run dev:server"
							},
							"configurations": {},
							"parallelism": true
						},
						"docker:build": {
							"executor": "nx:run-script",
							"options": {
								"script": "docker:build"
							},
							"metadata": {
								"scriptContent": "./scripts/build-image.sh",
								"runCommand": "npm run docker:build"
							},
							"configurations": {},
							"parallelism": true
						},
						"docker:test": {
							"executor": "nx:run-script",
							"options": {
								"script": "docker:test"
							},
							"metadata": {
								"scriptContent": "./scripts/build-image.sh test-only",
								"runCommand": "npm run docker:test"
							},
							"configurations": {},
							"parallelism": true
						},
						"orbstack:deploy": {
							"executor": "nx:run-script",
							"options": {
								"script": "orbstack:deploy"
							},
							"metadata": {
								"scriptContent": "./scripts/deploy-orbstack.sh deploy",
								"runCommand": "npm run orbstack:deploy"
							},
							"configurations": {},
							"parallelism": true
						},
						"orbstack:status": {
							"executor": "nx:run-script",
							"options": {
								"script": "orbstack:status"
							},
							"metadata": {
								"scriptContent": "./scripts/deploy-orbstack.sh status",
								"runCommand": "npm run orbstack:status"
							},
							"configurations": {},
							"parallelism": true
						},
						"orbstack:logs": {
							"executor": "nx:run-script",
							"options": {
								"script": "orbstack:logs"
							},
							"metadata": {
								"scriptContent": "./scripts/deploy-orbstack.sh logs",
								"runCommand": "npm run orbstack:logs"
							},
							"configurations": {},
							"parallelism": true
						},
						"orbstack:stop": {
							"executor": "nx:run-script",
							"options": {
								"script": "orbstack:stop"
							},
							"metadata": {
								"scriptContent": "./scripts/deploy-orbstack.sh stop",
								"runCommand": "npm run orbstack:stop"
							},
							"configurations": {},
							"parallelism": true
						},
						"orbstack:test": {
							"executor": "nx:run-script",
							"options": {
								"script": "orbstack:test"
							},
							"metadata": {
								"scriptContent": "./scripts/deploy-orbstack.sh test",
								"runCommand": "npm run orbstack:test"
							},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "@nx/rollup:rollup",
							"outputs": ["{options.outputPath}"],
							"options": {
								"outputPath": "dist/packages/a2a",
								"tsConfig": "packages/a2a/tsconfig.lib.json",
								"project": "packages/a2a/package.json",
								"entryFile": "packages/a2a/src/index.ts",
								"external": ["rxjs/operators", "rxjs/websocket", "rxjs/ajax"]
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": [
								"typecheck",
								"dev:server",
								"docker:build",
								"docker:test",
								"orbstack:deploy",
								"orbstack:status",
								"orbstack:logs",
								"orbstack:stop",
								"orbstack:test"
							]
						},
						"js": {
							"packageName": "@cortex-os/a2a",
							"packageMain": "src/index.ts",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "a2a",
					"tags": ["npm:private", "scope:a2a", "type:shared"],
					"$schema": "https://raw.githubusercontent.com/nrwl/nx/master/packages/nx/schemas/project-schema.json",
					"projectType": "library",
					"sourceRoot": "packages/a2a/src",
					"implicitDependencies": [],
					"namedInputs": {
						"default": ["{projectRoot}/**/*", "sharedGlobals"],
						"production": [
							"default",
							"!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)",
							"!{projectRoot}/tsconfig.spec.json",
							"!{projectRoot}/src/test-setup.[jt]s",
							"!{projectRoot}/test-setup.[jt]s"
						]
					}
				}
			},
			"mcp": {
				"name": "mcp",
				"type": "lib",
				"data": {
					"root": "packages/mcp",
					"targets": {
						"lint": {
							"executor": "@nx/eslint:lint",
							"options": {
								"lintFilePatterns": ["packages/mcp/**/*.ts"]
							},
							"configurations": {},
							"parallelism": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"cache": true
						},
						"test": {
							"executor": "@nx/vite:test",
							"outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
							"options": {
								"configFile": "packages/mcp/vitest.config.ts",
								"passWithNoTests": true,
								"watch": false
							},
							"configurations": {
								"ci": {
									"coverage": true
								}
							},
							"parallelism": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"cache": true
						},
						"typecheck": {
							"executor": "nx:run-script",
							"options": {
								"script": "typecheck"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								},
								"scriptContent": "tsc -p tsconfig.json --noEmit",
								"runCommand": "npm run typecheck"
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["default", "^production"],
							"cache": true
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects mcp --includeDependentProjects -- npx nx build-deps mcp"
							},
							"configurations": {},
							"parallelism": true
						},
						"prepublishOnly": {
							"executor": "nx:run-script",
							"options": {
								"script": "prepublishOnly"
							},
							"metadata": {
								"scriptContent": "pnpm run build",
								"runCommand": "npm run prepublishOnly"
							},
							"configurations": {},
							"parallelism": true
						},
						"nx-release-publish": {
							"executor": "@nx/js:release-publish",
							"dependsOn": ["^nx-release-publish"],
							"options": {},
							"configurations": {},
							"parallelism": true
						},
						"build": {
							"executor": "@nx/rollup:rollup",
							"outputs": ["{options.outputPath}"],
							"options": {
								"outputPath": "dist/packages/mcp",
								"tsConfig": "packages/mcp/tsconfig.lib.json",
								"project": "packages/mcp/package.json",
								"entryFile": "packages/mcp/src/index.ts",
								"external": ["rxjs/operators", "rxjs/websocket", "rxjs/ajax"]
							},
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"],
							"inputs": ["production", "^production"],
							"cache": true
						}
					},
					"metadata": {
						"targetGroups": {
							"NPM Scripts": ["typecheck", "prepublishOnly"]
						},
						"js": {
							"packageName": "@cortex-os/mcp",
							"packageExports": {
								".": {
									"import": "./dist/index.js",
									"types": "./dist/index.d.ts"
								},
								"./client": {
									"import": "./dist/client.js",
									"types": "./dist/client.d.ts"
								},
								"./server": {
									"import": "./dist/server.js",
									"types": "./dist/server.d.ts"
								},
								"./bridge": {
									"import": "./dist/bridge.js",
									"types": "./dist/bridge.d.ts"
								},
								"./registry": {
									"import": "./dist/registry.js",
									"types": "./dist/registry.d.ts"
								}
							},
							"packageMain": "dist/index.js",
							"isInPackageManagerWorkspaces": true
						}
					},
					"name": "mcp",
					"tags": ["npm:public", "scope:mcp", "type:shared"],
					"$schema": "https://raw.githubusercontent.com/nrwl/nx/master/packages/nx/schemas/project-schema.json",
					"projectType": "library",
					"sourceRoot": "packages/mcp/src",
					"implicitDependencies": [],
					"namedInputs": {
						"default": ["{projectRoot}/**/*", "sharedGlobals"],
						"production": [
							"default",
							"!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)",
							"!{projectRoot}/tsconfig.spec.json",
							"!{projectRoot}/src/test-setup.[jt]s",
							"!{projectRoot}/test-setup.[jt]s"
						]
					}
				}
			},
			"cortex-os": {
				"name": "cortex-os",
				"type": "app",
				"data": {
					"root": ".",
					"targets": {
						"lint": {
							"cache": true,
							"inputs": [
								"default",
								"{workspaceRoot}/eslint.config.js",
								"{workspaceRoot}/biome.json"
							],
							"outputs": ["{options.outputFile}"],
							"metadata": {
								"technologies": ["eslint", "eslint"],
								"description": "Runs ESLint on project",
								"help": {
									"command": "npx eslint --help",
									"example": {
										"options": {
											"max-warnings": 0
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"options": {
								"cwd": ".",
								"command": "eslint ./src"
							},
							"configurations": {},
							"parallelism": true
						},
						"test": {
							"options": {
								"cwd": ".",
								"command": "vitest"
							},
							"cache": true,
							"inputs": [
								"default",
								"^production",
								"{workspaceRoot}/jest.preset.js",
								"{workspaceRoot}/vitest.config.ts",
								"{workspaceRoot}/vitest.workspace.ts"
							],
							"outputs": ["{projectRoot}/coverage"],
							"metadata": {
								"technologies": ["vite"],
								"description": "Run Vite tests",
								"help": {
									"command": "npx vitest --help",
									"example": {
										"options": {
											"bail": 1,
											"coverage": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true
						},
						"typecheck": {
							"cache": true,
							"inputs": ["default", "^production"],
							"options": {
								"cwd": ".",
								"command": "tsc --noEmit -p tsconfig.json"
							},
							"metadata": {
								"description": "Runs type-checking for the project.",
								"technologies": ["typescript"],
								"help": {
									"command": "npx tsc -p tsconfig.json --help",
									"example": {
										"options": {
											"noEmit": true
										}
									}
								}
							},
							"executor": "nx:run-commands",
							"configurations": {},
							"parallelism": true,
							"dependsOn": ["^build"]
						},
						"build-deps": {
							"dependsOn": ["^build"],
							"configurations": {},
							"options": {},
							"parallelism": true,
							"executor": "nx:noop"
						},
						"watch-deps": {
							"continuous": true,
							"dependsOn": ["build-deps"],
							"executor": "nx:run-commands",
							"options": {
								"command": "npx nx watch --projects cortex-os --includeDependentProjects -- npx nx build-deps cortex-os"
							},
							"configurations": {},
							"parallelism": true
						}
					},
					"metadata": {},
					"name": "cortex-os",
					"implicitDependencies": [],
					"tags": []
				}
			}
		},
		"dependencies": {
			"@cortex-os/a2a-outbox": [
				{
					"source": "@cortex-os/a2a-outbox",
					"target": "@cortex-os/a2a-common",
					"type": "static"
				},
				{
					"source": "@cortex-os/a2a-outbox",
					"target": "@cortex-os/a2a-contracts",
					"type": "static"
				}
			],
			"@cortex-os/evidence-validator": [],
			"@cortex-os/orchestration-analytics": [
				{
					"source": "@cortex-os/orchestration-analytics",
					"target": "@cortex-os/orchestration",
					"type": "static"
				}
			],
			"@cortex-os/a2a-schema-registry": [
				{
					"source": "@cortex-os/a2a-schema-registry",
					"target": "@cortex-os/a2a-common",
					"type": "static"
				},
				{
					"source": "@cortex-os/a2a-schema-registry",
					"target": "@cortex-os/a2a-contracts",
					"type": "static"
				}
			],
			"@cortex-os/core": [
				{
					"source": "@cortex-os/core",
					"target": "@cortex-os/utils",
					"type": "static"
				}
			],
			"@cortex-os/mcp-transport-bridge": [],
			"@cortex-os/echo-js": [
				{
					"source": "@cortex-os/echo-js",
					"target": "mcp",
					"type": "static"
				}
			],
			"@cortex-os/planner": [
				{
					"source": "@cortex-os/planner",
					"target": "asbr",
					"type": "static"
				},
				{
					"source": "@cortex-os/planner",
					"target": "@cortex-os/contracts",
					"type": "static"
				},
				{
					"source": "@cortex-os/planner",
					"target": "a2a",
					"type": "static"
				},
				{
					"source": "@cortex-os/planner",
					"target": "@cortex-os/orchestration",
					"type": "static"
				}
			],
			"@cortex-os/a2a-observability": [
				{
					"source": "@cortex-os/a2a-observability",
					"target": "@cortex-os/a2a-core",
					"type": "static"
				},
				{
					"source": "@cortex-os/a2a-observability",
					"target": "@cortex-os/telemetry",
					"type": "static"
				}
			],
			"@cortex-os/ingest": [
				{
					"source": "@cortex-os/ingest",
					"target": "asbr",
					"type": "static"
				},
				{
					"source": "@cortex-os/ingest",
					"target": "@cortex-os/contracts",
					"type": "static"
				},
				{
					"source": "@cortex-os/ingest",
					"target": "a2a",
					"type": "static"
				}
			],
			"@modelcontextprotocol/server-sequential-thinking": [],
			"@cortex-os/a11y-utils": [],
			"@cortex-os/a2a-common": [],
			"@cortex-os/mcp-marketplace": [
				{
					"source": "@cortex-os/mcp-marketplace",
					"target": "@cortex-os/mcp-registry",
					"type": "static"
				}
			],
			"@cortex-os/a2a-contracts": [],
			"@cortex-os/a2a-transport": [
				{
					"source": "@cortex-os/a2a-transport",
					"target": "@cortex-os/a2a-contracts",
					"type": "static"
				},
				{
					"source": "@cortex-os/a2a-transport",
					"target": "@cortex-os/a2a-core",
					"type": "static"
				}
			],
			"@cortex-os/a2a-handlers": [
				{
					"source": "@cortex-os/a2a-handlers",
					"target": "@cortex-os/a2a-core",
					"type": "static"
				}
			],
			"@cortex-os/contracts": [],
			"@cortex-os/cortex-ai-github": [
				{
					"source": "@cortex-os/cortex-ai-github",
					"target": "@cortex-os/a2a-core",
					"type": "static"
				},
				{
					"source": "@cortex-os/cortex-ai-github",
					"target": "@cortex-os/contracts",
					"type": "static"
				},
				{
					"source": "@cortex-os/cortex-ai-github",
					"target": "@cortex-os/types",
					"type": "static"
				}
			],
			"@cortex-os/telemetry": [],
			"@cortex-os/agent-a": [
				{
					"source": "@cortex-os/agent-a",
					"target": "asbr",
					"type": "static"
				},
				{
					"source": "@cortex-os/agent-a",
					"target": "@cortex-os/contracts",
					"type": "static"
				},
				{
					"source": "@cortex-os/agent-a",
					"target": "a2a",
					"type": "static"
				},
				{
					"source": "@cortex-os/agent-a",
					"target": "@cortex-os/orchestration",
					"type": "static"
				}
			],
			"@cortex-os/agent-b": [
				{
					"source": "@cortex-os/agent-b",
					"target": "asbr",
					"type": "static"
				},
				{
					"source": "@cortex-os/agent-b",
					"target": "@cortex-os/contracts",
					"type": "static"
				},
				{
					"source": "@cortex-os/agent-b",
					"target": "a2a",
					"type": "static"
				},
				{
					"source": "@cortex-os/agent-b",
					"target": "@cortex-os/orchestration",
					"type": "static"
				}
			],
			"@cortex-os/marketplace-api": [
				{
					"source": "@cortex-os/marketplace-api",
					"target": "@cortex-os/mcp-registry",
					"type": "static"
				},
				{
					"source": "@cortex-os/marketplace-api",
					"target": "mcp",
					"type": "static"
				}
			],
			"@cortex-os/mcp-github": [
				{
					"source": "@cortex-os/mcp-github",
					"target": "@cortex-os/a2a-core",
					"type": "static"
				},
				{
					"source": "@cortex-os/mcp-github",
					"target": "@cortex-os/mcp-core",
					"type": "static"
				},
				{
					"source": "@cortex-os/mcp-github",
					"target": "a2a-events",
					"type": "static"
				}
			],
			"@cortex-os/mvp-server": [
				{
					"source": "@cortex-os/mvp-server",
					"target": "@cortex-os/mvp-core",
					"type": "static"
				}
			],
			"a2a-events": [],
			"@cortex-os/model-gateway": [
				{
					"source": "@cortex-os/model-gateway",
					"target": "@cortex-os/orchestration",
					"type": "static"
				},
				{
					"source": "@cortex-os/model-gateway",
					"target": "@cortex-os/mcp-core",
					"type": "static"
				}
			],
			"@cortex-os/observability": [],
			"@cortex-os/orchestration": [
				{
					"source": "@cortex-os/orchestration",
					"target": "@cortex-os/agents",
					"type": "static"
				},
				{
					"source": "@cortex-os/orchestration",
					"target": "@cortex-os/memories",
					"type": "static"
				},
				{
					"source": "@cortex-os/orchestration",
					"target": "@cortex-os/utils",
					"type": "static"
				},
				{
					"source": "@cortex-os/orchestration",
					"target": "@cortex-os/prp-runner",
					"type": "static"
				},
				{
					"source": "@cortex-os/orchestration",
					"target": "@cortex-os/telemetry",
					"type": "static"
				}
			],
			"@modelcontextprotocol/server-everything": [],
			"@modelcontextprotocol/server-filesystem": [],
			"@cortex-os/a2a-core": [
				{
					"source": "@cortex-os/a2a-core",
					"target": "@cortex-os/a2a-contracts",
					"type": "static"
				},
				{
					"source": "@cortex-os/a2a-core",
					"target": "@cortex-os/telemetry",
					"type": "static"
				}
			],
			"@cortex-os/mcp-core": [
				{
					"source": "@cortex-os/mcp-core",
					"target": "mcp",
					"type": "static"
				}
			],
			"@cortex-os/mcp-registry": [
				{
					"source": "@cortex-os/mcp-registry",
					"target": "mcp",
					"type": "static"
				},
				{
					"source": "@cortex-os/mcp-registry",
					"target": "@cortex-os/mcp-core",
					"type": "static"
				}
			],
			"@cortex-os/mvp-core": [
				{
					"source": "@cortex-os/mvp-core",
					"target": "@cortex-os/utils",
					"type": "static"
				}
			],
			"@cortex-os/structure-guard": [],
			"@cortex-os/types": [],
			"@cortex-os/utils": [],
			"@cortex-os/eslint-config": [],
			"@cortex-os/lockfile-sync": [],
			"@cortex-os/mcp-bridge": [
				{
					"source": "@cortex-os/mcp-bridge",
					"target": "mcp",
					"type": "static"
				},
				{
					"source": "@cortex-os/mcp-bridge",
					"target": "@cortex-os/mcp-registry",
					"type": "static"
				}
			],
			"@cortex-os/mcp-server": [
				{
					"source": "@cortex-os/mcp-server",
					"target": "mcp",
					"type": "static"
				}
			],
			"@cortex-os/prp-runner": [
				{
					"source": "@cortex-os/prp-runner",
					"target": "a2a",
					"type": "static"
				}
			],
			"cortex-sec": [],
			"@cortex-os/contracts-v2": [],
			"@modelcontextprotocol/server-memory": [],
			"@cortex-os/memories": [],
			"@cortex-os/registry": [],
			"security": [
				{
					"source": "security",
					"target": "@cortex-os/a2a-core",
					"type": "static"
				},
				{
					"source": "security",
					"target": "@cortex-os/a2a-contracts",
					"type": "static"
				},
				{
					"source": "security",
					"target": "@cortex-os/telemetry",
					"type": "static"
				}
			],
			"@cortex-os/gateway": [
				{
					"source": "@cortex-os/gateway",
					"target": "@cortex-os/contracts",
					"type": "static"
				},
				{
					"source": "@cortex-os/gateway",
					"target": "mcp",
					"type": "static"
				},
				{
					"source": "@cortex-os/gateway",
					"target": "a2a",
					"type": "static"
				},
				{
					"source": "@cortex-os/gateway",
					"target": "@cortex-os/rag",
					"type": "static"
				},
				{
					"source": "@cortex-os/gateway",
					"target": "@cortex-os/simlab",
					"type": "static"
				},
				{
					"source": "@cortex-os/gateway",
					"target": "@cortex-os/model-gateway",
					"type": "static"
				}
			],
			"mvp": [
				{
					"source": "mvp",
					"target": "@cortex-os/mvp-core",
					"type": "implicit"
				},
				{
					"source": "mvp",
					"target": "@cortex-os/mvp-core",
					"type": "dynamic"
				},
				{
					"source": "mvp",
					"target": "@cortex-os/kernel",
					"type": "dynamic"
				},
				{
					"source": "mvp",
					"target": "@cortex-os/prp-runner",
					"type": "dynamic"
				}
			],
			"@cortex-os/agents": [
				{
					"source": "@cortex-os/agents",
					"target": "@cortex-os/memories",
					"type": "static"
				},
				{
					"source": "@cortex-os/agents",
					"target": "a2a",
					"type": "static"
				},
				{
					"source": "@cortex-os/agents",
					"target": "mcp",
					"type": "static"
				}
			],
			"@cortex-os/cli": [
				{
					"source": "@cortex-os/cli",
					"target": "@cortex-os/mcp-registry",
					"type": "static"
				},
				{
					"source": "@cortex-os/cli",
					"target": "@cortex-os/mcp-core",
					"type": "static"
				},
				{
					"source": "@cortex-os/cli",
					"target": "@cortex-os/telemetry",
					"type": "static"
				},
				{
					"source": "@cortex-os/cli",
					"target": "@cortex-os/simlab",
					"type": "static"
				},
				{
					"source": "@cortex-os/cli",
					"target": "@cortex-os/simlab",
					"type": "dynamic"
				},
				{
					"source": "@cortex-os/cli",
					"target": "@cortex-os/a2a-core",
					"type": "static"
				},
				{
					"source": "@cortex-os/cli",
					"target": "@cortex-os/a2a-transport",
					"type": "static"
				},
				{
					"source": "@cortex-os/cli",
					"target": "@cortex-os/utils",
					"type": "static"
				},
				{
					"source": "@cortex-os/cli",
					"target": "@cortex-os/evals",
					"type": "dynamic"
				}
			],
			"@cortex-os/kernel": [
				{
					"source": "@cortex-os/kernel",
					"target": "@cortex-os/prp-runner",
					"type": "static"
				},
				{
					"source": "@cortex-os/kernel",
					"target": "@cortex-os/prp-runner",
					"type": "dynamic"
				}
			],
			"@cortex-os/simlab": [],
			"github": [
				{
					"source": "github",
					"target": "@cortex-os/a2a-core",
					"type": "static"
				}
			],
			"@cortex-os/evals": [
				{
					"source": "@cortex-os/evals",
					"target": "@cortex-os/model-gateway",
					"type": "static"
				},
				{
					"source": "@cortex-os/evals",
					"target": "@cortex-os/model-gateway",
					"type": "dynamic"
				}
			],
			"infra-security": [],
			"@cortex-os/governance-gates": [],
			"asbr": [],
			"@cortex-os/rag": [
				{
					"source": "@cortex-os/rag",
					"target": "@cortex-os/contracts",
					"type": "static"
				},
				{
					"source": "@cortex-os/rag",
					"target": "@cortex-os/model-gateway",
					"type": "static"
				}
			],
			"a2a": [
				{
					"source": "a2a",
					"target": "@cortex-os/a2a-core",
					"type": "static"
				},
				{
					"source": "a2a",
					"target": "@cortex-os/a2a-transport",
					"type": "static"
				},
				{
					"source": "a2a",
					"target": "@cortex-os/utils",
					"type": "static"
				},
				{
					"source": "a2a",
					"target": "@cortex-os/a2a-contracts",
					"type": "static"
				},
				{
					"source": "a2a",
					"target": "@cortex-os/telemetry",
					"type": "static"
				}
			],
			"mcp": [
				{
					"source": "mcp",
					"target": "@cortex-os/contracts",
					"type": "static"
				},
				{
					"source": "mcp",
					"target": "@cortex-os/mcp-core",
					"type": "static"
				},
				{
					"source": "mcp",
					"target": "@cortex-os/mcp-transport-bridge",
					"type": "static"
				},
				{
					"source": "mcp",
					"target": "@cortex-os/mcp-registry",
					"type": "static"
				}
			],
			"cortex-os": [
				{
					"source": "cortex-os",
					"target": "@cortex-os/mcp-registry",
					"type": "static"
				},
				{
					"source": "cortex-os",
					"target": "@cortex-os/contracts",
					"type": "static"
				},
				{
					"source": "cortex-os",
					"target": "@cortex-os/telemetry",
					"type": "static"
				},
				{
					"source": "cortex-os",
					"target": "@cortex-os/a2a-contracts",
					"type": "static"
				},
				{
					"source": "cortex-os",
					"target": "@cortex-os/a2a-core",
					"type": "static"
				},
				{
					"source": "cortex-os",
					"target": "@cortex-os/a2a-handlers",
					"type": "static"
				},
				{
					"source": "cortex-os",
					"target": "@cortex-os/a2a-transport",
					"type": "static"
				},
				{
					"source": "cortex-os",
					"target": "@cortex-os/orchestration",
					"type": "static"
				},
				{
					"source": "cortex-os",
					"target": "@cortex-os/simlab",
					"type": "static"
				},
				{
					"source": "cortex-os",
					"target": "@cortex-os/model-gateway",
					"type": "static"
				},
				{
					"source": "cortex-os",
					"target": "@cortex-os/cli",
					"type": "dynamic"
				},
				{
					"source": "cortex-os",
					"target": "@cortex-os/mvp-core",
					"type": "static"
				},
				{
					"source": "cortex-os",
					"target": "mcp",
					"type": "static"
				},
				{
					"source": "cortex-os",
					"target": "@cortex-os/prp-runner",
					"type": "static"
				},
				{
					"source": "cortex-os",
					"target": "@cortex-os/utils",
					"type": "static"
				}
			]
		}
	}
}
