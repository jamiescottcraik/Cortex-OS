[
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/src/lib/a2a-integration.ts",
    "lines": "225",
    "severity": "medium",
    "category": "error-handling",
    "description": "Console.error used instead of proper logging mechanism",
    "evidence": "Line 225: console.error('Invalid MCP event schema:', validationError);",
    "fix": "Replace console.error with proper structured logging and emit error events",
    "tests_to_add": "Test case for invalid event schema handling"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/src/lib/a2a-integration.ts",
    "lines": "252-253",
    "severity": "medium",
    "category": "performance",
    "description": "Potential memory leak with unbounded event buffer",
    "evidence": "Lines 252-253: Buffer only removes oldest event when at maxBufferSize, but doesn't limit growth rate",
    "fix": "Add rate limiting for event buffering and consider time-based expiration",
    "tests_to_add": "Test buffer overflow scenarios and memory usage patterns"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/src/lib/orchestration-integration.ts",
    "lines": "132",
    "severity": "medium",
    "category": "error-handling",
    "description": "Error suppression in disconnect could hide critical failures",
    "evidence": "Line 132: console.warn used for disconnect errors, potentially masking issues",
    "fix": "Log disconnect errors at appropriate level and consider retry logic",
    "tests_to_add": "Test disconnect error scenarios"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/src/lib/memory-integration.ts",
    "lines": "589",
    "severity": "high",
    "category": "type-safety",
    "description": "Unsafe type assertion and private property access",
    "evidence": "Line 589: (this.cache as any).cache.entries() bypasses type safety",
    "fix": "Add proper method to cache class or refactor to avoid type casting",
    "tests_to_add": "Test invalidateByPattern functionality thoroughly"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/src/lib/memory-integration.ts",
    "lines": "614",
    "severity": "medium",
    "category": "security",
    "description": "Buffer usage could lead to security issues if data is large",
    "evidence": "Line 614: Buffer.from(JSON.stringify(sorted)).toString('base64') without size limits",
    "fix": "Add size validation and consider using crypto.createHash for consistent hashing",
    "tests_to_add": "Test with very large argument objects"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/src/lib/sse-transport.ts",
    "lines": "45",
    "severity": "high",
    "category": "dependency-injection",
    "description": "Dynamic require() breaks module system and could fail at runtime",
    "evidence": "Line 45: const EventSource = require('eventsource'); should be imported at module level",
    "fix": "Import EventSource at module level or use dynamic import()",
    "tests_to_add": "Test EventSource availability in different environments"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/src/lib/sse-transport.ts",
    "lines": "115",
    "severity": "medium",
    "category": "architecture",
    "description": "SSE send method implementation violates interface contract",
    "evidence": "Line 115: console.warn about SSE being read-only contradicts Transport interface",
    "fix": "Either implement proper bidirectional communication or separate read/write interfaces",
    "tests_to_add": "Test send behavior and error handling"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/src/lib/monitoring.ts",
    "lines": "607",
    "severity": "medium",
    "category": "security",
    "description": "Unvalidated fetch to external webhook URL",
    "evidence": "Lines 607-616: fetch(alertConfig.webhookUrl) without URL validation or timeout",
    "fix": "Validate webhook URL security and add proper timeout/error handling",
    "tests_to_add": "Test webhook security validation and timeout scenarios"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/src/lib/comprehensive-tests.test.ts",
    "lines": "32-34",
    "severity": "medium",
    "category": "testing",
    "description": "Mock setup uses deprecated vi.doMock pattern",
    "evidence": "Lines 32-34: vi.doMock inside beforeEach can cause test isolation issues",
    "fix": "Use vi.mock at module level or proper factory patterns",
    "tests_to_add": "Verify test isolation and mock cleanup"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/src/lib/client.ts",
    "lines": "54",
    "severity": "medium",
    "category": "security",
    "description": "Weak client ID generation could lead to collisions",
    "evidence": "Line 54: Math.random().toString(36) is not cryptographically secure",
    "fix": "Use crypto.randomUUID() or crypto.randomBytes() for client ID generation",
    "tests_to_add": "Test client ID uniqueness and collision detection"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/src/lib/client.ts",
    "lines": "199-203",
    "severity": "medium",
    "category": "logic-error",
    "description": "Transport type detection logic is fragile",
    "evidence": "Lines 199-203: Checks for properties that may not exist on transport object",
    "fix": "Store transport type in constructor or use proper type guards",
    "tests_to_add": "Test transport type detection with different configurations"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/src/lib/transport.ts",
    "lines": "46-47",
    "severity": "high",
    "category": "dependency-injection",
    "description": "Dynamic require breaks ES modules and tree-shaking",
    "evidence": "Line 47: const { SSETransport } = require('./sse-transport.js'); should use import",
    "fix": "Use dynamic import() or restructure to avoid circular dependencies",
    "tests_to_add": "Test module loading in different environments"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/src/lib/transport.ts",
    "lines": "96",
    "severity": "medium",
    "category": "performance",
    "description": "Deep copy operation on every message send",
    "evidence": "Line 95: redactSensitiveData(message) creates deep copy unnecessarily",
    "fix": "Only redact for logging, send original message to transport",
    "tests_to_add": "Performance test with large messages"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/src/lib/types.ts",
    "lines": "15-16",
    "severity": "low",
    "category": "code-style",
    "description": "Inconsistent newline formatting in interface definition",
    "evidence": "Lines 15-16: Extra newline breaks function signature readability",
    "fix": "Remove extra newline or format consistently",
    "tests_to_add": "Linting test for consistent code formatting"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/src/index.ts",
    "lines": "6-8",
    "severity": "high",
    "category": "missing-implementation",
    "description": "Package exports reference non-existent workspace packages",
    "evidence": "Lines 6-8: Export @cortex-os/mcp-core, mcp-bridge, mcp-registry but these may not exist",
    "fix": "Remove exports for non-existent packages or create placeholders",
    "tests_to_add": "Test that all exported modules can be imported successfully"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/src/lib/rate-limiter.ts",
    "lines": "117",
    "severity": "medium",
    "category": "missing-implementation",
    "description": "Distributed rate limiting not implemented but configured",
    "evidence": "Line 117: console.warn about unimplemented distributed rate limiting",
    "fix": "Either implement Redis support or remove distributed option from config",
    "tests_to_add": "Test distributed mode fallback behavior"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/src/lib/security.ts",
    "lines": "38-39",
    "severity": "medium",
    "category": "performance",
    "description": "Unnecessary schema validation on every redaction call",
    "evidence": "Lines 38-39: objSchema.parse(data) validates every object unnecessarily",
    "fix": "Remove unnecessary validation or cache schema validation",
    "tests_to_add": "Performance test redaction with large nested objects"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/mcp/package.json",
    "lines": "15-17",
    "severity": "high",
    "category": "missing-implementation",
    "description": "Workspace dependencies may not exist",
    "evidence": "Lines 15-17: Dependencies on @cortex-os/mcp-* packages that may not exist in workspace",
    "fix": "Verify all workspace dependencies exist or remove them",
    "tests_to_add": "Test package installation and dependency resolution"
  }
]
