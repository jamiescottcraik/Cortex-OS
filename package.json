{
  "name": "cortex-os",
  "private": true,
  "version": "0.0.1",
  "license": "Apache-2.0",
  "packageManager": "pnpm@10.3.0",
  "engines": {
    "node": ">=20"
  },
  "type": "module",
  "scripts": {
    "postinstall": "bash -lc 'if [ \"${CI:-}\" != \"true\" ] && [ \"${GITHUB_ACTIONS:-}\" != \"true\" ] && [ \"${CORTEX_EFFICIENCY_SETUP_SKIP:-}\" != \"1\" ] && [ \"${CORTEX_EFFICIENCY_SETUP_SKIP:-}\" != \"true\" ]; then if command -v git >/dev/null 2>&1 && [ -d .git ]; then git config --local core.hooksPath .githooks || true; fi; scripts/ensure-efficiency-tools.sh || true; fi'",
    "docs:lint": "markdownlint-cli2 \"README.md\" \"CONTRIBUTING.md\" \"docs/quick-start.md\" \"docs/python-integration.md\" \"docs/architecture-overview.md\" --config .markdownlint-cli2.yaml",
    "docs:lint:all": "markdownlint-cli2 \"README.md\" \"CONTRIBUTING.md\" \"docs/**/*.md\" \"!docs/legacy/**\" \"!docs/archive/**\" \"!**/node_modules/**\" \"!**/CHANGELOG.md\" \"!**/History.md\" \"!**/HISTORY.md\" --config .markdownlint-cli2.yaml",
    "docs:site:start": "cd website && npm start",
    "docs:site:build": "cd website && npm run build",
    "docs:site:serve": "cd website && npm run serve",
    "docs:site:clear": "cd website && npm run clear",
    "ensure:tools": "bash -lc 'scripts/ensure-efficiency-tools.sh'",
    "install:tools": "bash -lc 'scripts/install-efficiency-tools.sh'",
    "readiness:init": "node tools/readiness/generate-readiness-yml.mjs",
    "readiness:check": "node tools/readiness/check-readiness.mjs",
    "archive:docs:dry": "node scripts/maintenance/relocate-files.mjs --dry",
    "archive:docs": "node scripts/maintenance/relocate-files.mjs",
    "pretest": "bash scripts/memory-manager.sh --gentle --dry-run 2>/dev/null || true",
    "premcp": "bash scripts/memory-manager.sh --gentle --dry-run 2>/dev/null || true",
    "prebuild": "bash scripts/memory-manager.sh --gentle --dry-run 2>/dev/null || true",
    "memory:monitor": "bash scripts/memory-monitor.sh",
    "memory:daemon": "bash scripts/memory-monitor.sh daemon",
    "memory:clean": "bash scripts/memory-manager.sh --aggressive",
    "memory:clean:gentle": "bash scripts/memory-manager.sh --gentle",
    "vscode:optimize": "echo 'VS Code optimization disabled for stability'",
    "vscode:optimize:gentle": "echo 'VS Code optimization disabled for stability'",
    "test": "mise run test",
    "test:watch": "cross-env NODE_OPTIONS=\"--max-old-space-size=2048 --expose-gc\" VITEST_MAX_THREADS=1 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=1 VITEST_MIN_FORKS=1 vitest --no-coverage",
    "test:coverage": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096 --expose-gc\" VITEST_MAX_THREADS=1 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=1 VITEST_MIN_FORKS=1 vitest run --coverage --coverage.reporter=text-summary --coverage.reporter=json-summary",
    "test:coverage:threshold": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096 --expose-gc\" VITEST_MAX_THREADS=1 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=1 VITEST_MIN_FORKS=1 vitest run --coverage --coverage.reporter=text-summary --coverage.reporter=json-summary --coverage.thresholds.statements=90 --coverage.thresholds.branches=90 --coverage.thresholds.functions=90 --coverage.thresholds.lines=90",
    "test:safe": "bash -lc 'scripts/test-safe.sh -- --passWithNoTests'",
    "test:safe:watch": "bash -lc 'scripts/test-safe.sh --watch -- --passWithNoTests'",
    "test:safe:monitored": "bash -lc 'scripts/test-safe.sh --monitored -- --passWithNoTests'",
    "test:policy": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" VITEST_MAX_THREADS=2 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=2 VITEST_MIN_FORKS=1 vitest run -c vitest.policy.config.ts",
    "test:launch": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" VITEST_MAX_THREADS=2 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=2 VITEST_MIN_FORKS=1 vitest run -c tests/launch-readiness/vitest.config.ts",
    "ci:launch": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" vitest run -c vitest.launch.config.ts --reporter=dot",
    "test:gitmcp": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" VITEST_MAX_THREADS=2 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=2 VITEST_MIN_FORKS=1 vitest run -c vitest.gitmcp.config.ts",
    "ci:gitmcp": "pnpm test:gitmcp",
    "test:integration": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" VITEST_MAX_THREADS=2 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=2 VITEST_MIN_FORKS=1 vitest run -c vitest.integration.config.ts",
    "test:integration:multi-agent": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" VITEST_MAX_THREADS=2 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=2 VITEST_MIN_FORKS=1 vitest run tests/integration/multi-agent-workflow.test.ts",
    "test:integration:cli": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" VITEST_MAX_THREADS=2 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=2 VITEST_MIN_FORKS=1 vitest run tests/integration/cli-commands.test.ts",
    "test:integration:e2e": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" VITEST_MAX_THREADS=2 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=2 VITEST_MIN_FORKS=1 vitest run tests/integration/end-to-end-scenarios.test.ts",
    "test:integration:security": "cross-env NODE_OPTIONS=\"--max-old-space-size=4096\" VITEST_MAX_THREADS=2 VITEST_MIN_THREADS=1 VITEST_MAX_FORKS=2 VITEST_MIN_FORKS=1 vitest run tests/integration/security-validation.test.ts",
    "wcag3:assess": "node scripts/wcag3-tracker.mjs assess",
    "wcag3:status": "cat a11y/wcag-roadmap.md",
    "test:security": "pnpm run test:integration:security",
    "test:security:unit": "vitest run tests/security/database-wrapper.unit.test.ts tests/security/neo4j-wrapper.unit.test.ts tests/security/command-executor.unit.test.ts",
    "test:security:integration": "vitest run tests/security/security-wrappers.integration.test.ts",
    "test:security:regression": "vitest run tests/security/security-regression.test.ts",
    "test:security:coverage": "vitest run tests/security/ --coverage",
    "test:security:all": "pnpm run test:security:unit && pnpm run test:security:integration && pnpm run test:security:regression",
    "test:security:ci": "pnpm run test:security:all -- --reporter=dot",
    "security:scan": "cross-env NODE_OPTIONS=\"--max-old-space-size=2048\" semgrep scan --config=.semgrep/owasp-precise.yaml --severity=ERROR . --max-memory=2048",
    "security:scan:all": "cross-env NODE_OPTIONS=\"--max-old-space-size=2048\" semgrep scan --config=.semgrep/owasp-precise.yaml --config=.semgrep/owasp-top-10-improved.yaml . --max-memory=2048",
    "security:scan:llm": "cross-env NODE_OPTIONS=\"--max-old-space-size=2048\" semgrep scan --config=.semgrep/owasp-llm-top-ten.yaml . --max-memory=2048",
    "security:scan:atlas": "cross-env NODE_OPTIONS=\"--max-old-space-size=2048\" semgrep scan --config=.semgrep/mitre-atlas.yaml . --max-memory=2048",
    "security:scan:ci": "cross-env NODE_OPTIONS=\"--max-old-space-size=2048\" semgrep scan --config=.semgrep/owasp-precise.yaml --severity=ERROR --json --output=reports/semgrep-results.json . --max-memory=2048",
    "security:scan:comprehensive": "pnpm security:scan:all && pnpm security:scan:llm && pnpm security:scan:atlas",
    "security:audit": "pnpm audit --audit-level=high",
    "graphite:status": "gt status",
    "graphite:sync": "graphite repo sync",
    "graphite:stack": "graphite stack",
    "graphite:submit": "graphite stack submit",
    "graphite:branch": "graphite branch create",
    "graphite:restack": "graphite stack restack",
    "graphite:dashboard": "graphite dashboard",
    "mermaid:generate": "find . -name '*.mmd' -exec mmdc -i {} -o {}.png \\;",
    "mermaid:docs": "mmdc -i docs/architecture.mmd -o docs/architecture.png",
    "mermaid:workflow": "mmdc -i docs/workflows/workflow-diagram.mmd -o docs/workflows/workflow-diagram.png",
    "mermaid:validate": "find . -name '*.mmd' -exec echo 'Validating {}' \\; -exec mmdc -i {} --dry-run \\;",
    "test:cli-tools": "./scripts/test-cli-tools.sh",
    "demo:comprehensive": "./scripts/comprehensive-demo.sh",
    "security:typecheck": "npx tsc --noEmit --project tsconfig.json",
    "typecheck": "mise run typecheck",
    "security:run": "node scripts/run-security-tests.mjs",
    "mcp:start": "cd packages/mcp && pnpm start",
    "mcp:dev": "cd packages/mcp && pnpm run dev",
    "mcp:build": "cd packages/mcp && pnpm run build",
    "mcp:smoke": "node packages/mcp/scripts/smoke/mcp-smoke.mjs",
    "mcp:test": "packages/mcp/scripts/test-mcp.sh",
    "mcp:start-with-tunnel": "packages/mcp/scripts/start-mcp-with-tunnel.sh",
    "lint": "mise run lint",
    "lint:quality": "eslint \"{apps,packages}/**/*.{js,jsx,ts,tsx}\" --config=eslint.config.js",
    "lint:security": "eslint \"{apps,packages}/**/*.{js,jsx,ts,tsx}\" --config=eslint-security.config.js",
    "lint:ast-grep": "ast-grep scan --config sgconfig.json --format=github",
    "lint:ast-grep:fix": "ast-grep scan --config sgconfig.json --fix",
    "lint:ast-grep:check": "ast-grep scan --config sgconfig.json --report-style rich",
    "lint:ast-grep:json": "ast-grep scan --config sgconfig.json --json",
    "lint:ripgrep": "rg --glob '*.{ts,tsx,js,jsx,py,rs,go}'",
    "lint:ripgrep:todo": "rg --glob '*.{ts,tsx,js,jsx,py,rs,go}' 'TODO|FIXME|XXX|HACK' --color=always",
    "lint:ripgrep:console": "rg --glob '*.{ts,tsx,js,jsx}' 'console\\.(log|warn|error|debug|info)' --color=always",
    "lint:ripgrep:secrets": "rg --glob '*.{ts,tsx,js,jsx,py}' 'password|secret|token|key|auth' --color=always -i",
    "lint:ripgrep:debugger": "rg --glob '*.{ts,tsx,js,jsx}' 'debugger' --color=always",
    "lint:ripgrep:magic-numbers": "rg --glob '*.{ts,tsx,js,jsx}' '\\b\\d{2,}\\b' --color=always",
    "lint:ripgrep:unused-imports": "rg --glob '*.{ts,tsx,js,jsx}' '^import.*from' --color=always",
    "lint:ripgrep:large-files": "find . -name '*.{ts,tsx,js,jsx,py,rs,go}' -exec wc -l {} + | sort -nr | head -10",
    "lint:ripgrep:all": "pnpm lint:ripgrep:todo && pnpm lint:ripgrep:console && pnpm lint:ripgrep:secrets && pnpm lint:ripgrep:debugger",
    "format": "biome format --write .",
    "format:check": "biome check .",
    "biome:staged": "biome check --staged --write --no-errors-on-unmatched --max-diagnostics=none",
    "biome:changed": "biome check --changed --no-errors-on-unmatched --max-diagnostics=none",
    "biome:ci": "biome ci --changed --no-errors-on-unmatched --max-diagnostics=none",
    "build": "mise run build",
    "build:wasm": "./node_modules/.bin/tree-sitter build --wasm node_modules/tree-sitter-javascript -o packages/mvp-core/wasm/tree-sitter-javascript.wasm && ./node_modules/.bin/tree-sitter build --wasm node_modules/tree-sitter-typescript/typescript -o packages/mvp-core/wasm/tree-sitter-typescript.wasm && ./node_modules/.bin/tree-sitter build --wasm node_modules/tree-sitter-python -o packages/mvp-core/wasm/tree-sitter-python.wasm && ./node_modules/.bin/tree-sitter build --wasm node_modules/tree-sitter-go -o packages/mvp-core/wasm/tree-sitter-go.wasm",
    "docs:api": "python scripts/generate-api-docs.py",
    "docs:generate": "tsx scripts/generate-docs.ts",
    "docs:watch": "tsx scripts/generate-docs.ts && npx chokidar 'packages/*/src/**/*.{ts,tsx,py}' -c 'tsx scripts/generate-docs.ts'",
    "performance:budget": "ANALYZE=true pnpm --filter @brainwav/web build",
    "prepare": "node -e \"try{require('husky').install()}catch(e){console.log('[prepare] husky not installed, skipping hooks')}\"",
    "env:load": "./scripts/load-1password-env.sh",
    "env:test": "op run --env-file=.env.1password -- env | grep -E '(OPENAI|GITHUB|SONAR)'",
    "docs:build": "mkdocs build",
    "docs:links": "node scripts/docs-link-check.mjs",
    "docs:serve": "mkdocs serve --dev-addr=0.0.0.0:8000",
    "docs:dev": "mkdocs serve --livereload --watch=packages/",
    "docs:deploy": "mkdocs gh-deploy --clean --message 'Deploy docs with accessibility and evidence links'",
    "docs:accessibility:validate": "pa11y-ci --sitemap http://localhost:8000/sitemap.xml --standard WCAG2AA",
    "docs:accessibility:audit": "axe-cli http://localhost:8000 --tags wcag2a,wcag2aa --reporter json --output docs/accessibility-audit.json",
    "atlas:assess": "python -m apps.cortex-py.src.security.atlas.atlas_engine",
    "security:unified": "python -m apps.cortex-py.src.security.unified_security",
    "deps:analyze": "node scripts/analyze-dependencies.mjs",
    "deps:check:mcp": "depcruise --config .dependency-cruiser.mcp.cjs packages || (echo 'Dependency violations found' && exit 1)",
    "license:scan": "node scripts/license/license-scanner.mjs",
    "license:validate": "node scripts/license/license-scanner.mjs",
    "sbom:generate": "node scripts/compliance/generate-sbom.mjs",
    "compliance:all": "pnpm license:validate && pnpm sbom:generate",
    "compliance:dashboard": "node scripts/compliance-dashboard.mjs",
    "compliance:monitor": "node scripts/legal-notifications.mjs monitor",
    "compliance:test:notification": "node scripts/legal-notifications.mjs test",
    "compliance:external-scan": "node scripts/external-license-integration.mjs scan",
    "structure:validate": "npx tsx tools/structure-guard/guard-enhanced.ts",
    "tdd:plan": "tsx tools/tdd/plan.ts",
    "tdd:ci": "tsx tools/tdd/ci.ts",
    "bloat:check": "node scripts/check-bloat.mjs",
    "project:optimize": "pnpm run deps:analyze && pnpm run structure:validate && pnpm run bloat:check",
    "organize-docs": "tsx scripts/doc-organizer.ts",
    "organize-docs:apply": "tsx scripts/doc-organizer.ts --apply",
    "organize-files": "node tools/file-organizer/organize.mjs",
    "organize-files:dry-run": "node tools/file-organizer/organize.mjs --dry-run",
    "python:sync": "uv sync",
    "python:sync:dev": "uv sync --dev",
    "python:add": "uv add",
    "python:remove": "uv pip uninstall",
    "python:list": "uv pip list",
    "python:migrate": "scripts/python/migrate-to-uv.sh",
    "python:format": "ruff format .",
    "python:format:check": "ruff format --check services libs/python packages apps/cortex-py servers/src",
    "python:lint": "ruff check services libs/python packages apps/cortex-py servers/src",
    "python:lint:fix": "ruff check --fix services libs/python packages apps/cortex-py servers/src",
    "test:structure": "node scripts/code-quality/validate-structure.mjs",
    "carbon:setup": "./scripts/carbon-monitoring/setup-carbon-monitoring.sh",
    "carbon:build": "./scripts/carbon-monitoring/carbon-aware-build.mjs pnpm run build",
    "carbon:test": "./scripts/carbon-monitoring/carbon-aware-build.mjs pnpm run test",
    "carbon:dashboard": "echo 'Grafana Dashboard: http://localhost:3001 (admin/cortex123)'",
    "deploy:production": "./scripts/deploy-production.sh",
    "backup:auto": "./scripts/auto-commit.sh",
    "backup:start": "mkdir -p logs && nohup ./scripts/auto-commit.sh > logs/auto-commit.log 2>&1 &",
    "backup:stop": "pkill -f auto-commit.sh",
    "pw:test": "playwright test",
    "pw:report": "playwright show-report",
    "pw:update": "playwright test --update-snapshots",
    "pw:test:debug": "playwright test --debug",
    "pw:test:ui": "playwright test --ui",
    "ci:governance": "pnpm format:check && pnpm lint && pnpm test:security && pnpm structure:validate && pnpm license:validate && pnpm ci:mcp-path",
    "cli:check": "cd apps/cortex-code && cargo run -- ctl validate",
    "codemap": "tsx tools/scripts/generate-code-map.ts",
    "tui:preview": "cd apps/cortex-code && cargo run -- tui",
    "tui:preview:plain": "cd apps/cortex-code && cargo run -- tui --theme=plain",
    "tui:preview:rich": "cd apps/cortex-code && cargo run -- tui --theme=rich",
    "tui:dev": "cd apps/cortex-code && cargo watch -x 'run -- tui --theme=plain'",
    "tui:dev:rich": "cd apps/cortex-code && cargo watch -x 'run -- tui --theme=rich'",
    "check:layout": "tsx tools/repo/check-layout.ts --suggest-fix",
    "check:agents-hash": "tsx tools/validators/agents-hash-check.ts",
    "check:pr-prov": "tsx tools/validators/pr-provenance-check.ts",
    "check:a11y-docs": "tsx tools/validators/axe-docs-check.ts",
    "fix:agents-heads": "tsx .cortex/tooling/check-agents.ts",
    "verify:all": "pnpm check:layout && pnpm check:docs && pnpm check:a11y-docs",
    "dev:orbstack": "docker compose --env-file infra/compose/.env.dev -f infra/compose/docker-compose.dev.yml --profile dev-full up --build -d",
    "dev:orbstack:min": "docker compose --env-file infra/compose/.env.dev -f infra/compose/docker-compose.dev.yml --profile dev-min up --build -d",
    "dev:orbstack:full": "docker compose --env-file infra/compose/.env.dev -f infra/compose/docker-compose.dev.yml --profile dev-full up --build -d",
    "dev:orbstack:web": "docker compose --env-file infra/compose/.env.dev -f infra/compose/docker-compose.dev.yml --profile web up --build -d",
    "dev:orbstack:api": "docker compose --env-file infra/compose/.env.dev -f infra/compose/docker-compose.dev.yml --profile api up --build -d",
    "dev:orbstack:workers": "docker compose --env-file infra/compose/.env.dev -f infra/compose/docker-compose.dev.yml --profile workers up --build -d",
    "dev:orbstack:obs": "docker compose --env-file infra/compose/.env.dev -f infra/compose/docker-compose.dev.yml --profile observability up --build -d",
    "dev:orbstack:demo": "docker compose --env-file infra/compose/.env.dev -f infra/compose/docker-compose.dev.yml --profile dev-full --profile web --profile observability up --build -d",
    "dev:orbstack:down": "docker compose --env-file infra/compose/.env.dev -f infra/compose/docker-compose.dev.yml down",
    "dev:orbstack:ps": "docker compose --env-file infra/compose/.env.dev -f infra/compose/docker-compose.dev.yml ps",
    "dev:orbstack:logs": "docker compose --env-file infra/compose/.env.dev -f infra/compose/docker-compose.dev.yml logs -f",
    "nx:test:core": "pnpm -s nx run-many -t test --projects=@cortex-os/utils,@cortex-os/types,@cortex-os/contracts,@cortex-os/contracts-v2 --parallel=2",
    "nx:test:a2a": "pnpm -s nx run-many -t test --projects=@cortex-os/a2a-core,@cortex-os/a2a-common,@cortex-os/a2a-contracts,@cortex-os/a2a-transport,@cortex-os/a2a-handlers,@cortex-os/a2a-schema-registry,@cortex-os/a2a-observability,a2a --parallel=2",
    "nx:test:mcp": "pnpm -s nx run-many -t test --projects=@cortex-os/registry --parallel=2",
    "nx:test:services": "pnpm -s nx run-many -t test --projects=@cortex-os/telemetry,@cortex-os/model-gateway,@cortex-os/observability,@cortex-os/orchestration,@cortex-os/gateway,@cortex-os/registry,@cortex-os/memories --parallel=2",
    "nx:test:features": "pnpm -s nx run-many -t test --projects=@cortex-os/mvp-core,@cortex-os/mvp-server,@cortex-os/prp-runner,@cortex-os/agents,@cortex-os/kernel,@cortex-os/simlab,@cortex-os/evals,@cortex-os/rag,asbr,mvp --parallel=2",
    "nx:test:each": "pnpm -s nx show projects --with-target=test --noInteractive | xargs -n 1 -P 3 -I {} pnpm -s nx test {}",
    "nx:test:all:chunked": "pnpm nx:test:core && pnpm nx:test:a2a && pnpm nx:test:mcp && pnpm nx:test:services && pnpm nx:test:features",
    "bootstrap": "mise run bootstrap",
    "biome": "mise run biome",
    "graph": "nx graph",
    "codex:test": "cd apps/cortex-codex && cargo test --workspace",
    "codex:test:unit": "cd apps/cortex-codex && cargo test --workspace --lib --bins --tests --no-run && cargo test --workspace -- --skip integration --skip slow",
    "codex:test:integration": "cd apps/cortex-codex && cargo test --workspace -- --ignored",
    "codex:test:coverage": "cd apps/cortex-codex && cargo llvm-cov --workspace --lcov --output-path target/coverage/lcov.info --html",
    "codex:install:coverage-tools": "bash -lc 'if command -v cargo-llvm-cov >/dev/null 2>&1; then echo cargo-llvm-cov already installed; else cargo install cargo-llvm-cov --locked || echo \"Failed to install cargo-llvm-cov\"; fi'",
    "codex:coverage:xtask": "cd apps/cortex-codex/xtask && cargo run -- coverage",
    "codex:coverage:report": "cd apps/cortex-codex/xtask && cargo run -- coverage-report",
    "codex:doctor": "bash scripts/codex-doctor.sh"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.60.0",
    "@frost-beta/clip": "^1.3.1",
    "@measured/puck": "^0.20.1",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/react": "^19.1.12",
    "@types/react-dom": "^19.1.9",
    "axios": "^1.6.2",
    "chalk": "^5.3.0",
    "chokidar": "^3.5.3",
    "commander": "^11.1.0",
    "crawlee": "^3.14.1",
    "dotenv": "^16.3.1",
    "execa": "^9.6.0",
    "inquirer": "^9.2.12",
    "js-tiktoken": "^1.0.21",
    "nanoid": "^5.0.4",
    "ora": "^7.0.1",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "typescript-eslint": "^8.41.0",
    "vite-tsconfig-paths": "^5.1.4",
    "web-tree-sitter": "^0.25.8",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@biomejs/biome": "2.2.2",
    "@commitlint/cli": "^19.3.0",
    "@commitlint/config-conventional": "^19.2.2",
    "@cyclonedx/bom": "^4.1.0",
    "@eslint/js": "^9.34.0",
    "@nx/devkit": "^21.4.1",
    "@nx/eslint": "^21.4.1",
    "@nx/js": "^21.4.1",
    "@nx/next": "^21.4.1",
    "@nx/node": "^21.4.1",
    "@nx/react": "^21.4.1",
    "@nx/rollup": "^21.4.1",
    "@nx/vite": "^21.4.1",
    "@types/node": "^22.5.0",
    "@typescript-eslint/eslint-plugin": "^8.1.0",
    "@typescript-eslint/parser": "^8.1.0",
    "@vitest/coverage-v8": "^2.0.5",
    "ajv": "^8.17.1",
    "ajv-formats": "^3.0.1",
    "markdownlint": "^0.33.0",
    "markdownlint-cli2": "^0.15.0",
    "cross-env": "^7.0.3",
    "cyclonedx-bom": "^0.0.9",
    "eslint": "^9.8.0",
    "eslint-plugin-boundaries": "^4.2.1",
    "eslint-plugin-import": "^2.29.1",
    "eslint-plugin-sonarjs": "^3.0.5",
    "fast-glob": "^3.3.3",
    "globby": "^14.1.0",
    "husky": "^9.1.6",
    "js-yaml": "^4.1.0",
    "lint-staged": "^15.2.8",
    "micromatch": "^4.0.8",
    "nx": "^21.4.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.5.4",
    "typescript-eslint": "^8.1.0",
    "vitest": "^2.0.5",
    "yaml": "^2.5.0"
  },
  "lint-staged": {
    "**/*.{js,jsx,ts,tsx}": [
      "biome check --write --no-errors-on-unmatched --max-diagnostics=none"
    ]
  }
}
