name: Security Modern

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 3 * * 1' # Weekly full scan (Mondays 03:00 UTC)

concurrency:
  group: security-modern-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  # Quick security gates for PRs
  security-gates:
    name: Security Gates (Fast)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Full-stack setup (minimal)
        uses: ./.github/workflows/reusable-full-stack-setup.yml
        with:
          node-version: '22'
          pnpm-version: '9'
          python-version: '3.11'
          uv: true
          run-install: false  # Just cache warming
          cache-warm: true

      - name: Gitleaks (PR diff only)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --redact --report-format sarif --report-path gitleaks.sarif

      - name: Semgrep high severity
        run: |
          docker run --rm -v "$PWD:/src" semgrep/semgrep:1.90.0 \
            semgrep scan --config=.semgrep/owasp-precise.yaml --severity=ERROR \
            --sarif --output=/src/semgrep-pr.sarif /src || true

      - name: Upload security artifacts
        uses: ./.github/actions/upload-security-artifacts
        with:
          name: security-gates-pr
          sarif-path: '*.sarif'

  # Comprehensive security scan (scheduled + main branch)
  security-comprehensive:
    name: Security Comprehensive
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        scan-type:
          - secrets-dependencies
          - sast-codeql
          - python-security
          - container-security
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Secrets & Dependencies
      - name: Secrets & Dependencies Scan
        if: matrix.scan-type == 'secrets-dependencies'
        run: |
          # Full repo Gitleaks scan
          docker run --rm -v "$PWD:/repo" zricethezav/gitleaks:latest \
            detect --redact --no-git --source="/repo" \
            --report-format sarif --report-path gitleaks-full.sarif || true

          # Setup Node for dependency scans
          curl -fsSL https://get.pnpm.io/install.sh | sh
          export PATH="$HOME/.local/share/pnpm:$PATH"
          pnpm install --frozen-lockfile

          # Dependency audit
          pnpm audit --audit-level=high --json > audit-results.json || true
          
          # OSV Scanner
          curl -L https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64 -o osv-scanner
          chmod +x osv-scanner
          ./osv-scanner --lockfile=pnpm-lock.yaml --format=json --output=osv-results.json || true

      # SAST & CodeQL
      - name: SAST & CodeQL Analysis
        if: matrix.scan-type == 'sast-codeql'
        run: |
          # Semgrep comprehensive
          docker run --rm -v "$PWD:/src" semgrep/semgrep:1.90.0 \
            semgrep scan --config=auto --sarif --output=/src/semgrep-full.sarif /src || true

          # CodeQL (delegated to separate job for matrix efficiency)
          echo "CodeQL handled by dedicated codeql.yml workflow"

      # Python Security
      - name: Python Security Analysis
        if: matrix.scan-type == 'python-security'
        run: |
          # Setup Python with uv
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="$HOME/.cargo/bin:$PATH"
          
          # Bandit scan
          uvx --from bandit bandit -r . -f json -o bandit-results.json || true
          
          # Safety check
          uv run safety check --json --output safety-results.json || true

      # Container Security
      - name: Container Security Scan
        if: matrix.scan-type == 'container-security'
        run: |
          # Build image if Dockerfile exists
          if [ -f "Dockerfile" ]; then
            docker build -t cortex-os:security-scan . || echo "Docker build failed, skipping"
            
            # Trivy image scan
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
              -v $PWD:/workspace aquasecurity/trivy:latest \
              image --format sarif --output /workspace/trivy-image.sarif \
              cortex-os:security-scan || true
          else
            echo "No Dockerfile found, skipping container scan"
          fi

      - name: Upload comprehensive security artifacts
        if: always()
        uses: ./.github/actions/upload-security-artifacts
        with:
          name: security-${{ matrix.scan-type }}-${{ github.sha }}
          sarif-path: '*.sarif'
          reports-path: '*-results.json'
          retention-days: '90'  # Longer retention for comprehensive scans

  # Security summary (always runs)
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-gates, security-comprehensive]
    if: always()
    steps:
      - name: Security scan summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "| Security Gates | ${{ needs.security-gates.result }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Comprehensive Scan | ${{ needs.security-comprehensive.result }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed results in Security tab and workflow artifacts." >> $GITHUB_STEP_SUMMARY
