name: Security - Enhanced SAST and Linting

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    - cron: '0 2 * * 1' # Weekly Monday 02:00 UTC

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  semgrep-sast:
    name: Semgrep SAST Analysis
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep
    if: (github.actor != 'dependabot[bot]')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Semgrep
        run: |
          semgrep \
            --config=auto \
            --config=security-audit \
            --config=owasp-top-10 \
            --config=p/typescript \
            --config=p/python \
            --config=p/docker \
            --config=p/kubernetes \
            --json \
            --output=semgrep-results.json \
            --verbose

      - name: Filter and analyze results
        run: |
          # Filter for high/critical severity issues
          jq '[.results[] | select(.extra.severity == "ERROR" or .extra.severity == "WARNING")]' semgrep-results.json > high-priority-findings.json
          
          # Generate summary
          HIGH_COUNT=$(jq '[.[] | select(.extra.severity == "ERROR")] | length' high-priority-findings.json)
          MED_COUNT=$(jq '[.[] | select(.extra.severity == "WARNING")] | length' high-priority-findings.json)
          
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- High/Critical Issues: $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- Medium/Warning Issues: $MED_COUNT" >> $GITHUB_STEP_SUMMARY
          
          # Fail CI if critical issues found
          if [ "$HIGH_COUNT" -gt 0 ]; then
            echo "Critical security issues found! Please review."
            exit 1
          fi

      - name: Upload SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        continue-on-error: true

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: |
            semgrep-results.json
            high-priority-findings.json

  bandit-python:
    name: Bandit Python Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]

      - name: Run Bandit scan
        run: |
          bandit -r . -f json -o bandit-results.json || true
          bandit -r . -f txt -o bandit-results.txt || true

      - name: Analyze results
        run: |
          if [ -f bandit-results.json ]; then
            HIGH_COUNT=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit-results.json || echo "0")
            MED_COUNT=$(jq '[.results[] | select(.issue_severity == "MEDIUM")] | length' bandit-results.json || echo "0")
            
            echo "## Bandit Python Security Scan" >> $GITHUB_STEP_SUMMARY
            echo "- High Severity Issues: $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- Medium Severity Issues: $MED_COUNT" >> $GITHUB_STEP_SUMMARY
            
            if [ "$HIGH_COUNT" -gt 0 ]; then
              echo "High severity Python security issues found!"
              exit 1
            fi
          fi

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-results
          path: |
            bandit-results.json
            bandit-results.txt

  eslint-security:
    name: ESLint Security Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.3.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint Security
        run: |
          pnpm eslint . \
            --config eslint-security.config.js \
            --format json \
            --output-file eslint-security-results.json || true

      - name: Analyze ESLint results
        run: |
          if [ -f eslint-security-results.json ]; then
            TOTAL_ISSUES=$(jq '[.[].messages[]] | length' eslint-security-results.json || echo "0")
            ERROR_ISSUES=$(jq '[.[].messages[] | select(.severity == 2)] | length' eslint-security-results.json || echo "0")
            
            echo "## ESLint Security Analysis" >> $GITHUB_STEP_SUMMARY
            echo "- Total Security Issues: $TOTAL_ISSUES" >> $GITHUB_STEP_SUMMARY
            echo "- Error Level Issues: $ERROR_ISSUES" >> $GITHUB_STEP_SUMMARY
            
            if [ "$ERROR_ISSUES" -gt 0 ]; then
              echo "ESLint security errors found!"
              cat eslint-security-results.json
              exit 1
            fi
          fi

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-security-results
          path: eslint-security-results.json

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'docker/') || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Scan Dockerfiles
        run: |
          mkdir -p trivy-results
          
          for dockerfile in $(find docker/ -name "*.dockerfile" -o -name "Dockerfile"); do
            echo "Scanning $dockerfile"
            trivy config \
              --format json \
              --output "trivy-results/$(basename $dockerfile)-config.json" \
              "$dockerfile" || true
          done

      - name: Build and scan images (if Dockerfiles changed)
        if: contains(github.event.head_commit.modified, '.dockerfile')
        run: |
          for dockerfile in $(find docker/ -name "*.dockerfile" -o -name "Dockerfile"); do
            image_name="test-$(basename $dockerfile | sed 's/\.dockerfile$//')"
            echo "Building and scanning $image_name from $dockerfile"
            
            docker build -f "$dockerfile" -t "$image_name" . || continue
            
            trivy image \
              --format json \
              --output "trivy-results/$image_name-vulnerabilities.json" \
              "$image_name" || true
          done

      - name: Analyze Trivy results
        run: |
          HIGH_VULNS=0
          CRITICAL_VULNS=0
          CONFIG_ISSUES=0
          
          for file in trivy-results/*.json; do
            if [[ "$file" == *"vulnerabilities"* ]]; then
              HIGH=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "HIGH") | .VulnerabilityID' "$file" 2>/dev/null | wc -l || echo "0")
              CRITICAL=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID' "$file" 2>/dev/null | wc -l || echo "0")
              HIGH_VULNS=$((HIGH_VULNS + HIGH))
              CRITICAL_VULNS=$((CRITICAL_VULNS + CRITICAL))
            elif [[ "$file" == *"config"* ]]; then
              MISCONFIGS=$(jq '.Results[]?.Misconfigurations[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL")' "$file" 2>/dev/null | wc -l || echo "0")
              CONFIG_ISSUES=$((CONFIG_ISSUES + MISCONFIGS))
            fi
          done
          
          echo "## Docker Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- Critical Vulnerabilities: $CRITICAL_VULNS" >> $GITHUB_STEP_SUMMARY
          echo "- High Vulnerabilities: $HIGH_VULNS" >> $GITHUB_STEP_SUMMARY
          echo "- Configuration Issues: $CONFIG_ISSUES" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "Critical vulnerabilities found in Docker images!"
            exit 1
          fi

      - name: Upload Trivy results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-security-results
          path: trivy-results/

  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'cortex-os'
          path: '.'
          format: 'ALL'
          out: 'dependency-check-reports'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload dependency check results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-results
          path: dependency-check-reports/

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [semgrep-sast, bandit-python, eslint-security, docker-security, dependency-check]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# ðŸ”’ Security Scan Summary" >> security-summary.md
          echo "" >> security-summary.md
          echo "Scan completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Scan Results" >> security-summary.md
          echo "| Tool | Status | Critical | High | Medium |" >> security-summary.md
          echo "|------|--------|----------|------|--------|" >> security-summary.md
          
          # Process each scan result
          if [ -d "semgrep-results" ]; then
            echo "| Semgrep | âœ… | - | - | - |" >> security-summary.md
          fi
          
          if [ -d "bandit-results" ]; then
            echo "| Bandit | âœ… | - | - | - |" >> security-summary.md
          fi
          
          if [ -d "eslint-security-results" ]; then
            echo "| ESLint Security | âœ… | - | - | - |" >> security-summary.md
          fi
          
          if [ -d "docker-security-results" ]; then
            echo "| Docker Security | âœ… | - | - | - |" >> security-summary.md
          fi
          
          if [ -d "dependency-check-results" ]; then
            echo "| Dependency Check | âœ… | - | - | - |" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "## Recommendations" >> security-summary.md
          echo "- Review all high and critical findings immediately" >> security-summary.md
          echo "- Update dependencies with known vulnerabilities" >> security-summary.md
          echo "- Follow secure coding practices" >> security-summary.md
          echo "- Run security scans regularly" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment on PR (if PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('security-summary.md')) {
              const summary = fs.readFileSync('security-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
