name: security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
  workflow_call:
  repository_dispatch:

jobs:
  scans:
    name: Security Scans
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scan: [semgrep, npm-audit, pip-audit, gitleaks]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.scan == 'semgrep' || matrix.scan == 'npm-audit'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Setup pnpm
        if: matrix.scan == 'semgrep' || matrix.scan == 'npm-audit'
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        if: matrix.scan == 'semgrep' || matrix.scan == 'npm-audit'
        run: pnpm install --frozen-lockfile

      - name: Run Semgrep
        if: matrix.scan == 'semgrep'
        uses: semgrep/ci@v1
        with:
          config: |
            .semgrep/owasp-precise.yaml
            .semgrep/owasp-llm-top-ten.yaml
            .semgrep/mitre-atlas.yaml

      - name: Run npm audit
        if: matrix.scan == 'npm-audit'
        run: pnpm audit --audit-level=high

      - name: Setup Python
        if: matrix.scan == 'pip-audit'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run pip-audit
        if: matrix.scan == 'pip-audit'
        continue-on-error: true
        run: |
          python -m pip install --upgrade pip pip-audit
          pip-audit

      - name: Run gitleaks
        if: matrix.scan == 'gitleaks'
        uses: gitleaks/gitleaks-action@v2
        with:
          args: "--verbose"

  sbom:
    name: SBOM and Signing
    runs-on: ubuntu-latest
    needs: scans
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - name: Generate SBOM (CycloneDX)
        run: pnpm sbom:generate
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
      - name: Sign SBOM
        run: cosign sign-blob --yes --output-signature sbom/sbom.cdx.json.sig sbom/sbom.cdx.json
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom/**
