name: Advanced CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 0' # Weekly security scan

env:
  NODE_VERSION: '20.11.1'
  PYTHON_VERSION: '3.11.13'
  PNPM_VERSION: '9.9.0'

jobs:
  # Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Biome check
        run: pnpm run biome:check

      - name: TypeScript check
        run: pnpm run typecheck

      - name: Lint
        run: pnpm run lint

      - name: Format check
        run: pnpm run format:check

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Security audit
        run: pnpm audit --audit-level moderate

      - name: License compliance
        run: pnpm run license:check

      - name: Dependency vulnerability scan
        if: env.SNYK_TOKEN != ''
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN || '' }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: Alternative security scan
        if: env.SNYK_TOKEN == ''
        run: |
          echo "Snyk token not available, running alternative security checks..."
          pnpm audit --audit-level moderate || echo "Security audit completed with findings"

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Testing Suite
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Python dependencies
        run: |
          pip install uv
          uv sync

      - name: Run tests
        run: pnpm run test:${{ matrix.test-type }}

      - name: Upload coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: './.lighthouserc.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Bundle size analysis
        run: pnpm run analyze:bundle

      - name: Performance regression test
        run: pnpm run test:performance

  # Build and Deploy
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality-gates, security, test]
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Build Docker image
        run: |
          docker build -t cortex-os:${{ github.sha }} .
          docker build -t cortex-os:latest .

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-container cortex-os:${{ github.sha }}
          sleep 10
          docker exec test-container curl -f http://localhost:3000/health || exit 1
          docker stop test-container

      - name: Export build artifacts
        run: |
          mkdir -p ./artifacts
          cp -r ./dist ./artifacts/
          tar -czf ./artifacts/build-${{ github.sha }}.tar.gz ./dist

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./artifacts/
          retention-days: 7

  # Container Security Scan
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: docker build -t cortex-os:scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cortex-os:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, container-security]
    if: github.ref == 'refs/heads/develop'
    # environment: staging  # Uncomment when staging environment is configured
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add your staging deployment commands here
          echo "Staging deployment completed"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, container-security]
    if: github.ref == 'refs/heads/main'
    # environment: production  # Uncomment when production environment is configured
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # Add your production deployment commands here
          echo "Production deployment completed"

      - name: Post-deployment health check
        run: |
          echo "Running post-deployment health checks"
          # Add health check commands here

  # Weekly security scan
  weekly-security:
    name: Weekly Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4

      - name: Full security audit
        run: |
          echo "Running comprehensive security audit"
          # Add comprehensive security scanning commands
