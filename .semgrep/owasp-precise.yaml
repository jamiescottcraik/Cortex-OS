rules:
  - id: owasp-top-10-2021-a03-injection-db
    patterns:
      - pattern-either:
          # Direct use of user input in SQL queries without parameterization
          - pattern: |
              $DB.query($QUERY + $USER_INPUT + $QUERY2)
          - pattern: |
              $DB.execute($QUERY + $USER_INPUT + $QUERY2)
          # Direct use of user input in SQL prepare statements
          - pattern: |
              $DB.prepare($QUERY + $USER_INPUT)
    message: "Potential SQL Injection: Direct concatenation of user input in database queries"
    languages: [javascript, typescript, python]
    severity: ERROR

  - id: owasp-top-10-2021-a03-injection-command
    patterns:
      - pattern-either:
          # Direct use of user input in shell commands
          - pattern: |
              subprocess.run($USER_INPUT, ...)
          - pattern: |
              os.system($USER_INPUT)
          # Command injection through string formatting with user input
          - pattern: |
              subprocess.run($CMD.format($USER_INPUT), ...)
          - pattern: |
              subprocess.run(f"...{$USER_INPUT}...", ...)
    message: "Potential Command Injection: Direct use of user input in system commands"
    languages: [python]
    severity: ERROR

  - id: owasp-top-10-2021-a03-injection-code
    patterns:
      - pattern-either:
          # Direct execution of user input as code
          - pattern: |
              eval($USER_INPUT)
          - pattern: |
              exec($USER_INPUT)
          - pattern: |
              new Function($USER_INPUT)
    message: "Potential Code Injection: Direct execution of user input as code"
    languages: [javascript, typescript, python]
    severity: ERROR

  - id: owasp-top-10-2021-a10-server-side-request-forgery
    patterns:
      - pattern-either:
          - pattern: |
              urllib.request.urlopen($USER_INPUT)
          - pattern: |
              fetch($USER_INPUT)
          - pattern: |
              axios.get($USER_INPUT)
    message: "Potential Server-Side Request Forgery: Direct use of user input in HTTP requests"
    languages: [python, javascript, typescript]
    severity: ERROR