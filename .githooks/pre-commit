#!/usr/bin/env bash
set -euo pipefail

# Pre-commit hooks for Cortex-OS
# Ensures code quality and standards before commits

# Ensure efficiency tools are installed (no-op in CI or if opted-out)
if [ "${CI:-}" != "true" ] && [ "${GITHUB_ACTIONS:-}" != "true" ] && [ "${CORTEX_EFFICIENCY_SETUP_SKIP:-}" != "1" ] && [ "${CORTEX_EFFICIENCY_SETUP_SKIP:-}" != "true" ]; then
    if [ -x scripts/ensure-efficiency-tools.sh ]; then
        scripts/ensure-efficiency-tools.sh || true
    fi
fi

echo "🔍 Running pre-commit checks..."

# 1. Check for secrets and sensitive data
echo "🔐 Checking for secrets..."
if command -v gitleaks >/dev/null 2>&1; then
    if [ -f .gitleaks.toml ]; then
        gitleaks detect --source . --config .gitleaks.toml --no-git || {
            echo "❌ Secrets detected! Please remove them before committing."
            exit 1
        }
    else
        gitleaks detect --source . --no-git || {
            echo "❌ Secrets detected! Please remove them before committing."
            exit 1
        }
    fi
fi

# 2. Run linting
echo "🧹 Running linter..."
if ! mise run lint; then
    echo "❌ Linting failed! Please fix the issues before committing."
    exit 1
fi

# 3. Run formatting on staged files only (faster, avoids repo-wide noise)
echo "📝 Checking code formatting (staged files)..."
if ! pnpm biome:staged; then
    echo "❌ Code formatting issues detected! Run 'pnpm biome:staged' or 'pnpm format' to fix."
    exit 1
fi

# 4. Run type checking
echo "🔧 Running type checking..."
if ! mise run typecheck; then
    echo "❌ Type checking failed! Please fix the issues before committing."
    exit 1
fi

# 5. Run quick tests
echo "🧪 Running quick tests..."
if ! pnpm test:security:unit; then
    echo "❌ Security unit tests failed! Please fix the issues before committing."
    exit 1
fi

# 6. Check for large files (cross-platform)
echo "📊 Checking for large files..."
large_files=$(git diff --cached --name-only | while read -r f; do
    [ -f "$f" ] || continue
    size=$(wc -c < "$f" | tr -d ' ')
    if [ "${size:-0}" -gt 1048576 ]; then echo "$f"; fi
done)
if [ -n "$large_files" ]; then
    echo "❌ Large files detected (>1MB):"
    echo "$large_files"
    echo "Please use Git LFS for large files or exclude them."
    exit 1
fi

# 7. Check commit message format
echo "📋 Checking commit message..."
if [ -f .git/COMMIT_EDITMSG ]; then
    if ! grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build)(\(.+\))?: .{1,50}" .git/COMMIT_EDITMSG; then
        echo "❌ Invalid commit message format!"
        echo "Please use: type(scope): description"
        echo "Types: feat, fix, docs, style, refactor, test, chore, perf, ci, build"
        exit 1
    fi
fi

# 8. Markdown lint only for changed markdown files
echo "📘 Running markdownlint on staged markdown files..."
md_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\\.md$' || true)
if [ -n "${md_files}" ]; then
    # Filter out large legacy/report/security/analysis docs unless explicitly staged for cleanup
    filtered_md_files=$(echo "${md_files}" | grep -Ev '^(docs/(analysis|reports|security|legacy)/|docs/mcp\.|docs/mlx-|docs/security/)' || true)
    if [ -z "${filtered_md_files}" ]; then
        echo "ℹ️  Only legacy/large docs changed; skipping markdownlint (use pnpm docs:lint:all for full scan)."
    else
        tmp_list=$(mktemp)
        echo "# markdownlint-cli2 configuration input" > "$tmp_list"
        while IFS= read -r f; do
            if [ -f "$f" ]; then
                echo "$f" >> "$tmp_list"
            fi
        done <<< "$filtered_md_files"
        if [ -s "$tmp_list" ]; then
            if command -v markdownlint-cli2 >/dev/null 2>&1; then
                markdownlint-cli2 --config .markdownlint-cli2.yaml "@$tmp_list" || {
                    echo "❌ Markdown lint failed. Fix issues or add justified suppressions."
                    rm -f "$tmp_list"
                    exit 1
                }
            else
                npx --yes markdownlint-cli2 --config .markdownlint-cli2.yaml "@$tmp_list" || {
                    echo "❌ Markdown lint failed. Fix issues or add justified suppressions."
                    rm -f "$tmp_list"
                    exit 1
                }
            fi
        else
            echo "ℹ️  No curated markdown files to lint (filtered)."
        fi
        rm -f "$tmp_list"
    fi
else
    echo "ℹ️  No staged markdown files to lint."
fi

echo "✅ All pre-commit checks passed!"
