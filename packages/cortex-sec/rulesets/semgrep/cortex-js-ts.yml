rules:
  - id: cortex.node.cmd_injection.child_process
    message: Untrusted command execution via child_process
    severity: ERROR
    languages: [javascript, typescript]
    metadata:
      category: cmd-injection
      fix: Use execFile/spawn with args array, avoid shell, validate/escape inputs.
    patterns:
      - pattern-either:
          - pattern: child_process.exec($CMD, ...)
          - pattern: require('child_process').exec($CMD, ...)
          - pattern: child_process.execSync($CMD, ...)
          - pattern: require('child_process').execSync($CMD, ...)
          - pattern: child_process.spawn($CMD, $ARGS, { ... shell: true, ... })
          - pattern: child_process.spawnSync($CMD, $ARGS, { ... shell: true, ... })
      - metavariable-pattern:
          metavariable: $CMD
          pattern-regex: (?i)(user|input|prompt|msg|cmd|query|arg|payload)
  - id: cortex.node.eval_like
    message: Dynamic eval or Function constructor detected
    severity: ERROR
    languages: [javascript, typescript]
    metadata: { category: insecure-eval, fix: Avoid eval/Function; use safe parsing or whitelists. }
    pattern-either:
      - pattern: eval($X)
      - pattern: new Function($X, ...)
      - pattern: vm.runInNewContext($X, ...)
  - id: cortex.web.untrusted_url_request
    message: Potential SSRF / open redirect via untrusted URL
    severity: WARNING
    languages: [javascript, typescript]
    metadata: { category: ssrf, fix: Allowlist hosts, parse/validate URL, block localhost/169.254.169.254. }
    patterns:
      - pattern-either:
          - pattern: fetch($URL, ...)
          - pattern: axios($URL, ...)
          - pattern: axios.get($URL, ...)
          - pattern: request($URL, ...)
      - metavariable-pattern:
          metavariable: $URL
          pattern-regex: (?i)(user|input|url|href|link|target|endpoint)
  - id: cortex.path.traversal.join
    message: Path traversal risk when joining user-controlled segments
    severity: ERROR
    languages: [javascript, typescript]
    metadata: { category: path-traversal, fix: Normalize, forbid "..", restrict roots, use path.resolve + allowlist. }
    patterns:
      - pattern: path.join($A, $B)
      - metavariable-pattern:
          metavariable: $B
          pattern-regex: (?i)(user|input|file|path|name)
  - id: cortex.llm.insecure_tool_invocation
    message: Unvalidated tool/command call tied to LLM output
    severity: WARNING
    languages: [javascript, typescript]
    metadata:
      category: llm-tooling
      fix: Add allowlisted tools, structured args with schema validation (zod), human-in-the-loop for dangerous ops.
    patterns:
      - pattern-either:
          - pattern: $TOOL($LLM_OUT, ...)
          - pattern: child_process.exec($LLM_OUT, ...)
      - metavariable-pattern:
          metavariable: $LLM_OUT
          pattern-regex: (?i)(llm|ai|model|completion|response|assistant|tool_call)
  - id: cortex.secrets.generic_aws
    message: Possible AWS secret or access key in code
    severity: ERROR
    languages: [javascript, typescript]
    metadata: { category: secrets, fix: Remove, rotate, use env + secret manager. }
    pattern-regex: (AKIA[0-9A-Z]{16}|aws(.{0,20})?(secret|access)[-_ ]?key)
  - id: cortex.template.injection.unsafe_interpolation
    message: Templating interpolation may lead to injection if input is untrusted
    severity: WARNING
    languages: [javascript, typescript]
    metadata: { category: template-injection, fix: Escape user input or use safe templating APIs. }
    pattern-regex: [`'"']\s*\$\{[^}]+\}\s*[`'"']
  - id: cortex.zod.schema.missing
    message: Zod schema validation missing for untrusted data
    severity: WARNING
    languages: [javascript, typescript]
    metadata:
      category: schema-validation
      fix: Wrap input with zod schema parse/validate.
    patterns:
      - pattern-either:
          - pattern: $INPUT
      - metavariable-pattern:
          metavariable: $INPUT
          pattern-regex: (?i)(req\.body|req\.query|process\.env|user|input|data)
