/**
 * @file MLX Model Adapter Implementation
 * @description Adapter for MLX models with local model server integration
 */

import axios, { AxiosError, AxiosInstance } from 'axios';
import { z } from 'zod';
import {
  AIModelAdapter,
  AIRequest,
  AIResponse,
  AIResponseSchema,
  EmbeddingRequest,
  EmbeddingResponse,
  EmbeddingResponseSchema,
  RerankingRequest,
  RerankingResponse,
  RerankingResponseSchema,
} from './adapter.js';
import { ModelConfig } from './config.js';

/**
 * MLX API request/response schemas
 */
const MLXChatRequestSchema = z.object({
  model: z.string(),
  messages: z.array(
    z.object({
      role: z.enum(['system', 'user', 'assistant']),
      content: z.string(),
    }),
  ),
  max_tokens: z.number().optional(),
  temperature: z.number().optional(),
  stream: z.boolean().default(false),
});

const MLXEmbeddingRequestSchema = z.object({
  model: z.string(),
  input: z.string(),
  encoding_format: z.enum(['float', 'base64']).default('float'),
});

/**
 * MLX Model Adapter
 */
export class MLXModelAdapter implements AIModelAdapter {
  private readonly config: ModelConfig;
  private readonly client: AxiosInstance;
  private readonly stats = {
    totalRequests: 0,
    successfulRequests: 0,
    totalResponseTime: 0,
    lastUsed: null as Date | null,
    isAvailable: true,
  };

  constructor(config: ModelConfig) {
    this.config = config;
    this.client = axios.create({
      baseURL: config.endpoint || 'http://localhost:8080',
      timeout: config.timeout,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }

  getName(): string {
    return `MLX-${this.config.model}`;
  }

  getVersion(): string {
    return '1.0.0';
  }

  async isHealthy(): Promise<boolean> {
    try {
      const response = await this.client.get('/health', { timeout: 5000 });
      this.stats.isAvailable = response.status === 200;
      return this.stats.isAvailable;
    } catch (error) {
      console.warn(`MLX health check failed: ${this.getErrorMessage(error)}`);
      this.stats.isAvailable = false;
      return false;
    }
  }

  async generateText(request: AIRequest): Promise<AIResponse> {
    const startTime = Date.now();
    this.stats.totalRequests++;
    this.stats.lastUsed = new Date();

    try {
      // Prepare MLX chat request
      const mlxRequest = MLXChatRequestSchema.parse({
        model: this.config.model,
        messages: [
          {
            role: 'system',
            content: this.getSystemPrompt(request.capability),
          },
          {
            role: 'user',
            content: request.prompt,
          },
        ],
        max_tokens: request.maxTokens || this.config.maxTokens,
        temperature: request.temperature || this.config.temperature,
      });

      const response = await this.client.post('/v1/chat/completions', mlxRequest);
      const processingTime = Date.now() - startTime;

      this.stats.successfulRequests++;
      this.stats.totalResponseTime += processingTime;

      const content = response.data.choices[0]?.message?.content || '';
      const confidence = this.calculateConfidence(response.data);

      return AIResponseSchema.parse({
        content,
        confidence,
        metadata: {
          usage: response.data.usage,
          model: response.data.model,
        },
        modelUsed: this.getName(),
        processingTime,
        success: true,
      });
    } catch (error) {
      const processingTime = Date.now() - startTime;
      this.stats.totalResponseTime += processingTime;

      throw new Error(`MLX generation failed: ${this.getErrorMessage(error)}`);
    }
  }

  async generateEmbedding(request: EmbeddingRequest): Promise<EmbeddingResponse> {
    const startTime = Date.now();
    this.stats.totalRequests++;
    this.stats.lastUsed = new Date();

    try {
      const mlxRequest = MLXEmbeddingRequestSchema.parse({
        model: this.config.model,
        input: request.text,
      });

      const response = await this.client.post('/v1/embeddings', mlxRequest);
      const processingTime = Date.now() - startTime;

      this.stats.successfulRequests++;
      this.stats.totalResponseTime += processingTime;

      const embedding = response.data.data[0]?.embedding || [];
      const dimensions = embedding.length;

      return EmbeddingResponseSchema.parse({
        embedding,
        dimensions,
        modelUsed: this.getName(),
        processingTime,
        success: true,
      });
    } catch (error) {
      const processingTime = Date.now() - startTime;
      this.stats.totalResponseTime += processingTime;

      throw new Error(`MLX embedding failed: ${this.getErrorMessage(error)}`);
    }
  }

  async rerank(request: RerankingRequest): Promise<RerankingResponse> {
    const startTime = Date.now();
    this.stats.totalRequests++;
    this.stats.lastUsed = new Date();

    try {
      // For reranking, we'll use the chat API with a specialized prompt
      const rerankPrompt = this.buildRerankPrompt(request.query, request.items);

      const chatRequest: AIRequest = {
        prompt: rerankPrompt,
        capability: 'priority_ranking' as any,
        maxTokens: 2048,
        temperature: 0.1,
      };

      const response = await this.generateText(chatRequest);
      const processingTime = Date.now() - startTime;

      // Parse the reranking response
      const rankedItems = this.parseRerankingResponse(response.content, request.items);

      return RerankingResponseSchema.parse({
        rankedItems: rankedItems.slice(0, request.topK || 10),
        modelUsed: this.getName(),
        processingTime,
        success: true,
      });
    } catch (error) {
      const processingTime = Date.now() - startTime;
      this.stats.totalResponseTime += processingTime;

      throw new Error(`MLX reranking failed: ${this.getErrorMessage(error)}`);
    }
  }

  getStats() {
    return {
      totalRequests: this.stats.totalRequests,
      successfulRequests: this.stats.successfulRequests,
      averageResponseTime:
        this.stats.totalRequests > 0 ? this.stats.totalResponseTime / this.stats.totalRequests : 0,
      lastUsed: this.stats.lastUsed,
      isAvailable: this.stats.isAvailable,
    };
  }

  async cleanup(): Promise<void> {
    // MLX doesn't require special cleanup
  }

  /**
   * Get system prompt based on capability
   */
  private getSystemPrompt(capability: string): string {
    switch (capability) {
      case 'semantic_routing':
        return 'You are an expert at analyzing message content and determining optimal routing strategies for agent-to-agent communication. Respond with clear, actionable routing decisions.';

      case 'message_validation':
        return 'You are a security expert specializing in message validation and anomaly detection. Analyze the content for potential issues and respond with validation results.';

      case 'load_balancing':
        return 'You are a load balancing specialist. Analyze message complexity and agent workloads to make optimal distribution decisions.';

      case 'priority_ranking':
        return 'You are an expert at ranking and prioritizing items based on relevance, urgency, and business value. Provide clear ranking rationale.';

      default:
        return 'You are a helpful AI assistant specialized in agent-to-agent communication processing.';
    }
  }

  /**
   * Calculate confidence score from response
   */
  private calculateConfidence(responseData: any): number {
    // Use logprobs or other metrics if available
    const usage = responseData.usage;
    if (usage?.completion_tokens && usage?.prompt_tokens) {
      // Simple heuristic: shorter responses with longer prompts tend to be more confident
      const ratio = usage.prompt_tokens / (usage.completion_tokens + usage.prompt_tokens);
      return Math.min(0.95, Math.max(0.1, ratio));
    }
    return 0.8; // Default confidence
  }

  /**
   * Build reranking prompt
   */
  private buildRerankPrompt(query: string, items: string[]): string {
    const itemsList = items.map((item, index) => `${index}: ${item}`).join('\n');

    return `Rank the following items by relevance to the query "${query}".
Return only the indices in order of relevance (most relevant first), separated by commas.

Items:
${itemsList}

Ranking (indices only):`;
  }

  /**
   * Parse reranking response
   */
  private parseRerankingResponse(response: string, originalItems: string[]) {
    try {
      // Extract indices from response
      const indices = response
        .trim()
        .split(/[,\s]+/)
        .map((idx) => parseInt(idx.trim()))
        .filter((idx) => !isNaN(idx) && idx >= 0 && idx < originalItems.length);

      return indices.map((index, rank) => ({
        index,
        score: 1.0 - rank / indices.length, // Higher score for higher rank
        content: originalItems[index],
      }));
    } catch (error) {
      console.warn(`Failed to parse reranking response: ${this.getErrorMessage(error)}`);
      // Fallback: return original order
      return originalItems.map((content, index) => ({
        index,
        score: 1.0 - index / originalItems.length,
        content,
      }));
    }
  }

  /**
   * Extract error message from axios error
   */
  private getErrorMessage(error: unknown): string {
    if (error instanceof AxiosError) {
      return error.response?.data?.error?.message || error.message;
    }
    return error instanceof Error ? error.message : 'Unknown error';
  }
}
