# A2A Protocol Server - Docker Compose Configuration
# For development and testing with OrbStack

version: '3.8'

services:
  # A2A Protocol Server
  a2a-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: a2a-protocol-server
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    networks:
      - a2a-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.a2a.rule=Host(`a2a.local`)"
      - "traefik.http.services.a2a.loadbalancer.server.port=3000"

  # Development server with hot reload
  a2a-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: a2a-dev-server
    profiles: ["dev"]
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOST=0.0.0.0
    volumes:
      - .:/app
      - /app/node_modules
    command: ["sh", "-c", "pnpm install && pnpm run dev:server"]
    networks:
      - a2a-network

  # Redis for distributed task storage (optional)
  redis:
    image: redis:7-alpine
    container_name: a2a-redis
    profiles: ["redis", "full"]
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - a2a-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Nginx proxy for load balancing (optional)
  nginx:
    image: nginx:alpine
    container_name: a2a-nginx
    profiles: ["nginx", "full"]
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - a2a-server
    networks:
      - a2a-network

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: a2a-prometheus
    profiles: ["monitoring", "full"]
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - a2a-network

  # Grafana dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: a2a-grafana
    profiles: ["monitoring", "full"]
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - a2a-network

networks:
  a2a-network:
    driver: bridge
    name: a2a-network

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
