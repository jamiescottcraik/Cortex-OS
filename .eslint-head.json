[{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/a2a/doctor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/a2a/list.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/a2a/send.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/agent/create.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/code.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/ctl/check.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/eval/gate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/mcp/add.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/mcp/bridge.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/mcp/doctor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/mcp/get.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/mcp/integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/mcp/list.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/mcp/marketplace-client.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/mcp/marketplace-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/mcp/marketplace.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/mcp/marketplace.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/mcp/remove.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/mcp/search.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/mcp/security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/mcp/show.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/mcp/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/rag/eval.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/rag/ingest.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/rag/query.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/simlab/bench.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/simlab/list.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/simlab/report.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/commands/simlab/run.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/src/types-shims.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/tsup.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-cli/vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-marketplace-api/src/ai/mlx-service.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jamiecraik/.Cortex-OS/apps/cortex-marketplace-api/src/ai/mlx-service.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/ban-ts-comment').","line":206,"column":9,"severity":1,"nodeType":null,"fix":{"range":[7168,7229],"text":" "}},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":231,"column":41,"nodeType":"BlockStatement","messageId":"unexpected","endLine":231,"endColumn":43,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[8408,8408],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/ban-ts-comment').","line":250,"column":9,"severity":1,"nodeType":null,"fix":{"range":[9053,9114],"text":" "}},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":279,"column":41,"nodeType":"BlockStatement","messageId":"unexpected","endLine":279,"endColumn":43,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[10471,10471],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"/**\n * @file MLX Integration for Marketplace\n * @description Production-ready MLX model integration for semantic search and safety\n */\n\nimport type { ChildProcess } from \"node:child_process\";\nimport { unlink, writeFile } from \"node:fs/promises\";\nimport os from \"node:os\";\nimport path from \"node:path\";\nimport { type ServerManifest, ServerManifestSchema } from \"../types.js\";\n\nexport interface MLXConfig {\n\tmodelsPath: string;\n\tpythonPath: string;\n\tembeddingModel: \"qwen3-0.6b\" | \"qwen3-4b\" | \"qwen3-8b\";\n\tenabled: boolean;\n}\n\nexport interface EmbeddingResult {\n\tembedding: number[];\n\tmodel: string;\n\tdimensions: number;\n}\n\nexport interface SafetyResult {\n\tsafe: boolean;\n\tcategories: string[];\n\tconfidence: number;\n}\n\nexport interface SemanticSearchResult {\n\tserver: ServerManifest;\n\tsimilarity: number;\n\trelevanceScore: number;\n}\n\nexport const createMLXService = (config: MLXConfig) => {\n\tif (!config.enabled) return null;\n\n\tconst runGenerateEmbedding = async (\n\t\ttext: string,\n\t): Promise<EmbeddingResult> => {\n\t\tconst modelSize = config.embeddingModel.replace(\"qwen3-\", \"\").toUpperCase();\n\t\tconst script = `\nimport json, sys\nimport mlx.core as mx\nfrom transformers import AutoTokenizer, AutoModel\n\nmodel_name = \"Qwen/Qwen3-Embedding-${modelSize}\"\ntext = \"\"\"${text.replace(/\"/g, '\\\\\"').replace(/\\n/g, \" \")}\"\"\"\n\ntry:\n    tokenizer = AutoTokenizer.from_pretrained(model_name, cache_dir=\"${config.modelsPath}\", local_files_only=True, trust_remote_code=True)\n    model = AutoModel.from_pretrained(model_name, cache_dir=\"${config.modelsPath}\", local_files_only=True, trust_remote_code=True)\n    inputs = tokenizer(text, return_tensors=\"np\", padding=True, truncation=True, max_length=512)\n    input_ids = mx.array(inputs[\"input_ids\"])\n    attention_mask = mx.array(inputs[\"attention_mask\"])\n    outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n    mask = mx.expand_dims(attention_mask, -1)\n    summed = mx.sum(outputs.last_hidden_state * mask, axis=1)\n    counts = mx.sum(mask, axis=1)\n    embedding = (summed / mx.maximum(counts, 1e-9)).tolist()[0]\n    print(json.dumps({\"embedding\": embedding, \"dimensions\": len(embedding), \"model\": model_name}))\nexcept Exception as e:\n    print(json.dumps({\"error\": str(e)}), file=sys.stderr)\n    sys.exit(1)\n`;\n\t\tconst result = await executeMLXScript(script, config.pythonPath);\n\t\treturn parseEmbeddingResult(result, config.embeddingModel);\n\t};\n\n\tconst semanticSearch = async (\n\t\tquery: string,\n\t\tservers: ServerManifest[],\n\t): Promise<SemanticSearchResult[]> => {\n\t\tconst queryEmbedding = await runGenerateEmbedding(query);\n\t\tconst results = await Promise.all(\n\t\t\tservers.map(async (server) => {\n\t\t\t\tlet validated: ServerManifest;\n\t\t\t\ttry {\n\t\t\t\t\tvalidated = ServerManifestSchema.parse(server);\n\t\t\t\t} catch {\n\t\t\t\t\treturn { server, similarity: 0, relevanceScore: 0 };\n\t\t\t\t}\n\t\t\t\tconst serverText = `${validated.name} ${validated.description} ${validated.tags?.join(\" \") || \"\"}`;\n\t\t\t\tconst serverEmbedding = await runGenerateEmbedding(serverText);\n\t\t\t\tconst similarity = cosineSimilarity(\n\t\t\t\t\tqueryEmbedding.embedding,\n\t\t\t\t\tserverEmbedding.embedding,\n\t\t\t\t);\n\t\t\t\tconst relevanceScore = calculateRelevanceScore(similarity, validated);\n\t\t\t\treturn { server: validated, similarity, relevanceScore };\n\t\t\t}),\n\t\t);\n\t\treturn results.sort((a, b) => b.relevanceScore - a.relevanceScore);\n\t};\n\n\tconst rerank = async (\n\t\tquery: string,\n\t\tservers: ServerManifest[],\n\t): Promise<SemanticSearchResult[]> => {\n\t\tconst script = `\nimport json, sys\nimport mlx.core as mx\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification\n\ndata = json.loads(sys.stdin.read())\nquery = data[\"query\"]\ntexts = data[\"docs\"]\nmodel_name = \"Qwen/Qwen3-Reranker-4B\"\n\ntry:\n    tokenizer = AutoTokenizer.from_pretrained(model_name, cache_dir=\"${config.modelsPath}\", local_files_only=True, trust_remote_code=True)\n    model = AutoModelForSequenceClassification.from_pretrained(model_name, cache_dir=\"${config.modelsPath}\", local_files_only=True, trust_remote_code=True)\n    scores = []\n    for doc in texts:\n        inputs = tokenizer(query, doc, return_tensors=\"np\", padding=True, truncation=True, max_length=512)\n        ids = mx.array(inputs[\"input_ids\"])\n        mask = mx.array(inputs[\"attention_mask\"])\n        logits = model(input_ids=ids, attention_mask=mask).logits\n        score = float(mx.sigmoid(logits)[0][0])\n        scores.append(score)\n    print(json.dumps({\"scores\": scores}))\nexcept Exception as e:\n    print(json.dumps({\"error\": str(e)}), file=sys.stderr)\n    sys.exit(1)\n`;\n\t\tconst docs = servers.map(\n\t\t\t(s) => `${s.name} ${s.description} ${s.tags?.join(\" \") || \"\"}`,\n\t\t);\n\t\tconst payload = JSON.stringify({ query, docs });\n\t\tconst result = await executeMLXScriptWithInput(\n\t\t\tscript,\n\t\t\tconfig.pythonPath,\n\t\t\tpayload,\n\t\t);\n\t\tconst scores = JSON.parse(result).scores as number[];\n\t\treturn servers\n\t\t\t.map((server, i) => ({\n\t\t\t\tserver,\n\t\t\t\tsimilarity: 0,\n\t\t\t\trelevanceScore: scores[i] || 0,\n\t\t\t}))\n\t\t\t.sort((a, b) => b.relevanceScore - a.relevanceScore);\n\t};\n\n\tconst validateSafety = async (content: string): Promise<SafetyResult> => {\n\t\tconst script = `\nimport re\nfrom typing import List, Tuple\n\nUNSAFE_PATTERNS = {\n    'violence': [r'\\\\b(kill|murder|weapon|bomb|attack|violence)\\\\b'],\n    'hate_speech': [r'\\\\b(hate|racist|discrimination|offensive)\\\\b'],\n    'illegal_activity': [r'\\\\b(illegal|criminal|fraud|piracy|hack|crack|exploit)\\\\b'],\n    'privacy_violation': [r'\\\\b(steal.*data|exfiltrat|unauthorized.*access)\\\\b'],\n    'system_access': [r'\\\\b(system.*exec|root.*access|admin.*privilege)\\\\b']\n}\n\nSAFE_INDICATORS = [\n    r'\\\\b(education|learning|help|assist|development|programming)\\\\b',\n    r'\\\\b(open.*source|MIT|Apache|GPL|documentation)\\\\b'\n]\n\ncontent = \"\"\"${content.replace(/\"/g, '\\\\\"').replace(/\\n/g, \" \")}\"\"\"\nflagged = []\nconf_scores = []\nfor cat, pats in UNSAFE_PATTERNS.items():\n    matches = sum(len(re.findall(p, content.lower(), re.IGNORECASE)) for p in pats)\n    if matches > 0:\n        flagged.append(cat)\n        conf_scores.append(min(matches * 0.3, 0.9))\n\nsafe_inds = sum(len(re.findall(p, content.lower(), re.IGNORECASE)) for p in SAFE_INDICATORS)\nis_safe = len(flagged) == 0 or safe_inds > len(flagged)\nconfidence = 0.8 + min(safe_inds * 0.05, 0.2) if is_safe else (sum(conf_scores) / len(conf_scores) if conf_scores else 0.5)\nprint(f\"SAFETY_RESULT:{str(is_safe).lower()}\")\nprint(f\"CATEGORIES:{','.join(flagged)}\")\nprint(f\"CONFIDENCE:{confidence:.3f}\")\n`;\n\t\ttry {\n\t\t\tconst result = await executeMLXScript(script, config.pythonPath);\n\t\t\treturn parseSafetyResult(result);\n\t\t} catch (error) {\n\t\t\tconsole.warn(\"MLX safety validation failed:\", error);\n\t\t\treturn { safe: true, categories: [], confidence: 0.5 };\n\t\t}\n\t};\n\n\treturn {\n\t\tgenerateEmbedding: runGenerateEmbedding,\n\t\tsemanticSearch,\n\t\trerank,\n\t\tvalidateSafety,\n\t};\n};\n\nasync function executeMLXScript(\n        script: string,\n        pythonPath: string,\n): Promise<string> {\n        const tmpDir = os.tmpdir();\n        const scriptPath = path.join(tmpDir, `mlx-script-${Date.now()}.py`);\n        await writeFile(scriptPath, script);\n        // Use the centralized Python spawner so env merging and PYTHONPATH handling are consistent\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        const { spawnPythonProcess } = await import(\n                \"../../../../libs/python/exec.js\"\n        );\n        try {\n                return await new Promise((resolve, reject) => {\n                        const child: ChildProcess = spawnPythonProcess([scriptPath], {\n                                python: pythonPath,\n                        });\n                        let output = \"\";\n                        let error = \"\";\n                        child.stdout?.on(\"data\", (d) => {\n                                output += d.toString();\n                        });\n                        child.stderr?.on(\"data\", (d) => {\n                                error += d.toString();\n                        });\n                        child.on(\"close\", (code) =>\n                                code === 0\n                                        ? resolve(output)\n                                        : reject(new Error(`Script failed: ${error}`)),\n                        );\n                        const to = setTimeout(() => {\n                                try {\n                                        child.kill();\n                                } catch {}\n                                reject(new Error(\"Script timeout\"));\n                        }, 10000);\n                        // clear timeout if process exits\n                        child.on(\"exit\", () => clearTimeout(to));\n                });\n        } finally {\n                await unlink(scriptPath).catch(() => {});\n        }\n}\n\nasync function executeMLXScriptWithInput(\n        script: string,\n        pythonPath: string,\n        input: string,\n): Promise<string> {\n        const tmpDir = os.tmpdir();\n        const scriptPath = path.join(tmpDir, `mlx-script-${Date.now()}.py`);\n        await writeFile(scriptPath, script);\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        const { spawnPythonProcess } = await import(\n                \"../../../../libs/python/exec.js\"\n        );\n        try {\n                return await new Promise((resolve, reject) => {\n                        const child: ChildProcess = spawnPythonProcess([scriptPath], {\n                                python: pythonPath,\n                        });\n                        let output = \"\";\n                        let error = \"\";\n                    