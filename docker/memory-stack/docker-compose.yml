version: '3.8'

services:
  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:v1.8.3
    container_name: cortex-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"  # REST API
      - "6334:6334"  # gRPC
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "curl", "-fSs", "http://localhost:6333/collections"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - cortex-network

  # MCP Server (STDIO + HTTP/streamable)
  cortex-mcp:
    build:
      context: ../../
      dockerfile: packages/mcp-server/Dockerfile
    container_name: cortex-mcp
    restart: unless-stopped
    ports:
      - "9600:9600"  # HTTP transport
    environment:
      - TRANSPORT=http
      - PORT=9600
      - HOST=0.0.0.0
      # Database config
      - MEMORY_DB_PATH=/data/unified-memories.db
      # Qdrant config
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_COLLECTION=local_memory_v1
      - QDRANT_API_KEY=${QDRANT_API_KEY:-}
      # Embedding config
      - EMBED_DIM=384
      - SIMILARITY=Cosine
      # Performance
      - MEMORY_DEFAULT_LIMIT=10
      - MEMORY_MAX_LIMIT=100
      - MEMORY_DEFAULT_THRESHOLD=0.5
      - MEMORY_HYBRID_WEIGHT=0.6
      - MEMORY_ENABLE_CIRCUIT_BREAKER=true
      - MEMORY_CIRCUIT_BREAKER_THRESHOLD=5
      - MEMORY_QUEUE_CONCURRENCY=10
      # Logging
      - MEMORY_LOG_LEVEL=info
    volumes:
      - memory_data:/data
      - ./logs:/app/logs
    depends_on:
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fSs", "http://localhost:9600/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - cortex-network

  # REST API Server
  cortex-rest-api:
    build:
      context: ../../
      dockerfile: packages/memory-rest-api/Dockerfile
    container_name: cortex-rest-api
    restart: unless-stopped
    ports:
      - "9700:9700"
    environment:
      - PORT=9700
      - HOST=0.0.0.0
      # Database config
      - MEMORY_DB_PATH=/data/unified-memories.db
      # Qdrant config
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_COLLECTION=local_memory_v1
      - QDRANT_API_KEY=${QDRANT_API_KEY:-}
      # Embedding config
      - EMBED_DIM=384
      - SIMILARITY=Cosine
      # API config
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - ENABLE_SWAGGER=${ENABLE_SWAGGER:-true}
      # Rate limiting
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX=1000
      # Logging
      - MEMORY_LOG_LEVEL=info
      - API_LOG_LEVEL=info
    volumes:
      - memory_data:/data
      - ./logs:/app/logs
    depends_on:
      qdrant:
        condition: service_healthy
      cortex-mcp:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fSs", "http://localhost:9700/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - cortex-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: cortex-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - cortex-mcp
      - cortex-rest-api
    networks:
      - cortex-network
    profiles:
      - production

volumes:
  qdrant_data:
    driver: local
  memory_data:
    driver: local

networks:
  cortex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16