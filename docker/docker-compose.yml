services:
  # Observability - Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.53
    ports:
      - '16686:16686' # Jaeger UI
      - '6831:6831/udp' # Agent
      - '4317:4317' # OTLP gRPC
      - '4318:4318' # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - cortex-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vector Database - Qdrant for embeddings and vector search
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - '6333:6333' # HTTP API
      - '6334:6334' # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - cortex-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:6333/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Graph Database - Neo4j for knowledge graphs and relationships
  neo4j:
    image: neo4j:5.15-community
    ports:
      - '7474:7474' # HTTP
      - '7687:7687' # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./infra/neo4j/neo4j.conf:/conf/neo4j.conf:ro
    env_file:
      - ./env/common.env
    environment:
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
    networks:
      - cortex-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "cortexdev", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3


  # Local AI - Ollama for local LLM inference
  ollama:
    image: ollama/ollama:0.5.4
    ports:
      - '11434:11434'
    volumes:
      - ollama_data:/root/.ollama
      # Mount Hugging Face cache for model persistence
      - ${HUGGINGFACE_CACHE_DIR:-/Volumes/ExternalSSD/huggingface_cache}:/app/huggingface_cache
    environment:
      - OLLAMA_HOST=0.0.0.0
      - HUGGINGFACE_CACHE_DIR=/app/huggingface_cache
      - HF_HOME=/app/huggingface_cache
    networks:
      - cortex-network
    restart: unless-stopped
  # Uncomment the following lines if you have GPU support
  # deploy:
  #   resources:
  #     reservations:
  #       devices:
  #         - driver: nvidia
  #           count: all
  #           capabilities: [gpu]

  # Carbon Monitoring - Scaphandre Bridge Service (GPL isolation)
  scaphandre-bridge:
    build:
      context: ./services/scaphandre-bridge
      dockerfile: Dockerfile
    ports:
      - '8080:8080' # Prometheus metrics
    privileged: true # Required for hardware monitoring
    volumes:
      - /sys:/sys:ro
      - /proc:/proc:ro
    environment:
      - SCAPHANDRE_PROMETHEUS_HOST=0.0.0.0
      - SCAPHANDRE_PROMETHEUS_PORT=8080
    networks:
      - cortex-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/metrics']
      interval: 30s
      timeout: 10s
      retries: 3

  # GPL Tools Service - Isolated GPL terminal visualization tools (GPL isolation)
  gpl-tools:
    build:
      context: ./services/gpl-tools
      dockerfile: Dockerfile
    ports:
      - '8765:8765' # GPL tools HTTP API
    volumes:
      - ./shared/images:/app/images:ro # Read-only access to shared images
    environment:
      - SAFE_IMAGE_DIR=/app/images
    networks:
      - cortex-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:8765/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.1
    ports:
      - '9090:9090'
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cortex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for dashboard visualization
  grafana:
    image: grafana/grafana:10.2.3
    ports:
      - '3001:3000' # Avoid conflict with Next.js app
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infra/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    env_file:
      - ./env/common.env
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_LOG_LEVEL=warn
    networks:
      - cortex-network
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter - System metrics collection
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - '9100:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - cortex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # cAdvisor - Container metrics collection
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - '8081:8080'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - cortex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  qdrant_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  ollama_data:
    driver: local
  api_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  cortex-network:
    driver: bridge
