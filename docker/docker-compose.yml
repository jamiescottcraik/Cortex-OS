version: '3.8'

services:
  # Observability - Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - '16686:16686' # Jaeger UI
      - '6831:6831/udp' # Agent
      - '4317:4317' # OTLP gRPC
      - '4318:4318' # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - cortex-network

  # Vector Database - Qdrant for embeddings and vector search
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - '6333:6333' # HTTP API
      - '6334:6334' # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - cortex-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:6333/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Graph Database - Neo4j for knowledge graphs and relationships
  neo4j:
    image: neo4j:5-community
    ports:
      - '7474:7474' # HTTP
      - '7687:7687' # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    environment:
      - NEO4J_AUTH=neo4j/cortexpassword
      - NEO4J_PLUGINS=apoc
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
    networks:
      - cortex-network
    healthcheck:
      test: ['CMD', 'cypher-shell', '-u', 'neo4j', '-p', 'cortexpassword', 'RETURN 1']
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API - FastAPI application
  # TODO: Uncomment when ready for containerized development
  # api:
  #   build:
  #     context: ./apps/api
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - ENVIRONMENT=development
  #     - BACKEND_CORS_ORIGINS=["http://localhost:3000", "http://web:3000"]
  #     - QDRANT_HOST=qdrant
  #     - QDRANT_PORT=6333
  #     - NEO4J_URI=bolt://neo4j:7687
  #     - NEO4J_USER=neo4j
  #     - NEO4J_PASSWORD=cortexpassword
  #     - JAEGER_ENDPOINT=http://jaeger:4318
  #   depends_on:
  #     qdrant:
  #       condition: service_healthy
  #     neo4j:
  #       condition: service_healthy
  #     jaeger:
  #       condition: service_started
  #   networks:
  #     - cortex-network
  #   volumes:
  #     - ./apps/api:/app
  #     - api_logs:/app/logs
  #   restart: unless-stopped

  # Frontend Web App - Next.js application
  # TODO: Uncomment when ready for containerized development
  # web:
  #   build:
  #     context: ./apps/web
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=development
  #     - NEXT_PUBLIC_API_URL=http://localhost:8000
  #     - INTERNAL_API_URL=http://api:8000
  #   depends_on:
  #     - api
  #   networks:
  #     - cortex-network
  #   volumes:
  #     - ./apps/web:/app
  #     - /app/node_modules
  #     - /app/.next
  #   restart: unless-stopped

  # Local AI - Ollama for local LLM inference
  ollama:
    image: ollama/ollama:latest
    ports:
      - '11434:11434'
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - cortex-network
    restart: unless-stopped
    # Uncomment the following lines if you have GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]

  # Carbon Monitoring - Scaphandre Bridge Service (GPL isolation)
  scaphandre-bridge:
    build:
      context: ./services/scaphandre-bridge
      dockerfile: Dockerfile
    ports:
      - '8080:8080' # Prometheus metrics
    privileged: true # Required for hardware monitoring
    volumes:
      - /sys:/sys:ro
      - /proc:/proc:ro
    environment:
      - SCAPHANDRE_PROMETHEUS_HOST=0.0.0.0
      - SCAPHANDRE_PROMETHEUS_PORT=8080
    networks:
      - cortex-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/metrics']
      interval: 30s
      timeout: 10s
      retries: 3

  # GPL Tools Service - Isolated GPL terminal visualization tools (GPL isolation)
  gpl-tools:
    build:
      context: ./services/gpl-tools
      dockerfile: Dockerfile
    ports:
      - '8765:8765' # GPL tools HTTP API
    volumes:
      - ./shared/images:/app/images:ro # Read-only access to shared images
    environment:
      - SAFE_IMAGE_DIR=/app/images
    networks:
      - cortex-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8765/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cortex-network
    restart: unless-stopped

  # Grafana for dashboard visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - '3001:3000' # Avoid conflict with Next.js app
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=cortex123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - cortex-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  qdrant_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  ollama_data:
    driver: local
  api_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  cortex-network:
    driver: bridge
