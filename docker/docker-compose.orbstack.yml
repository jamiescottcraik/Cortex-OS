# OrbStack-specific Docker Compose configuration
# Optimized for local development with OrbStack

services:
  # Override configurations for OrbStack
  qdrant:
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO

  neo4j:
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    environment:
      - NEO4J_AUTH=neo4j/cortexdev
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_dbms_memory_pagecache_size=512m

  # Development API service (uncommented for OrbStack)
  cortex-api:
    build:
      context: ..
      dockerfile: apps/api/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - BACKEND_CORS_ORIGINS=["http://localhost:3000", "http://localhost:3001"]
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=cortexdev
      - JAEGER_ENDPOINT=http://jaeger:4318
    volumes:
      - ../apps/api:/app
      - api_logs:/app/logs
    depends_on:
      qdrant:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - cortex-network

  # Development web service (uncommented for OrbStack)
  cortex-web:
    build:
      context: ..
      dockerfile: apps/cortex-webui/Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - INTERNAL_API_URL=http://cortex-api:8000
    volumes:
      - ../apps/cortex-webui:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - cortex-api
    networks:
      - cortex-network

  # Resource limits optimized for OrbStack
  prometheus:
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  grafana:
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Optional: Redis for caching (development)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cortex-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

# Additional volume for Redis
volumes:
  redis_data:
    driver: local