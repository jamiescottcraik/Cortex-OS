# OrbStack configuration for Cortex-OS
# This file optimizes the container runtime for the project's specific needs

version: "1.0"

# Global OrbStack settings
settings:
  # Enable Rosetta 2 emulation selectively (disabled for Rust binaries)
  rosetta:
    enabled: true
    # Exclude Rust services from Rosetta (native ARM64 performance)
    exclude_services:
      - "cortex-codex-*"
      - "*codex*"
  
  # Optimize for development workflow
  development:
    # Fast bind mounts for source code
    bind_mount_optimization: true
    # Enable file watching for hot reload
    file_watching: true
    # Optimize network performance
    network_optimization: true
  
  # Resource management
  resources:
    # Automatic memory management
    memory:
      automatic_cleanup: true
      # Cleanup threshold (80% memory usage)
      cleanup_threshold: 0.8
    
    # CPU optimization
    cpu:
      # Use all available cores for build processes
      build_parallelism: "auto"
      # Limit runtime CPU for services
      runtime_limits: true

# Service-specific optimizations
services:
  # Node.js services
  node_services:
    pattern: "*node*|*gateway*|*mcp*|*cortex-os*"
    optimizations:
      - "nodejs_v8_heap_optimization"
      - "pnpm_cache_optimization"
      - "fast_bind_mounts"
  
  # Rust services
  rust_services:
    pattern: "*codex*|*rust*"
    optimizations:
      - "cargo_cache_optimization"
      - "native_arm64_execution"
      - "release_build_caching"
  
  # Python services
  python_services:
    pattern: "*py*|*ml*|*ai*"
    optimizations:
      - "pip_cache_optimization"
      - "model_cache_persistent"
      - "transformers_cache_optimization"

# Volume optimizations
volumes:
  # Cache volumes for faster builds
  cache_volumes:
    - name: "pnpm_cache"
      optimization: "fast_ssd"
    - name: "cargo_cache"
      optimization: "fast_ssd"
    - name: "python_cache"
      optimization: "fast_ssd"
  
  # Model storage (can be slower but larger)
  model_volumes:
    - name: "model_cache"
      optimization: "capacity"
    - name: "huggingface_cache"
      optimization: "capacity"

# Network optimizations
network:
  # Internal communication optimization
  internal_dns: true
  # Service discovery
  service_discovery: true
  # Load balancing for scaled services
  load_balancing: true

# Build optimizations
build:
  # Enable BuildKit for better caching
  buildkit: true
  # Use local registry for faster image pulls
  local_registry: true
  # Multi-platform build caching
  platform_cache: true
  
  # Build profiles for different scenarios
  profiles:
    development:
      cache_strategy: "aggressive"
      parallel_builds: true
      incremental_builds: true
    
    production:
      cache_strategy: "conservative"
      security_scanning: true
      image_optimization: true