# brAInwav Cortex-OS Docker development environment
# Profiles: dev-min, dev-full, web, api, workers, observability

x-brainwav-labels: &brainwav-labels
  com.brainwav.project: "cortex-os"
  com.brainwav.environment: "development"
  com.brainwav.stack: "docker"

services:
  nats:
    container_name: cortexos_nats
    image: nats:2.10
    command: ["-js", "-sd", "/data"]
    ports:
      - "${NATS_PORT:-4222}:4222"
      - "${NATS_MANAGEMENT_PORT:-8222}:8222"
    volumes:
      - nats:/data
    mem_limit: "256m"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    labels:
      <<: *brainwav-labels
      com.brainwav.service: "nats"
      com.brainwav.tier: "messaging"
      com.brainwav.description: "NATS messaging server with JetStream"
      com.brainwav.profiles: "dev-min,dev-full"

  model-gateway:
    container_name: cortexos_model_gateway
    build:
      context: ../../
      dockerfile: packages/model-gateway/Dockerfile
      platforms:
        - linux/arm64
        - linux/amd64
    profiles: ["dev-min","dev-full"]
    environment:
      MLX_BASE_URL: "${MLX_HOST_URL:-http://host.docker.internal:8081}"
      NODE_ENV: development
      NODE_OPTIONS: "--max-old-space-size=384"
      MODEL_GATEWAY_PORT: "8080"
    ports:
      - "${MODEL_GATEWAY_PORT:-8081}:8080"
    depends_on:
      nats:
        condition: service_healthy
    mem_limit: "512m"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    labels:
      <<: *brainwav-labels
      com.brainwav.service: "model-gateway"
      com.brainwav.tier: "api"
      com.brainwav.runtime: "node"
      com.brainwav.description: "Model Gateway API for MLX integration"
      com.brainwav.profiles: "dev-min,dev-full"

  mcp-registry:
    container_name: cortexos_mcp_registry
    build:
      context: ../../
      dockerfile: packages/mcp-registry/Dockerfile
    profiles: ["dev-full"]
    environment:
      NODE_ENV: development
      MCP_REGISTRY_PORT: "8090"
    ports:
      - "${MCP_REGISTRY_PORT:-8082}:8090"
    depends_on:
      nats:
        condition: service_healthy
    mem_limit: "256m"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8090/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    labels:
      <<: *brainwav-labels
      com.brainwav.service: "mcp-registry"
      com.brainwav.tier: "api"
      com.brainwav.runtime: "node"
      com.brainwav.description: "Model Context Protocol Registry"
      com.brainwav.profiles: "dev-full"

  cortex-os:
    container_name: cortexos_cortex_os
    build:
      context: ../../
      dockerfile: apps/cortex-os/Dockerfile
    profiles: ["dev-min","dev-full"]
    environment:
      NODE_ENV: development
      NATS_URL: "nats://nats:4222"
      MODEL_GATEWAY_URL: "http://model-gateway:8080"
      NODE_OPTIONS: "--max-old-space-size=384"
    ports:
      - "${WEB_PORT:-3000}:3000"
    depends_on:
      nats:
        condition: service_healthy
      model-gateway:
        condition: service_healthy
    logging:
      options:
        max-size: "10m"
        max-file: "2"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:3000/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 15s
    labels:
      <<: *brainwav-labels
      com.brainwav.service: "cortex-os"
      com.brainwav.tier: "app"
      com.brainwav.runtime: "node"
      com.brainwav.description: "Main Cortex-OS runtime application"
      com.brainwav.profiles: "dev-min,dev-full"

  agents-workers:
    container_name: cortexos_agents_workers
    build:
      context: ../../
      dockerfile: packages/agents/Dockerfile
    profiles: ["workers"]
    environment:
      NODE_ENV: development
      NATS_URL: "nats://nats:4222"
      NODE_OPTIONS: "--max-old-space-size=256"
    depends_on:
      nats:
        condition: service_healthy
    mem_limit: "384m"
    labels:
      <<: *brainwav-labels
      com.brainwav.service: "agents-workers"
      com.brainwav.tier: "workers"
      com.brainwav.runtime: "node"
      com.brainwav.description: "Worker pool for Cortex-OS agents"
      com.brainwav.profiles: "workers"

  otel-collector:
    container_name: cortexos_otel_collector
    image: otel/opentelemetry-collector:0.103.1
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ../../docs/mcp/observability/otel-collector.yaml:/etc/otelcol/config.yaml:ro
    profiles: ["observability"]
    ports:
      - "${OTEL_HTTP_PORT:-4318}:4318"
    healthcheck:
      test: ["CMD","curl","-fsS","http://localhost:4318"]
      interval: 10s
      timeout: 2s
      retries: 3
    labels:
      <<: *brainwav-labels
      com.brainwav.service: "otel-collector"
      com.brainwav.tier: "observability"
      com.brainwav.runtime: "otel"
      com.brainwav.description: "OpenTelemetry metrics and traces collector"
      com.brainwav.profiles: "observability"

  loki:
    container_name: cortexos_loki
    image: grafana/loki:2.9.8
    command: ["-config.file=/etc/loki/local-config.yaml"]
    profiles: ["observability"]
    ports:
      - "${LOKI_PORT:-3100}:3100"
    healthcheck:
      test: ["CMD","curl","-fsS","http://localhost:3100/ready"]
      interval: 10s
      timeout: 2s
      retries: 3
    labels:
      <<: *brainwav-labels
      com.brainwav.service: "loki"
      com.brainwav.tier: "observability"
      com.brainwav.runtime: "grafana"
      com.brainwav.description: "Grafana Loki log aggregation system"
      com.brainwav.profiles: "observability"

  tempo:
    container_name: cortexos_tempo
    image: grafana/tempo:2.5.0
    command: ["-config.file=/etc/tempo.yaml"]
    profiles: ["observability"]
    ports:
      - "${TEMPO_PORT:-3200}:3200"
    healthcheck:
      test: ["CMD","curl","-fsS","http://localhost:3200/status"]
      interval: 10s
      timeout: 2s
      retries: 3
    labels:
      <<: *brainwav-labels
      com.brainwav.service: "tempo"
      com.brainwav.tier: "observability"
      com.brainwav.runtime: "grafana"
      com.brainwav.description: "Grafana Tempo distributed tracing backend"
      com.brainwav.profiles: "observability"

  grafana:
    container_name: cortexos_grafana
    image: grafana/grafana:10.4.3
    profiles: ["observability"]
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "admin"
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    depends_on:
      loki:
        condition: service_healthy
      tempo:
        condition: service_healthy
    volumes:
      - ../../infra/compose/observability/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ../../infra/compose/observability/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../../docs/mcp/observability/dashboards:/var/lib/grafana/dashboards:ro
    mem_limit: "512m"
    labels:
      <<: *brainwav-labels
      com.brainwav.service: "grafana"
      com.brainwav.tier: "observability"
      com.brainwav.runtime: "grafana"
      com.brainwav.description: "Grafana visualization and monitoring dashboard"
      com.brainwav.profiles: "observability"

  cortex-web:
    container_name: cortexos_cortex_web
    build:
      context: ../../
      dockerfile: apps/cortex-web/Dockerfile
    profiles: ["web"]
    environment:
      NODE_ENV: development
      NODE_OPTIONS: "--max-old-space-size=384"
    ports:
      - "${WEB_PORT:-3000}:3000"
    mem_limit: "512m"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:3000/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    labels:
      <<: *brainwav-labels
      com.brainwav.service: "cortex-web"
      com.brainwav.tier: "web"
      com.brainwav.runtime: "node"
      com.brainwav.description: "Cortex-OS web frontend application"
      com.brainwav.profiles: "web"

  api:
    container_name: cortexos_api
    build:
      context: ../../
      dockerfile: apps/api/Dockerfile
    profiles: ["api"]
    environment:
      PYTHONUNBUFFERED: "1"
      APP_MODULE: "src.api.endpoints:app"
    ports:
      - "${API_PORT:-8080}:8082"
    mem_limit: "384m"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8082/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    labels:
      <<: *brainwav-labels
      com.brainwav.service: "api"
      com.brainwav.tier: "api"
      com.brainwav.runtime: "python"
      com.brainwav.description: "Cortex-OS Python API backend"
      com.brainwav.profiles: "api"

volumes:
  nats: {}
