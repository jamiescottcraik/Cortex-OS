[
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/cortex-ai-github/src/server/webhook-server.ts",
    "lines": "26",
    "severity": "medium",
    "category": "unused-parameter",
    "description": "Constructor parameter '_port' is defined but never used",
    "evidence": "constructor(aiApp: CortexAiGitHubApp, webhookSecret: string, _port: number = 3000)",
    "fix": "Remove the unused _port parameter from constructor, as port is passed to start() method",
    "tests_to_add": "Verify constructor works without port parameter"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/cortex-ai-github/src/server/webhook-server.ts",
    "lines": "417-418",
    "severity": "medium",
    "category": "async-operation",
    "description": "Dynamic import in async context without error handling",
    "evidence": "const { Octokit } = await import('@octokit/rest'); const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });",
    "fix": "Use static import at module level or add try-catch around dynamic import",
    "tests_to_add": "Test reaction functionality with import failures"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/cortex-ai-github/src/server/webhook-server.ts",
    "lines": "232",
    "severity": "high",
    "category": "type-safety",
    "description": "Function parameter 'payload' has 'any' type, weakening type safety",
    "evidence": "private async handleWebhookEvent(event: string, payload: any): Promise<void>",
    "fix": "Define proper TypeScript interfaces for webhook payloads",
    "tests_to_add": "Type safety tests with various payload shapes"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/cortex-semgrep-github/src/server/app.ts",
    "lines": "701-711",
    "severity": "medium",
    "category": "code-duplication",
    "description": "SecurityScanResult interface duplicated - should be imported",
    "evidence": "interface SecurityScanResult { ruleId: string; message: string; severity: 'HIGH' | 'MEDIUM' | 'LOW'; file: string; ...",
    "fix": "Remove duplicate interface definition and ensure proper import from semgrep-scanner module",
    "tests_to_add": "Verify interface consistency across modules"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/cortex-semgrep-github/src/server/app.ts",
    "lines": "609-616",
    "severity": "low",
    "category": "dead-code",
    "description": "Function addSuccessReaction is defined but never used",
    "evidence": "async function addSuccessReaction(payload: any, owner: string, repo: string) { await octokit.rest.reactions.createForIssueComment({ ... }); }",
    "fix": "Remove unused function or integrate it into progressive status system",
    "tests_to_add": "Verify no breaking changes after removal"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/cortex-structure-github/src/server/app.ts",
    "lines": "611",
    "severity": "medium",
    "category": "api-usage",
    "description": "Using repo.default_branch which may be undefined in some contexts",
    "evidence": "const tempDir = await cloneRepository(repo.clone_url, repo.default_branch);",
    "fix": "Add fallback to 'main' or 'master' branch, or extract actual default branch from API",
    "tests_to_add": "Test with repositories that have undefined default_branch"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/cortex-structure-github/src/server/app.ts",
    "lines": "1061-1070",
    "severity": "high",
    "category": "security",
    "description": "URL validation pattern allows potentially unsafe characters",
    "evidence": "const urlPattern = /^https:\\/\\/github\\.com\\/[a-zA-Z0-9_.-]+\\/[a-zA-Z0-9_.-]+$/;",
    "fix": "Strengthen validation: limit length, check for directory traversal patterns, validate against GitHub API",
    "tests_to_add": "Test with malicious URLs and edge cases"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/cortex-structure-github/src/lib/context-analyzer.ts",
    "lines": "239",
    "severity": "medium",
    "category": "async-operation",
    "description": "Recursive readdir may cause performance issues with large directories",
    "evidence": "const files = await fs.readdir(srcPath, { recursive: true });",
    "fix": "Add depth limit and file count limits, use streaming approach for large directories",
    "tests_to_add": "Test with large directory structures and deep nesting"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/cortex-structure-github/src/lib/progress-updater.ts",
    "lines": "195-203",
    "severity": "high",
    "category": "logic-error",
    "description": "updateProgressComment method has incomplete implementation with TODO comment",
    "evidence": "// TODO: Implement actual comment update when we have repo context",
    "fix": "Complete the implementation or remove the TODO if not needed",
    "tests_to_add": "Integration tests for progress comment updates"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/cortex-structure-github/src/lib/progress-updater.ts",
    "lines": "29-31",
    "severity": "medium",
    "category": "memory-management",
    "description": "Map activeProgress grows unbounded without cleanup mechanism being called",
    "evidence": "private activeProgress = new Map<string, ProgressState>();",
    "fix": "Add automatic cleanup on class destruction or implement periodic cleanup calling",
    "tests_to_add": "Test memory usage with many progress tasks"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/cortex-semgrep-github/src/server/app.ts",
    "lines": "139",
    "severity": "low",
    "category": "naming-convention",
    "description": "Variable name tempDir uses insecure random generation for uniqueness",
    "evidence": "const tempDir = `/tmp/semgrep-scan-${Date.now()}-${Math.random().toString(36).substring(2, 8)}`;",
    "fix": "Use crypto.randomUUID() or crypto.randomBytes() for better entropy",
    "tests_to_add": "Verify no collisions in temp directory names under load"
  },
  {
    "file": "/Users/jamiecraik/.Cortex-OS/packages/cortex-structure-github/src/server/app.ts",
    "lines": "1078",
    "severity": "low",
    "category": "naming-convention",
    "description": "Variable tempDir uses same insecure random generation pattern",
    "evidence": "const tempDir = path.join('/tmp', `structure-analysis-${Date.now()}-${Math.random().toString(36).substring(2, 8)}`);",
    "fix": "Use crypto.randomUUID() for better entropy and collision avoidance",
    "tests_to_add": "Test directory creation with high concurrency"
  }
]
